// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage a VRF Route Target Address Family.
//
// - API Documentation: [rtctrlAfCtrl](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtctrl:AfCtrl/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewVrfRouteTargetAddressFamily(ctx, "example", &nxos.VrfRouteTargetAddressFamilyArgs{
//				AddressFamily:            pulumi.String("ipv4-ucast"),
//				RouteTargetAddressFamily: pulumi.String("ipv4-ucast"),
//				Vrf:                      pulumi.String("VRF1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/vrfRouteTargetAddressFamily:VrfRouteTargetAddressFamily example "sys/inst-[VRF1]/dom-[VRF1]/af-[ipv4-ucast]/ctrl-[ipv4-ucast]"
//
// ```
type VrfRouteTargetAddressFamily struct {
	pulumi.CustomResourceState

	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily pulumi.StringOutput `pulumi:"addressFamily"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
	RouteTargetAddressFamily pulumi.StringOutput `pulumi:"routeTargetAddressFamily"`
	// VRF name.
	Vrf pulumi.StringOutput `pulumi:"vrf"`
}

// NewVrfRouteTargetAddressFamily registers a new resource with the given unique name, arguments, and options.
func NewVrfRouteTargetAddressFamily(ctx *pulumi.Context,
	name string, args *VrfRouteTargetAddressFamilyArgs, opts ...pulumi.ResourceOption) (*VrfRouteTargetAddressFamily, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressFamily == nil {
		return nil, errors.New("invalid value for required argument 'AddressFamily'")
	}
	if args.RouteTargetAddressFamily == nil {
		return nil, errors.New("invalid value for required argument 'RouteTargetAddressFamily'")
	}
	if args.Vrf == nil {
		return nil, errors.New("invalid value for required argument 'Vrf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VrfRouteTargetAddressFamily
	err := ctx.RegisterResource("nxos:index/vrfRouteTargetAddressFamily:VrfRouteTargetAddressFamily", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrfRouteTargetAddressFamily gets an existing VrfRouteTargetAddressFamily resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrfRouteTargetAddressFamily(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrfRouteTargetAddressFamilyState, opts ...pulumi.ResourceOption) (*VrfRouteTargetAddressFamily, error) {
	var resource VrfRouteTargetAddressFamily
	err := ctx.ReadResource("nxos:index/vrfRouteTargetAddressFamily:VrfRouteTargetAddressFamily", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrfRouteTargetAddressFamily resources.
type vrfRouteTargetAddressFamilyState struct {
	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily *string `pulumi:"addressFamily"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
	RouteTargetAddressFamily *string `pulumi:"routeTargetAddressFamily"`
	// VRF name.
	Vrf *string `pulumi:"vrf"`
}

type VrfRouteTargetAddressFamilyState struct {
	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
	RouteTargetAddressFamily pulumi.StringPtrInput
	// VRF name.
	Vrf pulumi.StringPtrInput
}

func (VrfRouteTargetAddressFamilyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrfRouteTargetAddressFamilyState)(nil)).Elem()
}

type vrfRouteTargetAddressFamilyArgs struct {
	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily string `pulumi:"addressFamily"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
	RouteTargetAddressFamily string `pulumi:"routeTargetAddressFamily"`
	// VRF name.
	Vrf string `pulumi:"vrf"`
}

// The set of arguments for constructing a VrfRouteTargetAddressFamily resource.
type VrfRouteTargetAddressFamilyArgs struct {
	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
	RouteTargetAddressFamily pulumi.StringInput
	// VRF name.
	Vrf pulumi.StringInput
}

func (VrfRouteTargetAddressFamilyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrfRouteTargetAddressFamilyArgs)(nil)).Elem()
}

type VrfRouteTargetAddressFamilyInput interface {
	pulumi.Input

	ToVrfRouteTargetAddressFamilyOutput() VrfRouteTargetAddressFamilyOutput
	ToVrfRouteTargetAddressFamilyOutputWithContext(ctx context.Context) VrfRouteTargetAddressFamilyOutput
}

func (*VrfRouteTargetAddressFamily) ElementType() reflect.Type {
	return reflect.TypeOf((**VrfRouteTargetAddressFamily)(nil)).Elem()
}

func (i *VrfRouteTargetAddressFamily) ToVrfRouteTargetAddressFamilyOutput() VrfRouteTargetAddressFamilyOutput {
	return i.ToVrfRouteTargetAddressFamilyOutputWithContext(context.Background())
}

func (i *VrfRouteTargetAddressFamily) ToVrfRouteTargetAddressFamilyOutputWithContext(ctx context.Context) VrfRouteTargetAddressFamilyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRouteTargetAddressFamilyOutput)
}

func (i *VrfRouteTargetAddressFamily) ToOutput(ctx context.Context) pulumix.Output[*VrfRouteTargetAddressFamily] {
	return pulumix.Output[*VrfRouteTargetAddressFamily]{
		OutputState: i.ToVrfRouteTargetAddressFamilyOutputWithContext(ctx).OutputState,
	}
}

// VrfRouteTargetAddressFamilyArrayInput is an input type that accepts VrfRouteTargetAddressFamilyArray and VrfRouteTargetAddressFamilyArrayOutput values.
// You can construct a concrete instance of `VrfRouteTargetAddressFamilyArrayInput` via:
//
//	VrfRouteTargetAddressFamilyArray{ VrfRouteTargetAddressFamilyArgs{...} }
type VrfRouteTargetAddressFamilyArrayInput interface {
	pulumi.Input

	ToVrfRouteTargetAddressFamilyArrayOutput() VrfRouteTargetAddressFamilyArrayOutput
	ToVrfRouteTargetAddressFamilyArrayOutputWithContext(context.Context) VrfRouteTargetAddressFamilyArrayOutput
}

type VrfRouteTargetAddressFamilyArray []VrfRouteTargetAddressFamilyInput

func (VrfRouteTargetAddressFamilyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrfRouteTargetAddressFamily)(nil)).Elem()
}

func (i VrfRouteTargetAddressFamilyArray) ToVrfRouteTargetAddressFamilyArrayOutput() VrfRouteTargetAddressFamilyArrayOutput {
	return i.ToVrfRouteTargetAddressFamilyArrayOutputWithContext(context.Background())
}

func (i VrfRouteTargetAddressFamilyArray) ToVrfRouteTargetAddressFamilyArrayOutputWithContext(ctx context.Context) VrfRouteTargetAddressFamilyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRouteTargetAddressFamilyArrayOutput)
}

func (i VrfRouteTargetAddressFamilyArray) ToOutput(ctx context.Context) pulumix.Output[[]*VrfRouteTargetAddressFamily] {
	return pulumix.Output[[]*VrfRouteTargetAddressFamily]{
		OutputState: i.ToVrfRouteTargetAddressFamilyArrayOutputWithContext(ctx).OutputState,
	}
}

// VrfRouteTargetAddressFamilyMapInput is an input type that accepts VrfRouteTargetAddressFamilyMap and VrfRouteTargetAddressFamilyMapOutput values.
// You can construct a concrete instance of `VrfRouteTargetAddressFamilyMapInput` via:
//
//	VrfRouteTargetAddressFamilyMap{ "key": VrfRouteTargetAddressFamilyArgs{...} }
type VrfRouteTargetAddressFamilyMapInput interface {
	pulumi.Input

	ToVrfRouteTargetAddressFamilyMapOutput() VrfRouteTargetAddressFamilyMapOutput
	ToVrfRouteTargetAddressFamilyMapOutputWithContext(context.Context) VrfRouteTargetAddressFamilyMapOutput
}

type VrfRouteTargetAddressFamilyMap map[string]VrfRouteTargetAddressFamilyInput

func (VrfRouteTargetAddressFamilyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrfRouteTargetAddressFamily)(nil)).Elem()
}

func (i VrfRouteTargetAddressFamilyMap) ToVrfRouteTargetAddressFamilyMapOutput() VrfRouteTargetAddressFamilyMapOutput {
	return i.ToVrfRouteTargetAddressFamilyMapOutputWithContext(context.Background())
}

func (i VrfRouteTargetAddressFamilyMap) ToVrfRouteTargetAddressFamilyMapOutputWithContext(ctx context.Context) VrfRouteTargetAddressFamilyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRouteTargetAddressFamilyMapOutput)
}

func (i VrfRouteTargetAddressFamilyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VrfRouteTargetAddressFamily] {
	return pulumix.Output[map[string]*VrfRouteTargetAddressFamily]{
		OutputState: i.ToVrfRouteTargetAddressFamilyMapOutputWithContext(ctx).OutputState,
	}
}

type VrfRouteTargetAddressFamilyOutput struct{ *pulumi.OutputState }

func (VrfRouteTargetAddressFamilyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrfRouteTargetAddressFamily)(nil)).Elem()
}

func (o VrfRouteTargetAddressFamilyOutput) ToVrfRouteTargetAddressFamilyOutput() VrfRouteTargetAddressFamilyOutput {
	return o
}

func (o VrfRouteTargetAddressFamilyOutput) ToVrfRouteTargetAddressFamilyOutputWithContext(ctx context.Context) VrfRouteTargetAddressFamilyOutput {
	return o
}

func (o VrfRouteTargetAddressFamilyOutput) ToOutput(ctx context.Context) pulumix.Output[*VrfRouteTargetAddressFamily] {
	return pulumix.Output[*VrfRouteTargetAddressFamily]{
		OutputState: o.OutputState,
	}
}

// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
func (o VrfRouteTargetAddressFamilyOutput) AddressFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *VrfRouteTargetAddressFamily) pulumi.StringOutput { return v.AddressFamily }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o VrfRouteTargetAddressFamilyOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VrfRouteTargetAddressFamily) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
func (o VrfRouteTargetAddressFamilyOutput) RouteTargetAddressFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *VrfRouteTargetAddressFamily) pulumi.StringOutput { return v.RouteTargetAddressFamily }).(pulumi.StringOutput)
}

// VRF name.
func (o VrfRouteTargetAddressFamilyOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v *VrfRouteTargetAddressFamily) pulumi.StringOutput { return v.Vrf }).(pulumi.StringOutput)
}

type VrfRouteTargetAddressFamilyArrayOutput struct{ *pulumi.OutputState }

func (VrfRouteTargetAddressFamilyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrfRouteTargetAddressFamily)(nil)).Elem()
}

func (o VrfRouteTargetAddressFamilyArrayOutput) ToVrfRouteTargetAddressFamilyArrayOutput() VrfRouteTargetAddressFamilyArrayOutput {
	return o
}

func (o VrfRouteTargetAddressFamilyArrayOutput) ToVrfRouteTargetAddressFamilyArrayOutputWithContext(ctx context.Context) VrfRouteTargetAddressFamilyArrayOutput {
	return o
}

func (o VrfRouteTargetAddressFamilyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VrfRouteTargetAddressFamily] {
	return pulumix.Output[[]*VrfRouteTargetAddressFamily]{
		OutputState: o.OutputState,
	}
}

func (o VrfRouteTargetAddressFamilyArrayOutput) Index(i pulumi.IntInput) VrfRouteTargetAddressFamilyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VrfRouteTargetAddressFamily {
		return vs[0].([]*VrfRouteTargetAddressFamily)[vs[1].(int)]
	}).(VrfRouteTargetAddressFamilyOutput)
}

type VrfRouteTargetAddressFamilyMapOutput struct{ *pulumi.OutputState }

func (VrfRouteTargetAddressFamilyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrfRouteTargetAddressFamily)(nil)).Elem()
}

func (o VrfRouteTargetAddressFamilyMapOutput) ToVrfRouteTargetAddressFamilyMapOutput() VrfRouteTargetAddressFamilyMapOutput {
	return o
}

func (o VrfRouteTargetAddressFamilyMapOutput) ToVrfRouteTargetAddressFamilyMapOutputWithContext(ctx context.Context) VrfRouteTargetAddressFamilyMapOutput {
	return o
}

func (o VrfRouteTargetAddressFamilyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VrfRouteTargetAddressFamily] {
	return pulumix.Output[map[string]*VrfRouteTargetAddressFamily]{
		OutputState: o.OutputState,
	}
}

func (o VrfRouteTargetAddressFamilyMapOutput) MapIndex(k pulumi.StringInput) VrfRouteTargetAddressFamilyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VrfRouteTargetAddressFamily {
		return vs[0].(map[string]*VrfRouteTargetAddressFamily)[vs[1].(string)]
	}).(VrfRouteTargetAddressFamilyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRouteTargetAddressFamilyInput)(nil)).Elem(), &VrfRouteTargetAddressFamily{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRouteTargetAddressFamilyArrayInput)(nil)).Elem(), VrfRouteTargetAddressFamilyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRouteTargetAddressFamilyMapInput)(nil)).Elem(), VrfRouteTargetAddressFamilyMap{})
	pulumi.RegisterOutputType(VrfRouteTargetAddressFamilyOutput{})
	pulumi.RegisterOutputType(VrfRouteTargetAddressFamilyArrayOutput{})
	pulumi.RegisterOutputType(VrfRouteTargetAddressFamilyMapOutput{})
}
