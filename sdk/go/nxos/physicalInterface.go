// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage a physical interface.
//
// - API Documentation: [l1PhysIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/l1:PhysIf/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewPhysicalInterface(ctx, "example", &nxos.PhysicalInterfaceArgs{
//				AccessVlan:             pulumi.String("unknown"),
//				AdminState:             pulumi.String("up"),
//				AutoNegotiation:        pulumi.String("on"),
//				Bandwidth:              pulumi.Int(1000),
//				Delay:                  pulumi.Int(10),
//				Description:            pulumi.String("My Description"),
//				Duplex:                 pulumi.String("auto"),
//				FecMode:                pulumi.String("auto"),
//				InterfaceId:            pulumi.String("eth1/10"),
//				Layer:                  pulumi.String("Layer3"),
//				LinkDebounceDown:       pulumi.Int(200),
//				LinkDebounceUp:         pulumi.Int(0),
//				LinkLogging:            pulumi.String("enable"),
//				Medium:                 pulumi.String("broadcast"),
//				Mode:                   pulumi.String("access"),
//				Mtu:                    pulumi.Int(1500),
//				NativeVlan:             pulumi.String("unknown"),
//				Speed:                  pulumi.String("auto"),
//				SpeedGroup:             pulumi.String("auto"),
//				TrunkVlans:             pulumi.String("1-4094"),
//				UniDirectionalEthernet: pulumi.String("disable"),
//				UserConfiguredFlags:    pulumi.String("admin_layer,admin_mtu,admin_state"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/physicalInterface:PhysicalInterface example "sys/intf/phys-[eth1/10]"
//
// ```
type PhysicalInterface struct {
	pulumi.CustomResourceState

	// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
	AccessVlan pulumi.StringOutput `pulumi:"accessVlan"`
	// Administrative port state. - Choices: `up`, `down` - Default value: `up`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
	AutoNegotiation pulumi.StringOutput `pulumi:"autoNegotiation"`
	// The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
	// value: `0`
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
	Delay pulumi.IntOutput `pulumi:"delay"`
	// Interface description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
	Duplex pulumi.StringOutput `pulumi:"duplex"`
	// FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
	FecMode pulumi.StringOutput `pulumi:"fecMode"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
	Layer pulumi.StringOutput `pulumi:"layer"`
	// Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
	LinkDebounceDown pulumi.IntOutput `pulumi:"linkDebounceDown"`
	// Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
	LinkDebounceUp pulumi.IntOutput `pulumi:"linkDebounceUp"`
	// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
	LinkLogging pulumi.StringOutput `pulumi:"linkLogging"`
	// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
	Medium pulumi.StringOutput `pulumi:"medium"`
	// Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
	// `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu pulumi.IntOutput `pulumi:"mtu"`
	// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
	NativeVlan pulumi.StringOutput `pulumi:"nativeVlan"`
	// Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
	// `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
	// `auto`
	Speed pulumi.StringOutput `pulumi:"speed"`
	// Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
	SpeedGroup pulumi.StringOutput `pulumi:"speedGroup"`
	// List of trunk VLANs. - Default value: `1-4094`
	TrunkVlans pulumi.StringOutput `pulumi:"trunkVlans"`
	// UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
	UniDirectionalEthernet pulumi.StringOutput `pulumi:"uniDirectionalEthernet"`
	// Port User Config Flags.
	UserConfiguredFlags pulumi.StringPtrOutput `pulumi:"userConfiguredFlags"`
}

// NewPhysicalInterface registers a new resource with the given unique name, arguments, and options.
func NewPhysicalInterface(ctx *pulumi.Context,
	name string, args *PhysicalInterfaceArgs, opts ...pulumi.ResourceOption) (*PhysicalInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PhysicalInterface
	err := ctx.RegisterResource("nxos:index/physicalInterface:PhysicalInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPhysicalInterface gets an existing PhysicalInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPhysicalInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PhysicalInterfaceState, opts ...pulumi.ResourceOption) (*PhysicalInterface, error) {
	var resource PhysicalInterface
	err := ctx.ReadResource("nxos:index/physicalInterface:PhysicalInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PhysicalInterface resources.
type physicalInterfaceState struct {
	// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
	AccessVlan *string `pulumi:"accessVlan"`
	// Administrative port state. - Choices: `up`, `down` - Default value: `up`
	AdminState *string `pulumi:"adminState"`
	// Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
	AutoNegotiation *string `pulumi:"autoNegotiation"`
	// The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
	// value: `0`
	Bandwidth *int `pulumi:"bandwidth"`
	// The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
	Delay *int `pulumi:"delay"`
	// Interface description.
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
	Duplex *string `pulumi:"duplex"`
	// FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
	FecMode *string `pulumi:"fecMode"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId *string `pulumi:"interfaceId"`
	// Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
	Layer *string `pulumi:"layer"`
	// Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
	LinkDebounceDown *int `pulumi:"linkDebounceDown"`
	// Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
	LinkDebounceUp *int `pulumi:"linkDebounceUp"`
	// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
	LinkLogging *string `pulumi:"linkLogging"`
	// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
	Medium *string `pulumi:"medium"`
	// Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
	// `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
	Mode *string `pulumi:"mode"`
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu *int `pulumi:"mtu"`
	// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
	NativeVlan *string `pulumi:"nativeVlan"`
	// Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
	// `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
	// `auto`
	Speed *string `pulumi:"speed"`
	// Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
	SpeedGroup *string `pulumi:"speedGroup"`
	// List of trunk VLANs. - Default value: `1-4094`
	TrunkVlans *string `pulumi:"trunkVlans"`
	// UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
	UniDirectionalEthernet *string `pulumi:"uniDirectionalEthernet"`
	// Port User Config Flags.
	UserConfiguredFlags *string `pulumi:"userConfiguredFlags"`
}

type PhysicalInterfaceState struct {
	// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
	AccessVlan pulumi.StringPtrInput
	// Administrative port state. - Choices: `up`, `down` - Default value: `up`
	AdminState pulumi.StringPtrInput
	// Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
	AutoNegotiation pulumi.StringPtrInput
	// The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
	// value: `0`
	Bandwidth pulumi.IntPtrInput
	// The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
	Delay pulumi.IntPtrInput
	// Interface description.
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
	Duplex pulumi.StringPtrInput
	// FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
	FecMode pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringPtrInput
	// Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
	Layer pulumi.StringPtrInput
	// Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
	LinkDebounceDown pulumi.IntPtrInput
	// Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
	LinkDebounceUp pulumi.IntPtrInput
	// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
	LinkLogging pulumi.StringPtrInput
	// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
	Medium pulumi.StringPtrInput
	// Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
	// `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
	Mode pulumi.StringPtrInput
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu pulumi.IntPtrInput
	// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
	NativeVlan pulumi.StringPtrInput
	// Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
	// `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
	// `auto`
	Speed pulumi.StringPtrInput
	// Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
	SpeedGroup pulumi.StringPtrInput
	// List of trunk VLANs. - Default value: `1-4094`
	TrunkVlans pulumi.StringPtrInput
	// UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
	UniDirectionalEthernet pulumi.StringPtrInput
	// Port User Config Flags.
	UserConfiguredFlags pulumi.StringPtrInput
}

func (PhysicalInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*physicalInterfaceState)(nil)).Elem()
}

type physicalInterfaceArgs struct {
	// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
	AccessVlan *string `pulumi:"accessVlan"`
	// Administrative port state. - Choices: `up`, `down` - Default value: `up`
	AdminState *string `pulumi:"adminState"`
	// Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
	AutoNegotiation *string `pulumi:"autoNegotiation"`
	// The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
	// value: `0`
	Bandwidth *int `pulumi:"bandwidth"`
	// The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
	Delay *int `pulumi:"delay"`
	// Interface description.
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
	Duplex *string `pulumi:"duplex"`
	// FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
	FecMode *string `pulumi:"fecMode"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
	// Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
	Layer *string `pulumi:"layer"`
	// Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
	LinkDebounceDown *int `pulumi:"linkDebounceDown"`
	// Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
	LinkDebounceUp *int `pulumi:"linkDebounceUp"`
	// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
	LinkLogging *string `pulumi:"linkLogging"`
	// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
	Medium *string `pulumi:"medium"`
	// Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
	// `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
	Mode *string `pulumi:"mode"`
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu *int `pulumi:"mtu"`
	// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
	NativeVlan *string `pulumi:"nativeVlan"`
	// Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
	// `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
	// `auto`
	Speed *string `pulumi:"speed"`
	// Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
	SpeedGroup *string `pulumi:"speedGroup"`
	// List of trunk VLANs. - Default value: `1-4094`
	TrunkVlans *string `pulumi:"trunkVlans"`
	// UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
	UniDirectionalEthernet *string `pulumi:"uniDirectionalEthernet"`
	// Port User Config Flags.
	UserConfiguredFlags *string `pulumi:"userConfiguredFlags"`
}

// The set of arguments for constructing a PhysicalInterface resource.
type PhysicalInterfaceArgs struct {
	// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
	AccessVlan pulumi.StringPtrInput
	// Administrative port state. - Choices: `up`, `down` - Default value: `up`
	AdminState pulumi.StringPtrInput
	// Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
	AutoNegotiation pulumi.StringPtrInput
	// The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
	// value: `0`
	Bandwidth pulumi.IntPtrInput
	// The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
	Delay pulumi.IntPtrInput
	// Interface description.
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
	Duplex pulumi.StringPtrInput
	// FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
	FecMode pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringInput
	// Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
	Layer pulumi.StringPtrInput
	// Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
	LinkDebounceDown pulumi.IntPtrInput
	// Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
	LinkDebounceUp pulumi.IntPtrInput
	// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
	LinkLogging pulumi.StringPtrInput
	// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
	Medium pulumi.StringPtrInput
	// Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
	// `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
	Mode pulumi.StringPtrInput
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu pulumi.IntPtrInput
	// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
	NativeVlan pulumi.StringPtrInput
	// Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
	// `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
	// `auto`
	Speed pulumi.StringPtrInput
	// Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
	SpeedGroup pulumi.StringPtrInput
	// List of trunk VLANs. - Default value: `1-4094`
	TrunkVlans pulumi.StringPtrInput
	// UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
	UniDirectionalEthernet pulumi.StringPtrInput
	// Port User Config Flags.
	UserConfiguredFlags pulumi.StringPtrInput
}

func (PhysicalInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*physicalInterfaceArgs)(nil)).Elem()
}

type PhysicalInterfaceInput interface {
	pulumi.Input

	ToPhysicalInterfaceOutput() PhysicalInterfaceOutput
	ToPhysicalInterfaceOutputWithContext(ctx context.Context) PhysicalInterfaceOutput
}

func (*PhysicalInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**PhysicalInterface)(nil)).Elem()
}

func (i *PhysicalInterface) ToPhysicalInterfaceOutput() PhysicalInterfaceOutput {
	return i.ToPhysicalInterfaceOutputWithContext(context.Background())
}

func (i *PhysicalInterface) ToPhysicalInterfaceOutputWithContext(ctx context.Context) PhysicalInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhysicalInterfaceOutput)
}

func (i *PhysicalInterface) ToOutput(ctx context.Context) pulumix.Output[*PhysicalInterface] {
	return pulumix.Output[*PhysicalInterface]{
		OutputState: i.ToPhysicalInterfaceOutputWithContext(ctx).OutputState,
	}
}

// PhysicalInterfaceArrayInput is an input type that accepts PhysicalInterfaceArray and PhysicalInterfaceArrayOutput values.
// You can construct a concrete instance of `PhysicalInterfaceArrayInput` via:
//
//	PhysicalInterfaceArray{ PhysicalInterfaceArgs{...} }
type PhysicalInterfaceArrayInput interface {
	pulumi.Input

	ToPhysicalInterfaceArrayOutput() PhysicalInterfaceArrayOutput
	ToPhysicalInterfaceArrayOutputWithContext(context.Context) PhysicalInterfaceArrayOutput
}

type PhysicalInterfaceArray []PhysicalInterfaceInput

func (PhysicalInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PhysicalInterface)(nil)).Elem()
}

func (i PhysicalInterfaceArray) ToPhysicalInterfaceArrayOutput() PhysicalInterfaceArrayOutput {
	return i.ToPhysicalInterfaceArrayOutputWithContext(context.Background())
}

func (i PhysicalInterfaceArray) ToPhysicalInterfaceArrayOutputWithContext(ctx context.Context) PhysicalInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhysicalInterfaceArrayOutput)
}

func (i PhysicalInterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*PhysicalInterface] {
	return pulumix.Output[[]*PhysicalInterface]{
		OutputState: i.ToPhysicalInterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// PhysicalInterfaceMapInput is an input type that accepts PhysicalInterfaceMap and PhysicalInterfaceMapOutput values.
// You can construct a concrete instance of `PhysicalInterfaceMapInput` via:
//
//	PhysicalInterfaceMap{ "key": PhysicalInterfaceArgs{...} }
type PhysicalInterfaceMapInput interface {
	pulumi.Input

	ToPhysicalInterfaceMapOutput() PhysicalInterfaceMapOutput
	ToPhysicalInterfaceMapOutputWithContext(context.Context) PhysicalInterfaceMapOutput
}

type PhysicalInterfaceMap map[string]PhysicalInterfaceInput

func (PhysicalInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PhysicalInterface)(nil)).Elem()
}

func (i PhysicalInterfaceMap) ToPhysicalInterfaceMapOutput() PhysicalInterfaceMapOutput {
	return i.ToPhysicalInterfaceMapOutputWithContext(context.Background())
}

func (i PhysicalInterfaceMap) ToPhysicalInterfaceMapOutputWithContext(ctx context.Context) PhysicalInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhysicalInterfaceMapOutput)
}

func (i PhysicalInterfaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PhysicalInterface] {
	return pulumix.Output[map[string]*PhysicalInterface]{
		OutputState: i.ToPhysicalInterfaceMapOutputWithContext(ctx).OutputState,
	}
}

type PhysicalInterfaceOutput struct{ *pulumi.OutputState }

func (PhysicalInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PhysicalInterface)(nil)).Elem()
}

func (o PhysicalInterfaceOutput) ToPhysicalInterfaceOutput() PhysicalInterfaceOutput {
	return o
}

func (o PhysicalInterfaceOutput) ToPhysicalInterfaceOutputWithContext(ctx context.Context) PhysicalInterfaceOutput {
	return o
}

func (o PhysicalInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[*PhysicalInterface] {
	return pulumix.Output[*PhysicalInterface]{
		OutputState: o.OutputState,
	}
}

// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
func (o PhysicalInterfaceOutput) AccessVlan() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.AccessVlan }).(pulumi.StringOutput)
}

// Administrative port state. - Choices: `up`, `down` - Default value: `up`
func (o PhysicalInterfaceOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
func (o PhysicalInterfaceOutput) AutoNegotiation() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.AutoNegotiation }).(pulumi.StringOutput)
}

// The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
// value: `0`
func (o PhysicalInterfaceOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
func (o PhysicalInterfaceOutput) Delay() pulumi.IntOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.IntOutput { return v.Delay }).(pulumi.IntOutput)
}

// Interface description.
func (o PhysicalInterfaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o PhysicalInterfaceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
func (o PhysicalInterfaceOutput) Duplex() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.Duplex }).(pulumi.StringOutput)
}

// FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
func (o PhysicalInterfaceOutput) FecMode() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.FecMode }).(pulumi.StringOutput)
}

// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
func (o PhysicalInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
func (o PhysicalInterfaceOutput) Layer() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.Layer }).(pulumi.StringOutput)
}

// Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
func (o PhysicalInterfaceOutput) LinkDebounceDown() pulumi.IntOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.IntOutput { return v.LinkDebounceDown }).(pulumi.IntOutput)
}

// Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
func (o PhysicalInterfaceOutput) LinkDebounceUp() pulumi.IntOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.IntOutput { return v.LinkDebounceUp }).(pulumi.IntOutput)
}

// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
func (o PhysicalInterfaceOutput) LinkLogging() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.LinkLogging }).(pulumi.StringOutput)
}

// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
func (o PhysicalInterfaceOutput) Medium() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.Medium }).(pulumi.StringOutput)
}

// Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
// `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
func (o PhysicalInterfaceOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
func (o PhysicalInterfaceOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.IntOutput { return v.Mtu }).(pulumi.IntOutput)
}

// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
func (o PhysicalInterfaceOutput) NativeVlan() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.NativeVlan }).(pulumi.StringOutput)
}

// Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
// `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
// `auto`
func (o PhysicalInterfaceOutput) Speed() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.Speed }).(pulumi.StringOutput)
}

// Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
func (o PhysicalInterfaceOutput) SpeedGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.SpeedGroup }).(pulumi.StringOutput)
}

// List of trunk VLANs. - Default value: `1-4094`
func (o PhysicalInterfaceOutput) TrunkVlans() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.TrunkVlans }).(pulumi.StringOutput)
}

// UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
func (o PhysicalInterfaceOutput) UniDirectionalEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringOutput { return v.UniDirectionalEthernet }).(pulumi.StringOutput)
}

// Port User Config Flags.
func (o PhysicalInterfaceOutput) UserConfiguredFlags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhysicalInterface) pulumi.StringPtrOutput { return v.UserConfiguredFlags }).(pulumi.StringPtrOutput)
}

type PhysicalInterfaceArrayOutput struct{ *pulumi.OutputState }

func (PhysicalInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PhysicalInterface)(nil)).Elem()
}

func (o PhysicalInterfaceArrayOutput) ToPhysicalInterfaceArrayOutput() PhysicalInterfaceArrayOutput {
	return o
}

func (o PhysicalInterfaceArrayOutput) ToPhysicalInterfaceArrayOutputWithContext(ctx context.Context) PhysicalInterfaceArrayOutput {
	return o
}

func (o PhysicalInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PhysicalInterface] {
	return pulumix.Output[[]*PhysicalInterface]{
		OutputState: o.OutputState,
	}
}

func (o PhysicalInterfaceArrayOutput) Index(i pulumi.IntInput) PhysicalInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PhysicalInterface {
		return vs[0].([]*PhysicalInterface)[vs[1].(int)]
	}).(PhysicalInterfaceOutput)
}

type PhysicalInterfaceMapOutput struct{ *pulumi.OutputState }

func (PhysicalInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PhysicalInterface)(nil)).Elem()
}

func (o PhysicalInterfaceMapOutput) ToPhysicalInterfaceMapOutput() PhysicalInterfaceMapOutput {
	return o
}

func (o PhysicalInterfaceMapOutput) ToPhysicalInterfaceMapOutputWithContext(ctx context.Context) PhysicalInterfaceMapOutput {
	return o
}

func (o PhysicalInterfaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PhysicalInterface] {
	return pulumix.Output[map[string]*PhysicalInterface]{
		OutputState: o.OutputState,
	}
}

func (o PhysicalInterfaceMapOutput) MapIndex(k pulumi.StringInput) PhysicalInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PhysicalInterface {
		return vs[0].(map[string]*PhysicalInterface)[vs[1].(string)]
	}).(PhysicalInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PhysicalInterfaceInput)(nil)).Elem(), &PhysicalInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhysicalInterfaceArrayInput)(nil)).Elem(), PhysicalInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhysicalInterfaceMapInput)(nil)).Elem(), PhysicalInterfaceMap{})
	pulumi.RegisterOutputType(PhysicalInterfaceOutput{})
	pulumi.RegisterOutputType(PhysicalInterfaceArrayOutput{})
	pulumi.RegisterOutputType(PhysicalInterfaceMapOutput{})
}
