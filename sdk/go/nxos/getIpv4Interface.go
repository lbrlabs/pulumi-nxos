// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read an IPv4 interface.
//
// - API Documentation: [ipv4If](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:If/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupIpv4Interface(ctx, &nxos.LookupIpv4InterfaceArgs{
//				InterfaceId: "eth1/10",
//				Vrf:         "default",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIpv4Interface(ctx *pulumi.Context, args *LookupIpv4InterfaceArgs, opts ...pulumi.InvokeOption) (*LookupIpv4InterfaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIpv4InterfaceResult
	err := ctx.Invoke("nxos:index/getIpv4Interface:getIpv4Interface", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpv4Interface.
type LookupIpv4InterfaceArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
	// VRF name.
	Vrf string `pulumi:"vrf"`
}

// A collection of values returned by getIpv4Interface.
type LookupIpv4InterfaceResult struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// ip drop-glean enabled/disabled.
	DropGlean string `pulumi:"dropGlean"`
	// ip forward enabled/disabled.
	Forward string `pulumi:"forward"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
	// IP unnumbered. Reference to interface must match first field in the output of `show intf brief`. Example: `eth1/1`.
	Unnumbered string `pulumi:"unnumbered"`
	// URPF (unicast Reverse Path Forwarding).
	Urpf string `pulumi:"urpf"`
	// VRF name.
	Vrf string `pulumi:"vrf"`
}

func LookupIpv4InterfaceOutput(ctx *pulumi.Context, args LookupIpv4InterfaceOutputArgs, opts ...pulumi.InvokeOption) LookupIpv4InterfaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIpv4InterfaceResult, error) {
			args := v.(LookupIpv4InterfaceArgs)
			r, err := LookupIpv4Interface(ctx, &args, opts...)
			var s LookupIpv4InterfaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIpv4InterfaceResultOutput)
}

// A collection of arguments for invoking getIpv4Interface.
type LookupIpv4InterfaceOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringInput `pulumi:"interfaceId"`
	// VRF name.
	Vrf pulumi.StringInput `pulumi:"vrf"`
}

func (LookupIpv4InterfaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpv4InterfaceArgs)(nil)).Elem()
}

// A collection of values returned by getIpv4Interface.
type LookupIpv4InterfaceResultOutput struct{ *pulumi.OutputState }

func (LookupIpv4InterfaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpv4InterfaceResult)(nil)).Elem()
}

func (o LookupIpv4InterfaceResultOutput) ToLookupIpv4InterfaceResultOutput() LookupIpv4InterfaceResultOutput {
	return o
}

func (o LookupIpv4InterfaceResultOutput) ToLookupIpv4InterfaceResultOutputWithContext(ctx context.Context) LookupIpv4InterfaceResultOutput {
	return o
}

func (o LookupIpv4InterfaceResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupIpv4InterfaceResult] {
	return pulumix.Output[LookupIpv4InterfaceResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupIpv4InterfaceResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// ip drop-glean enabled/disabled.
func (o LookupIpv4InterfaceResultOutput) DropGlean() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceResult) string { return v.DropGlean }).(pulumi.StringOutput)
}

// ip forward enabled/disabled.
func (o LookupIpv4InterfaceResultOutput) Forward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceResult) string { return v.Forward }).(pulumi.StringOutput)
}

// The distinguished name of the object.
func (o LookupIpv4InterfaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
func (o LookupIpv4InterfaceResultOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceResult) string { return v.InterfaceId }).(pulumi.StringOutput)
}

// IP unnumbered. Reference to interface must match first field in the output of `show intf brief`. Example: `eth1/1`.
func (o LookupIpv4InterfaceResultOutput) Unnumbered() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceResult) string { return v.Unnumbered }).(pulumi.StringOutput)
}

// URPF (unicast Reverse Path Forwarding).
func (o LookupIpv4InterfaceResultOutput) Urpf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceResult) string { return v.Urpf }).(pulumi.StringOutput)
}

// VRF name.
func (o LookupIpv4InterfaceResultOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceResult) string { return v.Vrf }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpv4InterfaceResultOutput{})
}
