// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the global IS-IS configuration.
//
// - API Documentation: [isisEntity](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:Entity/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewIsis(ctx, "example", &nxos.IsisArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/isis:Isis example "sys/isis"
//
// ```
type Isis struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewIsis registers a new resource with the given unique name, arguments, and options.
func NewIsis(ctx *pulumi.Context,
	name string, args *IsisArgs, opts ...pulumi.ResourceOption) (*Isis, error) {
	if args == nil {
		args = &IsisArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Isis
	err := ctx.RegisterResource("nxos:index/isis:Isis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIsis gets an existing Isis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIsis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IsisState, opts ...pulumi.ResourceOption) (*Isis, error) {
	var resource Isis
	err := ctx.ReadResource("nxos:index/isis:Isis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Isis resources.
type isisState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type IsisState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (IsisState) ElementType() reflect.Type {
	return reflect.TypeOf((*isisState)(nil)).Elem()
}

type isisArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a Isis resource.
type IsisArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (IsisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*isisArgs)(nil)).Elem()
}

type IsisInput interface {
	pulumi.Input

	ToIsisOutput() IsisOutput
	ToIsisOutputWithContext(ctx context.Context) IsisOutput
}

func (*Isis) ElementType() reflect.Type {
	return reflect.TypeOf((**Isis)(nil)).Elem()
}

func (i *Isis) ToIsisOutput() IsisOutput {
	return i.ToIsisOutputWithContext(context.Background())
}

func (i *Isis) ToIsisOutputWithContext(ctx context.Context) IsisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsisOutput)
}

func (i *Isis) ToOutput(ctx context.Context) pulumix.Output[*Isis] {
	return pulumix.Output[*Isis]{
		OutputState: i.ToIsisOutputWithContext(ctx).OutputState,
	}
}

// IsisArrayInput is an input type that accepts IsisArray and IsisArrayOutput values.
// You can construct a concrete instance of `IsisArrayInput` via:
//
//	IsisArray{ IsisArgs{...} }
type IsisArrayInput interface {
	pulumi.Input

	ToIsisArrayOutput() IsisArrayOutput
	ToIsisArrayOutputWithContext(context.Context) IsisArrayOutput
}

type IsisArray []IsisInput

func (IsisArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Isis)(nil)).Elem()
}

func (i IsisArray) ToIsisArrayOutput() IsisArrayOutput {
	return i.ToIsisArrayOutputWithContext(context.Background())
}

func (i IsisArray) ToIsisArrayOutputWithContext(ctx context.Context) IsisArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsisArrayOutput)
}

func (i IsisArray) ToOutput(ctx context.Context) pulumix.Output[[]*Isis] {
	return pulumix.Output[[]*Isis]{
		OutputState: i.ToIsisArrayOutputWithContext(ctx).OutputState,
	}
}

// IsisMapInput is an input type that accepts IsisMap and IsisMapOutput values.
// You can construct a concrete instance of `IsisMapInput` via:
//
//	IsisMap{ "key": IsisArgs{...} }
type IsisMapInput interface {
	pulumi.Input

	ToIsisMapOutput() IsisMapOutput
	ToIsisMapOutputWithContext(context.Context) IsisMapOutput
}

type IsisMap map[string]IsisInput

func (IsisMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Isis)(nil)).Elem()
}

func (i IsisMap) ToIsisMapOutput() IsisMapOutput {
	return i.ToIsisMapOutputWithContext(context.Background())
}

func (i IsisMap) ToIsisMapOutputWithContext(ctx context.Context) IsisMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsisMapOutput)
}

func (i IsisMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Isis] {
	return pulumix.Output[map[string]*Isis]{
		OutputState: i.ToIsisMapOutputWithContext(ctx).OutputState,
	}
}

type IsisOutput struct{ *pulumi.OutputState }

func (IsisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Isis)(nil)).Elem()
}

func (o IsisOutput) ToIsisOutput() IsisOutput {
	return o
}

func (o IsisOutput) ToIsisOutputWithContext(ctx context.Context) IsisOutput {
	return o
}

func (o IsisOutput) ToOutput(ctx context.Context) pulumix.Output[*Isis] {
	return pulumix.Output[*Isis]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o IsisOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o IsisOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Isis) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type IsisArrayOutput struct{ *pulumi.OutputState }

func (IsisArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Isis)(nil)).Elem()
}

func (o IsisArrayOutput) ToIsisArrayOutput() IsisArrayOutput {
	return o
}

func (o IsisArrayOutput) ToIsisArrayOutputWithContext(ctx context.Context) IsisArrayOutput {
	return o
}

func (o IsisArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Isis] {
	return pulumix.Output[[]*Isis]{
		OutputState: o.OutputState,
	}
}

func (o IsisArrayOutput) Index(i pulumi.IntInput) IsisOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Isis {
		return vs[0].([]*Isis)[vs[1].(int)]
	}).(IsisOutput)
}

type IsisMapOutput struct{ *pulumi.OutputState }

func (IsisMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Isis)(nil)).Elem()
}

func (o IsisMapOutput) ToIsisMapOutput() IsisMapOutput {
	return o
}

func (o IsisMapOutput) ToIsisMapOutputWithContext(ctx context.Context) IsisMapOutput {
	return o
}

func (o IsisMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Isis] {
	return pulumix.Output[map[string]*Isis]{
		OutputState: o.OutputState,
	}
}

func (o IsisMapOutput) MapIndex(k pulumi.StringInput) IsisOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Isis {
		return vs[0].(map[string]*Isis)[vs[1].(string)]
	}).(IsisOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IsisInput)(nil)).Elem(), &Isis{})
	pulumi.RegisterInputType(reflect.TypeOf((*IsisArrayInput)(nil)).Elem(), IsisArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IsisMapInput)(nil)).Elem(), IsisMap{})
	pulumi.RegisterOutputType(IsisOutput{})
	pulumi.RegisterOutputType(IsisArrayOutput{})
	pulumi.RegisterOutputType(IsisMapOutput{})
}
