// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the BGP feature configuration.
//
// - API Documentation: [fmBgp](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Feature%20Management/fm:Bgp/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewFeatureBgp(ctx, "example", &nxos.FeatureBgpArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/featureBgp:FeatureBgp example "sys/fm/bgp"
//
// ```
type FeatureBgp struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureBgp registers a new resource with the given unique name, arguments, and options.
func NewFeatureBgp(ctx *pulumi.Context,
	name string, args *FeatureBgpArgs, opts ...pulumi.ResourceOption) (*FeatureBgp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureBgp
	err := ctx.RegisterResource("nxos:index/featureBgp:FeatureBgp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureBgp gets an existing FeatureBgp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureBgp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureBgpState, opts ...pulumi.ResourceOption) (*FeatureBgp, error) {
	var resource FeatureBgp
	err := ctx.ReadResource("nxos:index/featureBgp:FeatureBgp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureBgp resources.
type featureBgpState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureBgpState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureBgpState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureBgpState)(nil)).Elem()
}

type featureBgpArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureBgp resource.
type FeatureBgpArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureBgpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureBgpArgs)(nil)).Elem()
}

type FeatureBgpInput interface {
	pulumi.Input

	ToFeatureBgpOutput() FeatureBgpOutput
	ToFeatureBgpOutputWithContext(ctx context.Context) FeatureBgpOutput
}

func (*FeatureBgp) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureBgp)(nil)).Elem()
}

func (i *FeatureBgp) ToFeatureBgpOutput() FeatureBgpOutput {
	return i.ToFeatureBgpOutputWithContext(context.Background())
}

func (i *FeatureBgp) ToFeatureBgpOutputWithContext(ctx context.Context) FeatureBgpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureBgpOutput)
}

func (i *FeatureBgp) ToOutput(ctx context.Context) pulumix.Output[*FeatureBgp] {
	return pulumix.Output[*FeatureBgp]{
		OutputState: i.ToFeatureBgpOutputWithContext(ctx).OutputState,
	}
}

// FeatureBgpArrayInput is an input type that accepts FeatureBgpArray and FeatureBgpArrayOutput values.
// You can construct a concrete instance of `FeatureBgpArrayInput` via:
//
//	FeatureBgpArray{ FeatureBgpArgs{...} }
type FeatureBgpArrayInput interface {
	pulumi.Input

	ToFeatureBgpArrayOutput() FeatureBgpArrayOutput
	ToFeatureBgpArrayOutputWithContext(context.Context) FeatureBgpArrayOutput
}

type FeatureBgpArray []FeatureBgpInput

func (FeatureBgpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureBgp)(nil)).Elem()
}

func (i FeatureBgpArray) ToFeatureBgpArrayOutput() FeatureBgpArrayOutput {
	return i.ToFeatureBgpArrayOutputWithContext(context.Background())
}

func (i FeatureBgpArray) ToFeatureBgpArrayOutputWithContext(ctx context.Context) FeatureBgpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureBgpArrayOutput)
}

func (i FeatureBgpArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureBgp] {
	return pulumix.Output[[]*FeatureBgp]{
		OutputState: i.ToFeatureBgpArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureBgpMapInput is an input type that accepts FeatureBgpMap and FeatureBgpMapOutput values.
// You can construct a concrete instance of `FeatureBgpMapInput` via:
//
//	FeatureBgpMap{ "key": FeatureBgpArgs{...} }
type FeatureBgpMapInput interface {
	pulumi.Input

	ToFeatureBgpMapOutput() FeatureBgpMapOutput
	ToFeatureBgpMapOutputWithContext(context.Context) FeatureBgpMapOutput
}

type FeatureBgpMap map[string]FeatureBgpInput

func (FeatureBgpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureBgp)(nil)).Elem()
}

func (i FeatureBgpMap) ToFeatureBgpMapOutput() FeatureBgpMapOutput {
	return i.ToFeatureBgpMapOutputWithContext(context.Background())
}

func (i FeatureBgpMap) ToFeatureBgpMapOutputWithContext(ctx context.Context) FeatureBgpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureBgpMapOutput)
}

func (i FeatureBgpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureBgp] {
	return pulumix.Output[map[string]*FeatureBgp]{
		OutputState: i.ToFeatureBgpMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureBgpOutput struct{ *pulumi.OutputState }

func (FeatureBgpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureBgp)(nil)).Elem()
}

func (o FeatureBgpOutput) ToFeatureBgpOutput() FeatureBgpOutput {
	return o
}

func (o FeatureBgpOutput) ToFeatureBgpOutputWithContext(ctx context.Context) FeatureBgpOutput {
	return o
}

func (o FeatureBgpOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureBgp] {
	return pulumix.Output[*FeatureBgp]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureBgpOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureBgp) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureBgpOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureBgp) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureBgpArrayOutput struct{ *pulumi.OutputState }

func (FeatureBgpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureBgp)(nil)).Elem()
}

func (o FeatureBgpArrayOutput) ToFeatureBgpArrayOutput() FeatureBgpArrayOutput {
	return o
}

func (o FeatureBgpArrayOutput) ToFeatureBgpArrayOutputWithContext(ctx context.Context) FeatureBgpArrayOutput {
	return o
}

func (o FeatureBgpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureBgp] {
	return pulumix.Output[[]*FeatureBgp]{
		OutputState: o.OutputState,
	}
}

func (o FeatureBgpArrayOutput) Index(i pulumi.IntInput) FeatureBgpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureBgp {
		return vs[0].([]*FeatureBgp)[vs[1].(int)]
	}).(FeatureBgpOutput)
}

type FeatureBgpMapOutput struct{ *pulumi.OutputState }

func (FeatureBgpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureBgp)(nil)).Elem()
}

func (o FeatureBgpMapOutput) ToFeatureBgpMapOutput() FeatureBgpMapOutput {
	return o
}

func (o FeatureBgpMapOutput) ToFeatureBgpMapOutputWithContext(ctx context.Context) FeatureBgpMapOutput {
	return o
}

func (o FeatureBgpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureBgp] {
	return pulumix.Output[map[string]*FeatureBgp]{
		OutputState: o.OutputState,
	}
}

func (o FeatureBgpMapOutput) MapIndex(k pulumi.StringInput) FeatureBgpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureBgp {
		return vs[0].(map[string]*FeatureBgp)[vs[1].(string)]
	}).(FeatureBgpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureBgpInput)(nil)).Elem(), &FeatureBgp{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureBgpArrayInput)(nil)).Elem(), FeatureBgpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureBgpMapInput)(nil)).Elem(), FeatureBgpMap{})
	pulumi.RegisterOutputType(FeatureBgpOutput{})
	pulumi.RegisterOutputType(FeatureBgpArrayOutput{})
	pulumi.RegisterOutputType(FeatureBgpMapOutput{})
}
