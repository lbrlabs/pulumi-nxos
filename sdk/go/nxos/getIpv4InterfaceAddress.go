// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read an IPv4 interface address.
//
// - API Documentation: [ipv4Addr](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:Addr/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupIpv4InterfaceAddress(ctx, &nxos.LookupIpv4InterfaceAddressArgs{
//				Address:     "24.63.46.49/30",
//				InterfaceId: "eth1/10",
//				Vrf:         "default",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIpv4InterfaceAddress(ctx *pulumi.Context, args *LookupIpv4InterfaceAddressArgs, opts ...pulumi.InvokeOption) (*LookupIpv4InterfaceAddressResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIpv4InterfaceAddressResult
	err := ctx.Invoke("nxos:index/getIpv4InterfaceAddress:getIpv4InterfaceAddress", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpv4InterfaceAddress.
type LookupIpv4InterfaceAddressArgs struct {
	// IPv4 address.
	Address string `pulumi:"address"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
	// VRF name.
	Vrf string `pulumi:"vrf"`
}

// A collection of values returned by getIpv4InterfaceAddress.
type LookupIpv4InterfaceAddressResult struct {
	// IPv4 address.
	Address string `pulumi:"address"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
	// Address type.
	Type string `pulumi:"type"`
	// VRF name.
	Vrf string `pulumi:"vrf"`
}

func LookupIpv4InterfaceAddressOutput(ctx *pulumi.Context, args LookupIpv4InterfaceAddressOutputArgs, opts ...pulumi.InvokeOption) LookupIpv4InterfaceAddressResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIpv4InterfaceAddressResult, error) {
			args := v.(LookupIpv4InterfaceAddressArgs)
			r, err := LookupIpv4InterfaceAddress(ctx, &args, opts...)
			var s LookupIpv4InterfaceAddressResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIpv4InterfaceAddressResultOutput)
}

// A collection of arguments for invoking getIpv4InterfaceAddress.
type LookupIpv4InterfaceAddressOutputArgs struct {
	// IPv4 address.
	Address pulumi.StringInput `pulumi:"address"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringInput `pulumi:"interfaceId"`
	// VRF name.
	Vrf pulumi.StringInput `pulumi:"vrf"`
}

func (LookupIpv4InterfaceAddressOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpv4InterfaceAddressArgs)(nil)).Elem()
}

// A collection of values returned by getIpv4InterfaceAddress.
type LookupIpv4InterfaceAddressResultOutput struct{ *pulumi.OutputState }

func (LookupIpv4InterfaceAddressResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpv4InterfaceAddressResult)(nil)).Elem()
}

func (o LookupIpv4InterfaceAddressResultOutput) ToLookupIpv4InterfaceAddressResultOutput() LookupIpv4InterfaceAddressResultOutput {
	return o
}

func (o LookupIpv4InterfaceAddressResultOutput) ToLookupIpv4InterfaceAddressResultOutputWithContext(ctx context.Context) LookupIpv4InterfaceAddressResultOutput {
	return o
}

func (o LookupIpv4InterfaceAddressResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupIpv4InterfaceAddressResult] {
	return pulumix.Output[LookupIpv4InterfaceAddressResult]{
		OutputState: o.OutputState,
	}
}

// IPv4 address.
func (o LookupIpv4InterfaceAddressResultOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceAddressResult) string { return v.Address }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupIpv4InterfaceAddressResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceAddressResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The distinguished name of the object.
func (o LookupIpv4InterfaceAddressResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceAddressResult) string { return v.Id }).(pulumi.StringOutput)
}

// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
func (o LookupIpv4InterfaceAddressResultOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceAddressResult) string { return v.InterfaceId }).(pulumi.StringOutput)
}

// Address type.
func (o LookupIpv4InterfaceAddressResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceAddressResult) string { return v.Type }).(pulumi.StringOutput)
}

// VRF name.
func (o LookupIpv4InterfaceAddressResultOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4InterfaceAddressResult) string { return v.Vrf }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpv4InterfaceAddressResultOutput{})
}
