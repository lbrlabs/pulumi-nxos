// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the LLDP feature configuration.
//
// - API Documentation: [fmLldp](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Feature%20Management/fm:Lldp/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupFeatureLldp(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFeatureLldp(ctx *pulumi.Context, args *LookupFeatureLldpArgs, opts ...pulumi.InvokeOption) (*LookupFeatureLldpResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFeatureLldpResult
	err := ctx.Invoke("nxos:index/getFeatureLldp:getFeatureLldp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFeatureLldp.
type LookupFeatureLldpArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// A collection of values returned by getFeatureLldp.
type LookupFeatureLldpResult struct {
	// Administrative state.
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
}

func LookupFeatureLldpOutput(ctx *pulumi.Context, args LookupFeatureLldpOutputArgs, opts ...pulumi.InvokeOption) LookupFeatureLldpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFeatureLldpResult, error) {
			args := v.(LookupFeatureLldpArgs)
			r, err := LookupFeatureLldp(ctx, &args, opts...)
			var s LookupFeatureLldpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupFeatureLldpResultOutput)
}

// A collection of arguments for invoking getFeatureLldp.
type LookupFeatureLldpOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (LookupFeatureLldpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureLldpArgs)(nil)).Elem()
}

// A collection of values returned by getFeatureLldp.
type LookupFeatureLldpResultOutput struct{ *pulumi.OutputState }

func (LookupFeatureLldpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureLldpResult)(nil)).Elem()
}

func (o LookupFeatureLldpResultOutput) ToLookupFeatureLldpResultOutput() LookupFeatureLldpResultOutput {
	return o
}

func (o LookupFeatureLldpResultOutput) ToLookupFeatureLldpResultOutputWithContext(ctx context.Context) LookupFeatureLldpResultOutput {
	return o
}

func (o LookupFeatureLldpResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupFeatureLldpResult] {
	return pulumix.Output[LookupFeatureLldpResult]{
		OutputState: o.OutputState,
	}
}

// Administrative state.
func (o LookupFeatureLldpResultOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureLldpResult) string { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupFeatureLldpResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFeatureLldpResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The distinguished name of the object.
func (o LookupFeatureLldpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureLldpResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFeatureLldpResultOutput{})
}
