// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage a subinterface VRF association.
//
// - API Documentation: [nwRtVrfMbr](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/nw:RtVrfMbr/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewSubinterfaceVrf(ctx, "example", &nxos.SubinterfaceVrfArgs{
//				InterfaceId: pulumi.String("eth1/10.124"),
//				VrfDn:       pulumi.String("sys/inst-VRF123"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/subinterfaceVrf:SubinterfaceVrf example "sys/intf/encrtd-[eth1/10.124]/rtvrfMbr"
//
// ```
type SubinterfaceVrf struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringOutput `pulumi:"vrfDn"`
}

// NewSubinterfaceVrf registers a new resource with the given unique name, arguments, and options.
func NewSubinterfaceVrf(ctx *pulumi.Context,
	name string, args *SubinterfaceVrfArgs, opts ...pulumi.ResourceOption) (*SubinterfaceVrf, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.VrfDn == nil {
		return nil, errors.New("invalid value for required argument 'VrfDn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubinterfaceVrf
	err := ctx.RegisterResource("nxos:index/subinterfaceVrf:SubinterfaceVrf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubinterfaceVrf gets an existing SubinterfaceVrf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubinterfaceVrf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubinterfaceVrfState, opts ...pulumi.ResourceOption) (*SubinterfaceVrf, error) {
	var resource SubinterfaceVrf
	err := ctx.ReadResource("nxos:index/subinterfaceVrf:SubinterfaceVrf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubinterfaceVrf resources.
type subinterfaceVrfState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
	InterfaceId *string `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn *string `pulumi:"vrfDn"`
}

type SubinterfaceVrfState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
	InterfaceId pulumi.StringPtrInput
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringPtrInput
}

func (SubinterfaceVrfState) ElementType() reflect.Type {
	return reflect.TypeOf((*subinterfaceVrfState)(nil)).Elem()
}

type subinterfaceVrfArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
	InterfaceId string `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn string `pulumi:"vrfDn"`
}

// The set of arguments for constructing a SubinterfaceVrf resource.
type SubinterfaceVrfArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
	InterfaceId pulumi.StringInput
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringInput
}

func (SubinterfaceVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subinterfaceVrfArgs)(nil)).Elem()
}

type SubinterfaceVrfInput interface {
	pulumi.Input

	ToSubinterfaceVrfOutput() SubinterfaceVrfOutput
	ToSubinterfaceVrfOutputWithContext(ctx context.Context) SubinterfaceVrfOutput
}

func (*SubinterfaceVrf) ElementType() reflect.Type {
	return reflect.TypeOf((**SubinterfaceVrf)(nil)).Elem()
}

func (i *SubinterfaceVrf) ToSubinterfaceVrfOutput() SubinterfaceVrfOutput {
	return i.ToSubinterfaceVrfOutputWithContext(context.Background())
}

func (i *SubinterfaceVrf) ToSubinterfaceVrfOutputWithContext(ctx context.Context) SubinterfaceVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubinterfaceVrfOutput)
}

func (i *SubinterfaceVrf) ToOutput(ctx context.Context) pulumix.Output[*SubinterfaceVrf] {
	return pulumix.Output[*SubinterfaceVrf]{
		OutputState: i.ToSubinterfaceVrfOutputWithContext(ctx).OutputState,
	}
}

// SubinterfaceVrfArrayInput is an input type that accepts SubinterfaceVrfArray and SubinterfaceVrfArrayOutput values.
// You can construct a concrete instance of `SubinterfaceVrfArrayInput` via:
//
//	SubinterfaceVrfArray{ SubinterfaceVrfArgs{...} }
type SubinterfaceVrfArrayInput interface {
	pulumi.Input

	ToSubinterfaceVrfArrayOutput() SubinterfaceVrfArrayOutput
	ToSubinterfaceVrfArrayOutputWithContext(context.Context) SubinterfaceVrfArrayOutput
}

type SubinterfaceVrfArray []SubinterfaceVrfInput

func (SubinterfaceVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubinterfaceVrf)(nil)).Elem()
}

func (i SubinterfaceVrfArray) ToSubinterfaceVrfArrayOutput() SubinterfaceVrfArrayOutput {
	return i.ToSubinterfaceVrfArrayOutputWithContext(context.Background())
}

func (i SubinterfaceVrfArray) ToSubinterfaceVrfArrayOutputWithContext(ctx context.Context) SubinterfaceVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubinterfaceVrfArrayOutput)
}

func (i SubinterfaceVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]*SubinterfaceVrf] {
	return pulumix.Output[[]*SubinterfaceVrf]{
		OutputState: i.ToSubinterfaceVrfArrayOutputWithContext(ctx).OutputState,
	}
}

// SubinterfaceVrfMapInput is an input type that accepts SubinterfaceVrfMap and SubinterfaceVrfMapOutput values.
// You can construct a concrete instance of `SubinterfaceVrfMapInput` via:
//
//	SubinterfaceVrfMap{ "key": SubinterfaceVrfArgs{...} }
type SubinterfaceVrfMapInput interface {
	pulumi.Input

	ToSubinterfaceVrfMapOutput() SubinterfaceVrfMapOutput
	ToSubinterfaceVrfMapOutputWithContext(context.Context) SubinterfaceVrfMapOutput
}

type SubinterfaceVrfMap map[string]SubinterfaceVrfInput

func (SubinterfaceVrfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubinterfaceVrf)(nil)).Elem()
}

func (i SubinterfaceVrfMap) ToSubinterfaceVrfMapOutput() SubinterfaceVrfMapOutput {
	return i.ToSubinterfaceVrfMapOutputWithContext(context.Background())
}

func (i SubinterfaceVrfMap) ToSubinterfaceVrfMapOutputWithContext(ctx context.Context) SubinterfaceVrfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubinterfaceVrfMapOutput)
}

func (i SubinterfaceVrfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SubinterfaceVrf] {
	return pulumix.Output[map[string]*SubinterfaceVrf]{
		OutputState: i.ToSubinterfaceVrfMapOutputWithContext(ctx).OutputState,
	}
}

type SubinterfaceVrfOutput struct{ *pulumi.OutputState }

func (SubinterfaceVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubinterfaceVrf)(nil)).Elem()
}

func (o SubinterfaceVrfOutput) ToSubinterfaceVrfOutput() SubinterfaceVrfOutput {
	return o
}

func (o SubinterfaceVrfOutput) ToSubinterfaceVrfOutputWithContext(ctx context.Context) SubinterfaceVrfOutput {
	return o
}

func (o SubinterfaceVrfOutput) ToOutput(ctx context.Context) pulumix.Output[*SubinterfaceVrf] {
	return pulumix.Output[*SubinterfaceVrf]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o SubinterfaceVrfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubinterfaceVrf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
func (o SubinterfaceVrfOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubinterfaceVrf) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// DN of VRF. For example: `sys/inst-VRF1`.
func (o SubinterfaceVrfOutput) VrfDn() pulumi.StringOutput {
	return o.ApplyT(func(v *SubinterfaceVrf) pulumi.StringOutput { return v.VrfDn }).(pulumi.StringOutput)
}

type SubinterfaceVrfArrayOutput struct{ *pulumi.OutputState }

func (SubinterfaceVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubinterfaceVrf)(nil)).Elem()
}

func (o SubinterfaceVrfArrayOutput) ToSubinterfaceVrfArrayOutput() SubinterfaceVrfArrayOutput {
	return o
}

func (o SubinterfaceVrfArrayOutput) ToSubinterfaceVrfArrayOutputWithContext(ctx context.Context) SubinterfaceVrfArrayOutput {
	return o
}

func (o SubinterfaceVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SubinterfaceVrf] {
	return pulumix.Output[[]*SubinterfaceVrf]{
		OutputState: o.OutputState,
	}
}

func (o SubinterfaceVrfArrayOutput) Index(i pulumi.IntInput) SubinterfaceVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubinterfaceVrf {
		return vs[0].([]*SubinterfaceVrf)[vs[1].(int)]
	}).(SubinterfaceVrfOutput)
}

type SubinterfaceVrfMapOutput struct{ *pulumi.OutputState }

func (SubinterfaceVrfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubinterfaceVrf)(nil)).Elem()
}

func (o SubinterfaceVrfMapOutput) ToSubinterfaceVrfMapOutput() SubinterfaceVrfMapOutput {
	return o
}

func (o SubinterfaceVrfMapOutput) ToSubinterfaceVrfMapOutputWithContext(ctx context.Context) SubinterfaceVrfMapOutput {
	return o
}

func (o SubinterfaceVrfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SubinterfaceVrf] {
	return pulumix.Output[map[string]*SubinterfaceVrf]{
		OutputState: o.OutputState,
	}
}

func (o SubinterfaceVrfMapOutput) MapIndex(k pulumi.StringInput) SubinterfaceVrfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubinterfaceVrf {
		return vs[0].(map[string]*SubinterfaceVrf)[vs[1].(string)]
	}).(SubinterfaceVrfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubinterfaceVrfInput)(nil)).Elem(), &SubinterfaceVrf{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubinterfaceVrfArrayInput)(nil)).Elem(), SubinterfaceVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubinterfaceVrfMapInput)(nil)).Elem(), SubinterfaceVrfMap{})
	pulumi.RegisterOutputType(SubinterfaceVrfOutput{})
	pulumi.RegisterOutputType(SubinterfaceVrfArrayOutput{})
	pulumi.RegisterOutputType(SubinterfaceVrfMapOutput{})
}
