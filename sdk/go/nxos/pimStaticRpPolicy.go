// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the PIM Static RP policy configuration.
//
// - API Documentation: [pimStaticRPP](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:StaticRPP/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewPimStaticRpPolicy(ctx, "example", &nxos.PimStaticRpPolicyArgs{
//				VrfName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/pimStaticRpPolicy:PimStaticRpPolicy example "sys/pim/inst/dom-[default]/staticrp"
//
// ```
type PimStaticRpPolicy struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Policy name.
	Name pulumi.StringOutput `pulumi:"name"`
	// VRF name.
	VrfName pulumi.StringOutput `pulumi:"vrfName"`
}

// NewPimStaticRpPolicy registers a new resource with the given unique name, arguments, and options.
func NewPimStaticRpPolicy(ctx *pulumi.Context,
	name string, args *PimStaticRpPolicyArgs, opts ...pulumi.ResourceOption) (*PimStaticRpPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VrfName == nil {
		return nil, errors.New("invalid value for required argument 'VrfName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PimStaticRpPolicy
	err := ctx.RegisterResource("nxos:index/pimStaticRpPolicy:PimStaticRpPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPimStaticRpPolicy gets an existing PimStaticRpPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPimStaticRpPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PimStaticRpPolicyState, opts ...pulumi.ResourceOption) (*PimStaticRpPolicy, error) {
	var resource PimStaticRpPolicy
	err := ctx.ReadResource("nxos:index/pimStaticRpPolicy:PimStaticRpPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PimStaticRpPolicy resources.
type pimStaticRpPolicyState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Policy name.
	Name *string `pulumi:"name"`
	// VRF name.
	VrfName *string `pulumi:"vrfName"`
}

type PimStaticRpPolicyState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// VRF name.
	VrfName pulumi.StringPtrInput
}

func (PimStaticRpPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*pimStaticRpPolicyState)(nil)).Elem()
}

type pimStaticRpPolicyArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Policy name.
	Name *string `pulumi:"name"`
	// VRF name.
	VrfName string `pulumi:"vrfName"`
}

// The set of arguments for constructing a PimStaticRpPolicy resource.
type PimStaticRpPolicyArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Policy name.
	Name pulumi.StringPtrInput
	// VRF name.
	VrfName pulumi.StringInput
}

func (PimStaticRpPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pimStaticRpPolicyArgs)(nil)).Elem()
}

type PimStaticRpPolicyInput interface {
	pulumi.Input

	ToPimStaticRpPolicyOutput() PimStaticRpPolicyOutput
	ToPimStaticRpPolicyOutputWithContext(ctx context.Context) PimStaticRpPolicyOutput
}

func (*PimStaticRpPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**PimStaticRpPolicy)(nil)).Elem()
}

func (i *PimStaticRpPolicy) ToPimStaticRpPolicyOutput() PimStaticRpPolicyOutput {
	return i.ToPimStaticRpPolicyOutputWithContext(context.Background())
}

func (i *PimStaticRpPolicy) ToPimStaticRpPolicyOutputWithContext(ctx context.Context) PimStaticRpPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimStaticRpPolicyOutput)
}

func (i *PimStaticRpPolicy) ToOutput(ctx context.Context) pulumix.Output[*PimStaticRpPolicy] {
	return pulumix.Output[*PimStaticRpPolicy]{
		OutputState: i.ToPimStaticRpPolicyOutputWithContext(ctx).OutputState,
	}
}

// PimStaticRpPolicyArrayInput is an input type that accepts PimStaticRpPolicyArray and PimStaticRpPolicyArrayOutput values.
// You can construct a concrete instance of `PimStaticRpPolicyArrayInput` via:
//
//	PimStaticRpPolicyArray{ PimStaticRpPolicyArgs{...} }
type PimStaticRpPolicyArrayInput interface {
	pulumi.Input

	ToPimStaticRpPolicyArrayOutput() PimStaticRpPolicyArrayOutput
	ToPimStaticRpPolicyArrayOutputWithContext(context.Context) PimStaticRpPolicyArrayOutput
}

type PimStaticRpPolicyArray []PimStaticRpPolicyInput

func (PimStaticRpPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PimStaticRpPolicy)(nil)).Elem()
}

func (i PimStaticRpPolicyArray) ToPimStaticRpPolicyArrayOutput() PimStaticRpPolicyArrayOutput {
	return i.ToPimStaticRpPolicyArrayOutputWithContext(context.Background())
}

func (i PimStaticRpPolicyArray) ToPimStaticRpPolicyArrayOutputWithContext(ctx context.Context) PimStaticRpPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimStaticRpPolicyArrayOutput)
}

func (i PimStaticRpPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*PimStaticRpPolicy] {
	return pulumix.Output[[]*PimStaticRpPolicy]{
		OutputState: i.ToPimStaticRpPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// PimStaticRpPolicyMapInput is an input type that accepts PimStaticRpPolicyMap and PimStaticRpPolicyMapOutput values.
// You can construct a concrete instance of `PimStaticRpPolicyMapInput` via:
//
//	PimStaticRpPolicyMap{ "key": PimStaticRpPolicyArgs{...} }
type PimStaticRpPolicyMapInput interface {
	pulumi.Input

	ToPimStaticRpPolicyMapOutput() PimStaticRpPolicyMapOutput
	ToPimStaticRpPolicyMapOutputWithContext(context.Context) PimStaticRpPolicyMapOutput
}

type PimStaticRpPolicyMap map[string]PimStaticRpPolicyInput

func (PimStaticRpPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PimStaticRpPolicy)(nil)).Elem()
}

func (i PimStaticRpPolicyMap) ToPimStaticRpPolicyMapOutput() PimStaticRpPolicyMapOutput {
	return i.ToPimStaticRpPolicyMapOutputWithContext(context.Background())
}

func (i PimStaticRpPolicyMap) ToPimStaticRpPolicyMapOutputWithContext(ctx context.Context) PimStaticRpPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimStaticRpPolicyMapOutput)
}

func (i PimStaticRpPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PimStaticRpPolicy] {
	return pulumix.Output[map[string]*PimStaticRpPolicy]{
		OutputState: i.ToPimStaticRpPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type PimStaticRpPolicyOutput struct{ *pulumi.OutputState }

func (PimStaticRpPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PimStaticRpPolicy)(nil)).Elem()
}

func (o PimStaticRpPolicyOutput) ToPimStaticRpPolicyOutput() PimStaticRpPolicyOutput {
	return o
}

func (o PimStaticRpPolicyOutput) ToPimStaticRpPolicyOutputWithContext(ctx context.Context) PimStaticRpPolicyOutput {
	return o
}

func (o PimStaticRpPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*PimStaticRpPolicy] {
	return pulumix.Output[*PimStaticRpPolicy]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o PimStaticRpPolicyOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PimStaticRpPolicy) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Policy name.
func (o PimStaticRpPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PimStaticRpPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// VRF name.
func (o PimStaticRpPolicyOutput) VrfName() pulumi.StringOutput {
	return o.ApplyT(func(v *PimStaticRpPolicy) pulumi.StringOutput { return v.VrfName }).(pulumi.StringOutput)
}

type PimStaticRpPolicyArrayOutput struct{ *pulumi.OutputState }

func (PimStaticRpPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PimStaticRpPolicy)(nil)).Elem()
}

func (o PimStaticRpPolicyArrayOutput) ToPimStaticRpPolicyArrayOutput() PimStaticRpPolicyArrayOutput {
	return o
}

func (o PimStaticRpPolicyArrayOutput) ToPimStaticRpPolicyArrayOutputWithContext(ctx context.Context) PimStaticRpPolicyArrayOutput {
	return o
}

func (o PimStaticRpPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PimStaticRpPolicy] {
	return pulumix.Output[[]*PimStaticRpPolicy]{
		OutputState: o.OutputState,
	}
}

func (o PimStaticRpPolicyArrayOutput) Index(i pulumi.IntInput) PimStaticRpPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PimStaticRpPolicy {
		return vs[0].([]*PimStaticRpPolicy)[vs[1].(int)]
	}).(PimStaticRpPolicyOutput)
}

type PimStaticRpPolicyMapOutput struct{ *pulumi.OutputState }

func (PimStaticRpPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PimStaticRpPolicy)(nil)).Elem()
}

func (o PimStaticRpPolicyMapOutput) ToPimStaticRpPolicyMapOutput() PimStaticRpPolicyMapOutput {
	return o
}

func (o PimStaticRpPolicyMapOutput) ToPimStaticRpPolicyMapOutputWithContext(ctx context.Context) PimStaticRpPolicyMapOutput {
	return o
}

func (o PimStaticRpPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PimStaticRpPolicy] {
	return pulumix.Output[map[string]*PimStaticRpPolicy]{
		OutputState: o.OutputState,
	}
}

func (o PimStaticRpPolicyMapOutput) MapIndex(k pulumi.StringInput) PimStaticRpPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PimStaticRpPolicy {
		return vs[0].(map[string]*PimStaticRpPolicy)[vs[1].(string)]
	}).(PimStaticRpPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PimStaticRpPolicyInput)(nil)).Elem(), &PimStaticRpPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimStaticRpPolicyArrayInput)(nil)).Elem(), PimStaticRpPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimStaticRpPolicyMapInput)(nil)).Elem(), PimStaticRpPolicyMap{})
	pulumi.RegisterOutputType(PimStaticRpPolicyOutput{})
	pulumi.RegisterOutputType(PimStaticRpPolicyArrayOutput{})
	pulumi.RegisterOutputType(PimStaticRpPolicyMapOutput{})
}
