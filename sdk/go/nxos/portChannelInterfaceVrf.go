// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage a port-channel interface VRF association.
//
// - API Documentation: [nwRtVrfMbr](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/nw:RtVrfMbr/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewPortChannelInterfaceVrf(ctx, "example", &nxos.PortChannelInterfaceVrfArgs{
//				InterfaceId: pulumi.String("po1"),
//				VrfDn:       pulumi.String("sys/inst-default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/portChannelInterfaceVrf:PortChannelInterfaceVrf example "sys/intf/aggr-[po1]/rtvrfMbr"
//
// ```
type PortChannelInterfaceVrf struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `po1`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringOutput `pulumi:"vrfDn"`
}

// NewPortChannelInterfaceVrf registers a new resource with the given unique name, arguments, and options.
func NewPortChannelInterfaceVrf(ctx *pulumi.Context,
	name string, args *PortChannelInterfaceVrfArgs, opts ...pulumi.ResourceOption) (*PortChannelInterfaceVrf, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.VrfDn == nil {
		return nil, errors.New("invalid value for required argument 'VrfDn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PortChannelInterfaceVrf
	err := ctx.RegisterResource("nxos:index/portChannelInterfaceVrf:PortChannelInterfaceVrf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortChannelInterfaceVrf gets an existing PortChannelInterfaceVrf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortChannelInterfaceVrf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortChannelInterfaceVrfState, opts ...pulumi.ResourceOption) (*PortChannelInterfaceVrf, error) {
	var resource PortChannelInterfaceVrf
	err := ctx.ReadResource("nxos:index/portChannelInterfaceVrf:PortChannelInterfaceVrf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PortChannelInterfaceVrf resources.
type portChannelInterfaceVrfState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `po1`.
	InterfaceId *string `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn *string `pulumi:"vrfDn"`
}

type PortChannelInterfaceVrfState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `po1`.
	InterfaceId pulumi.StringPtrInput
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringPtrInput
}

func (PortChannelInterfaceVrfState) ElementType() reflect.Type {
	return reflect.TypeOf((*portChannelInterfaceVrfState)(nil)).Elem()
}

type portChannelInterfaceVrfArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `po1`.
	InterfaceId string `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn string `pulumi:"vrfDn"`
}

// The set of arguments for constructing a PortChannelInterfaceVrf resource.
type PortChannelInterfaceVrfArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `po1`.
	InterfaceId pulumi.StringInput
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringInput
}

func (PortChannelInterfaceVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portChannelInterfaceVrfArgs)(nil)).Elem()
}

type PortChannelInterfaceVrfInput interface {
	pulumi.Input

	ToPortChannelInterfaceVrfOutput() PortChannelInterfaceVrfOutput
	ToPortChannelInterfaceVrfOutputWithContext(ctx context.Context) PortChannelInterfaceVrfOutput
}

func (*PortChannelInterfaceVrf) ElementType() reflect.Type {
	return reflect.TypeOf((**PortChannelInterfaceVrf)(nil)).Elem()
}

func (i *PortChannelInterfaceVrf) ToPortChannelInterfaceVrfOutput() PortChannelInterfaceVrfOutput {
	return i.ToPortChannelInterfaceVrfOutputWithContext(context.Background())
}

func (i *PortChannelInterfaceVrf) ToPortChannelInterfaceVrfOutputWithContext(ctx context.Context) PortChannelInterfaceVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortChannelInterfaceVrfOutput)
}

func (i *PortChannelInterfaceVrf) ToOutput(ctx context.Context) pulumix.Output[*PortChannelInterfaceVrf] {
	return pulumix.Output[*PortChannelInterfaceVrf]{
		OutputState: i.ToPortChannelInterfaceVrfOutputWithContext(ctx).OutputState,
	}
}

// PortChannelInterfaceVrfArrayInput is an input type that accepts PortChannelInterfaceVrfArray and PortChannelInterfaceVrfArrayOutput values.
// You can construct a concrete instance of `PortChannelInterfaceVrfArrayInput` via:
//
//	PortChannelInterfaceVrfArray{ PortChannelInterfaceVrfArgs{...} }
type PortChannelInterfaceVrfArrayInput interface {
	pulumi.Input

	ToPortChannelInterfaceVrfArrayOutput() PortChannelInterfaceVrfArrayOutput
	ToPortChannelInterfaceVrfArrayOutputWithContext(context.Context) PortChannelInterfaceVrfArrayOutput
}

type PortChannelInterfaceVrfArray []PortChannelInterfaceVrfInput

func (PortChannelInterfaceVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortChannelInterfaceVrf)(nil)).Elem()
}

func (i PortChannelInterfaceVrfArray) ToPortChannelInterfaceVrfArrayOutput() PortChannelInterfaceVrfArrayOutput {
	return i.ToPortChannelInterfaceVrfArrayOutputWithContext(context.Background())
}

func (i PortChannelInterfaceVrfArray) ToPortChannelInterfaceVrfArrayOutputWithContext(ctx context.Context) PortChannelInterfaceVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortChannelInterfaceVrfArrayOutput)
}

func (i PortChannelInterfaceVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]*PortChannelInterfaceVrf] {
	return pulumix.Output[[]*PortChannelInterfaceVrf]{
		OutputState: i.ToPortChannelInterfaceVrfArrayOutputWithContext(ctx).OutputState,
	}
}

// PortChannelInterfaceVrfMapInput is an input type that accepts PortChannelInterfaceVrfMap and PortChannelInterfaceVrfMapOutput values.
// You can construct a concrete instance of `PortChannelInterfaceVrfMapInput` via:
//
//	PortChannelInterfaceVrfMap{ "key": PortChannelInterfaceVrfArgs{...} }
type PortChannelInterfaceVrfMapInput interface {
	pulumi.Input

	ToPortChannelInterfaceVrfMapOutput() PortChannelInterfaceVrfMapOutput
	ToPortChannelInterfaceVrfMapOutputWithContext(context.Context) PortChannelInterfaceVrfMapOutput
}

type PortChannelInterfaceVrfMap map[string]PortChannelInterfaceVrfInput

func (PortChannelInterfaceVrfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortChannelInterfaceVrf)(nil)).Elem()
}

func (i PortChannelInterfaceVrfMap) ToPortChannelInterfaceVrfMapOutput() PortChannelInterfaceVrfMapOutput {
	return i.ToPortChannelInterfaceVrfMapOutputWithContext(context.Background())
}

func (i PortChannelInterfaceVrfMap) ToPortChannelInterfaceVrfMapOutputWithContext(ctx context.Context) PortChannelInterfaceVrfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortChannelInterfaceVrfMapOutput)
}

func (i PortChannelInterfaceVrfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PortChannelInterfaceVrf] {
	return pulumix.Output[map[string]*PortChannelInterfaceVrf]{
		OutputState: i.ToPortChannelInterfaceVrfMapOutputWithContext(ctx).OutputState,
	}
}

type PortChannelInterfaceVrfOutput struct{ *pulumi.OutputState }

func (PortChannelInterfaceVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortChannelInterfaceVrf)(nil)).Elem()
}

func (o PortChannelInterfaceVrfOutput) ToPortChannelInterfaceVrfOutput() PortChannelInterfaceVrfOutput {
	return o
}

func (o PortChannelInterfaceVrfOutput) ToPortChannelInterfaceVrfOutputWithContext(ctx context.Context) PortChannelInterfaceVrfOutput {
	return o
}

func (o PortChannelInterfaceVrfOutput) ToOutput(ctx context.Context) pulumix.Output[*PortChannelInterfaceVrf] {
	return pulumix.Output[*PortChannelInterfaceVrf]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o PortChannelInterfaceVrfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortChannelInterfaceVrf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Must match first field in the output of `show intf brief`. Example: `po1`.
func (o PortChannelInterfaceVrfOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PortChannelInterfaceVrf) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// DN of VRF. For example: `sys/inst-VRF1`.
func (o PortChannelInterfaceVrfOutput) VrfDn() pulumi.StringOutput {
	return o.ApplyT(func(v *PortChannelInterfaceVrf) pulumi.StringOutput { return v.VrfDn }).(pulumi.StringOutput)
}

type PortChannelInterfaceVrfArrayOutput struct{ *pulumi.OutputState }

func (PortChannelInterfaceVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortChannelInterfaceVrf)(nil)).Elem()
}

func (o PortChannelInterfaceVrfArrayOutput) ToPortChannelInterfaceVrfArrayOutput() PortChannelInterfaceVrfArrayOutput {
	return o
}

func (o PortChannelInterfaceVrfArrayOutput) ToPortChannelInterfaceVrfArrayOutputWithContext(ctx context.Context) PortChannelInterfaceVrfArrayOutput {
	return o
}

func (o PortChannelInterfaceVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PortChannelInterfaceVrf] {
	return pulumix.Output[[]*PortChannelInterfaceVrf]{
		OutputState: o.OutputState,
	}
}

func (o PortChannelInterfaceVrfArrayOutput) Index(i pulumi.IntInput) PortChannelInterfaceVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PortChannelInterfaceVrf {
		return vs[0].([]*PortChannelInterfaceVrf)[vs[1].(int)]
	}).(PortChannelInterfaceVrfOutput)
}

type PortChannelInterfaceVrfMapOutput struct{ *pulumi.OutputState }

func (PortChannelInterfaceVrfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortChannelInterfaceVrf)(nil)).Elem()
}

func (o PortChannelInterfaceVrfMapOutput) ToPortChannelInterfaceVrfMapOutput() PortChannelInterfaceVrfMapOutput {
	return o
}

func (o PortChannelInterfaceVrfMapOutput) ToPortChannelInterfaceVrfMapOutputWithContext(ctx context.Context) PortChannelInterfaceVrfMapOutput {
	return o
}

func (o PortChannelInterfaceVrfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PortChannelInterfaceVrf] {
	return pulumix.Output[map[string]*PortChannelInterfaceVrf]{
		OutputState: o.OutputState,
	}
}

func (o PortChannelInterfaceVrfMapOutput) MapIndex(k pulumi.StringInput) PortChannelInterfaceVrfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PortChannelInterfaceVrf {
		return vs[0].(map[string]*PortChannelInterfaceVrf)[vs[1].(string)]
	}).(PortChannelInterfaceVrfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortChannelInterfaceVrfInput)(nil)).Elem(), &PortChannelInterfaceVrf{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortChannelInterfaceVrfArrayInput)(nil)).Elem(), PortChannelInterfaceVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortChannelInterfaceVrfMapInput)(nil)).Elem(), PortChannelInterfaceVrfMap{})
	pulumi.RegisterOutputType(PortChannelInterfaceVrfOutput{})
	pulumi.RegisterOutputType(PortChannelInterfaceVrfArrayOutput{})
	pulumi.RegisterOutputType(PortChannelInterfaceVrfMapOutput{})
}
