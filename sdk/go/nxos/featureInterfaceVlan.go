// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Interface VLAN feature configuration.
//
// - API Documentation: [fmInterfaceVlan](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Feature%20Management/fm:InterfaceVlan/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewFeatureInterfaceVlan(ctx, "example", &nxos.FeatureInterfaceVlanArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/featureInterfaceVlan:FeatureInterfaceVlan example "sys/fm/ifvlan"
//
// ```
type FeatureInterfaceVlan struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureInterfaceVlan registers a new resource with the given unique name, arguments, and options.
func NewFeatureInterfaceVlan(ctx *pulumi.Context,
	name string, args *FeatureInterfaceVlanArgs, opts ...pulumi.ResourceOption) (*FeatureInterfaceVlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureInterfaceVlan
	err := ctx.RegisterResource("nxos:index/featureInterfaceVlan:FeatureInterfaceVlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureInterfaceVlan gets an existing FeatureInterfaceVlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureInterfaceVlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureInterfaceVlanState, opts ...pulumi.ResourceOption) (*FeatureInterfaceVlan, error) {
	var resource FeatureInterfaceVlan
	err := ctx.ReadResource("nxos:index/featureInterfaceVlan:FeatureInterfaceVlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureInterfaceVlan resources.
type featureInterfaceVlanState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureInterfaceVlanState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureInterfaceVlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureInterfaceVlanState)(nil)).Elem()
}

type featureInterfaceVlanArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureInterfaceVlan resource.
type FeatureInterfaceVlanArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureInterfaceVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureInterfaceVlanArgs)(nil)).Elem()
}

type FeatureInterfaceVlanInput interface {
	pulumi.Input

	ToFeatureInterfaceVlanOutput() FeatureInterfaceVlanOutput
	ToFeatureInterfaceVlanOutputWithContext(ctx context.Context) FeatureInterfaceVlanOutput
}

func (*FeatureInterfaceVlan) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureInterfaceVlan)(nil)).Elem()
}

func (i *FeatureInterfaceVlan) ToFeatureInterfaceVlanOutput() FeatureInterfaceVlanOutput {
	return i.ToFeatureInterfaceVlanOutputWithContext(context.Background())
}

func (i *FeatureInterfaceVlan) ToFeatureInterfaceVlanOutputWithContext(ctx context.Context) FeatureInterfaceVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureInterfaceVlanOutput)
}

func (i *FeatureInterfaceVlan) ToOutput(ctx context.Context) pulumix.Output[*FeatureInterfaceVlan] {
	return pulumix.Output[*FeatureInterfaceVlan]{
		OutputState: i.ToFeatureInterfaceVlanOutputWithContext(ctx).OutputState,
	}
}

// FeatureInterfaceVlanArrayInput is an input type that accepts FeatureInterfaceVlanArray and FeatureInterfaceVlanArrayOutput values.
// You can construct a concrete instance of `FeatureInterfaceVlanArrayInput` via:
//
//	FeatureInterfaceVlanArray{ FeatureInterfaceVlanArgs{...} }
type FeatureInterfaceVlanArrayInput interface {
	pulumi.Input

	ToFeatureInterfaceVlanArrayOutput() FeatureInterfaceVlanArrayOutput
	ToFeatureInterfaceVlanArrayOutputWithContext(context.Context) FeatureInterfaceVlanArrayOutput
}

type FeatureInterfaceVlanArray []FeatureInterfaceVlanInput

func (FeatureInterfaceVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureInterfaceVlan)(nil)).Elem()
}

func (i FeatureInterfaceVlanArray) ToFeatureInterfaceVlanArrayOutput() FeatureInterfaceVlanArrayOutput {
	return i.ToFeatureInterfaceVlanArrayOutputWithContext(context.Background())
}

func (i FeatureInterfaceVlanArray) ToFeatureInterfaceVlanArrayOutputWithContext(ctx context.Context) FeatureInterfaceVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureInterfaceVlanArrayOutput)
}

func (i FeatureInterfaceVlanArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureInterfaceVlan] {
	return pulumix.Output[[]*FeatureInterfaceVlan]{
		OutputState: i.ToFeatureInterfaceVlanArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureInterfaceVlanMapInput is an input type that accepts FeatureInterfaceVlanMap and FeatureInterfaceVlanMapOutput values.
// You can construct a concrete instance of `FeatureInterfaceVlanMapInput` via:
//
//	FeatureInterfaceVlanMap{ "key": FeatureInterfaceVlanArgs{...} }
type FeatureInterfaceVlanMapInput interface {
	pulumi.Input

	ToFeatureInterfaceVlanMapOutput() FeatureInterfaceVlanMapOutput
	ToFeatureInterfaceVlanMapOutputWithContext(context.Context) FeatureInterfaceVlanMapOutput
}

type FeatureInterfaceVlanMap map[string]FeatureInterfaceVlanInput

func (FeatureInterfaceVlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureInterfaceVlan)(nil)).Elem()
}

func (i FeatureInterfaceVlanMap) ToFeatureInterfaceVlanMapOutput() FeatureInterfaceVlanMapOutput {
	return i.ToFeatureInterfaceVlanMapOutputWithContext(context.Background())
}

func (i FeatureInterfaceVlanMap) ToFeatureInterfaceVlanMapOutputWithContext(ctx context.Context) FeatureInterfaceVlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureInterfaceVlanMapOutput)
}

func (i FeatureInterfaceVlanMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureInterfaceVlan] {
	return pulumix.Output[map[string]*FeatureInterfaceVlan]{
		OutputState: i.ToFeatureInterfaceVlanMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureInterfaceVlanOutput struct{ *pulumi.OutputState }

func (FeatureInterfaceVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureInterfaceVlan)(nil)).Elem()
}

func (o FeatureInterfaceVlanOutput) ToFeatureInterfaceVlanOutput() FeatureInterfaceVlanOutput {
	return o
}

func (o FeatureInterfaceVlanOutput) ToFeatureInterfaceVlanOutputWithContext(ctx context.Context) FeatureInterfaceVlanOutput {
	return o
}

func (o FeatureInterfaceVlanOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureInterfaceVlan] {
	return pulumix.Output[*FeatureInterfaceVlan]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureInterfaceVlanOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureInterfaceVlan) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureInterfaceVlanOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureInterfaceVlan) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureInterfaceVlanArrayOutput struct{ *pulumi.OutputState }

func (FeatureInterfaceVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureInterfaceVlan)(nil)).Elem()
}

func (o FeatureInterfaceVlanArrayOutput) ToFeatureInterfaceVlanArrayOutput() FeatureInterfaceVlanArrayOutput {
	return o
}

func (o FeatureInterfaceVlanArrayOutput) ToFeatureInterfaceVlanArrayOutputWithContext(ctx context.Context) FeatureInterfaceVlanArrayOutput {
	return o
}

func (o FeatureInterfaceVlanArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureInterfaceVlan] {
	return pulumix.Output[[]*FeatureInterfaceVlan]{
		OutputState: o.OutputState,
	}
}

func (o FeatureInterfaceVlanArrayOutput) Index(i pulumi.IntInput) FeatureInterfaceVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureInterfaceVlan {
		return vs[0].([]*FeatureInterfaceVlan)[vs[1].(int)]
	}).(FeatureInterfaceVlanOutput)
}

type FeatureInterfaceVlanMapOutput struct{ *pulumi.OutputState }

func (FeatureInterfaceVlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureInterfaceVlan)(nil)).Elem()
}

func (o FeatureInterfaceVlanMapOutput) ToFeatureInterfaceVlanMapOutput() FeatureInterfaceVlanMapOutput {
	return o
}

func (o FeatureInterfaceVlanMapOutput) ToFeatureInterfaceVlanMapOutputWithContext(ctx context.Context) FeatureInterfaceVlanMapOutput {
	return o
}

func (o FeatureInterfaceVlanMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureInterfaceVlan] {
	return pulumix.Output[map[string]*FeatureInterfaceVlan]{
		OutputState: o.OutputState,
	}
}

func (o FeatureInterfaceVlanMapOutput) MapIndex(k pulumi.StringInput) FeatureInterfaceVlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureInterfaceVlan {
		return vs[0].(map[string]*FeatureInterfaceVlan)[vs[1].(string)]
	}).(FeatureInterfaceVlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureInterfaceVlanInput)(nil)).Elem(), &FeatureInterfaceVlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureInterfaceVlanArrayInput)(nil)).Elem(), FeatureInterfaceVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureInterfaceVlanMapInput)(nil)).Elem(), FeatureInterfaceVlanMap{})
	pulumi.RegisterOutputType(FeatureInterfaceVlanOutput{})
	pulumi.RegisterOutputType(FeatureInterfaceVlanArrayOutput{})
	pulumi.RegisterOutputType(FeatureInterfaceVlanMapOutput{})
}
