// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the IS-IS instance configuration.
//
// - API Documentation: [isisInst](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:Inst/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewIsisInstance(ctx, "example", &nxos.IsisInstanceArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/isisInstance:IsisInstance example "sys/isis/inst-[ISIS1]"
//
// ```
type IsisInstance struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// IS-IS instance name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIsisInstance registers a new resource with the given unique name, arguments, and options.
func NewIsisInstance(ctx *pulumi.Context,
	name string, args *IsisInstanceArgs, opts ...pulumi.ResourceOption) (*IsisInstance, error) {
	if args == nil {
		args = &IsisInstanceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IsisInstance
	err := ctx.RegisterResource("nxos:index/isisInstance:IsisInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIsisInstance gets an existing IsisInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIsisInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IsisInstanceState, opts ...pulumi.ResourceOption) (*IsisInstance, error) {
	var resource IsisInstance
	err := ctx.ReadResource("nxos:index/isisInstance:IsisInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IsisInstance resources.
type isisInstanceState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// IS-IS instance name.
	Name *string `pulumi:"name"`
}

type IsisInstanceState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// IS-IS instance name.
	Name pulumi.StringPtrInput
}

func (IsisInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*isisInstanceState)(nil)).Elem()
}

type isisInstanceArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// IS-IS instance name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IsisInstance resource.
type IsisInstanceArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// IS-IS instance name.
	Name pulumi.StringPtrInput
}

func (IsisInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*isisInstanceArgs)(nil)).Elem()
}

type IsisInstanceInput interface {
	pulumi.Input

	ToIsisInstanceOutput() IsisInstanceOutput
	ToIsisInstanceOutputWithContext(ctx context.Context) IsisInstanceOutput
}

func (*IsisInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**IsisInstance)(nil)).Elem()
}

func (i *IsisInstance) ToIsisInstanceOutput() IsisInstanceOutput {
	return i.ToIsisInstanceOutputWithContext(context.Background())
}

func (i *IsisInstance) ToIsisInstanceOutputWithContext(ctx context.Context) IsisInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsisInstanceOutput)
}

func (i *IsisInstance) ToOutput(ctx context.Context) pulumix.Output[*IsisInstance] {
	return pulumix.Output[*IsisInstance]{
		OutputState: i.ToIsisInstanceOutputWithContext(ctx).OutputState,
	}
}

// IsisInstanceArrayInput is an input type that accepts IsisInstanceArray and IsisInstanceArrayOutput values.
// You can construct a concrete instance of `IsisInstanceArrayInput` via:
//
//	IsisInstanceArray{ IsisInstanceArgs{...} }
type IsisInstanceArrayInput interface {
	pulumi.Input

	ToIsisInstanceArrayOutput() IsisInstanceArrayOutput
	ToIsisInstanceArrayOutputWithContext(context.Context) IsisInstanceArrayOutput
}

type IsisInstanceArray []IsisInstanceInput

func (IsisInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IsisInstance)(nil)).Elem()
}

func (i IsisInstanceArray) ToIsisInstanceArrayOutput() IsisInstanceArrayOutput {
	return i.ToIsisInstanceArrayOutputWithContext(context.Background())
}

func (i IsisInstanceArray) ToIsisInstanceArrayOutputWithContext(ctx context.Context) IsisInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsisInstanceArrayOutput)
}

func (i IsisInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]*IsisInstance] {
	return pulumix.Output[[]*IsisInstance]{
		OutputState: i.ToIsisInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

// IsisInstanceMapInput is an input type that accepts IsisInstanceMap and IsisInstanceMapOutput values.
// You can construct a concrete instance of `IsisInstanceMapInput` via:
//
//	IsisInstanceMap{ "key": IsisInstanceArgs{...} }
type IsisInstanceMapInput interface {
	pulumi.Input

	ToIsisInstanceMapOutput() IsisInstanceMapOutput
	ToIsisInstanceMapOutputWithContext(context.Context) IsisInstanceMapOutput
}

type IsisInstanceMap map[string]IsisInstanceInput

func (IsisInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IsisInstance)(nil)).Elem()
}

func (i IsisInstanceMap) ToIsisInstanceMapOutput() IsisInstanceMapOutput {
	return i.ToIsisInstanceMapOutputWithContext(context.Background())
}

func (i IsisInstanceMap) ToIsisInstanceMapOutputWithContext(ctx context.Context) IsisInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsisInstanceMapOutput)
}

func (i IsisInstanceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*IsisInstance] {
	return pulumix.Output[map[string]*IsisInstance]{
		OutputState: i.ToIsisInstanceMapOutputWithContext(ctx).OutputState,
	}
}

type IsisInstanceOutput struct{ *pulumi.OutputState }

func (IsisInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IsisInstance)(nil)).Elem()
}

func (o IsisInstanceOutput) ToIsisInstanceOutput() IsisInstanceOutput {
	return o
}

func (o IsisInstanceOutput) ToIsisInstanceOutputWithContext(ctx context.Context) IsisInstanceOutput {
	return o
}

func (o IsisInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[*IsisInstance] {
	return pulumix.Output[*IsisInstance]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o IsisInstanceOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *IsisInstance) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o IsisInstanceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IsisInstance) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// IS-IS instance name.
func (o IsisInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IsisInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type IsisInstanceArrayOutput struct{ *pulumi.OutputState }

func (IsisInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IsisInstance)(nil)).Elem()
}

func (o IsisInstanceArrayOutput) ToIsisInstanceArrayOutput() IsisInstanceArrayOutput {
	return o
}

func (o IsisInstanceArrayOutput) ToIsisInstanceArrayOutputWithContext(ctx context.Context) IsisInstanceArrayOutput {
	return o
}

func (o IsisInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*IsisInstance] {
	return pulumix.Output[[]*IsisInstance]{
		OutputState: o.OutputState,
	}
}

func (o IsisInstanceArrayOutput) Index(i pulumi.IntInput) IsisInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IsisInstance {
		return vs[0].([]*IsisInstance)[vs[1].(int)]
	}).(IsisInstanceOutput)
}

type IsisInstanceMapOutput struct{ *pulumi.OutputState }

func (IsisInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IsisInstance)(nil)).Elem()
}

func (o IsisInstanceMapOutput) ToIsisInstanceMapOutput() IsisInstanceMapOutput {
	return o
}

func (o IsisInstanceMapOutput) ToIsisInstanceMapOutputWithContext(ctx context.Context) IsisInstanceMapOutput {
	return o
}

func (o IsisInstanceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*IsisInstance] {
	return pulumix.Output[map[string]*IsisInstance]{
		OutputState: o.OutputState,
	}
}

func (o IsisInstanceMapOutput) MapIndex(k pulumi.StringInput) IsisInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IsisInstance {
		return vs[0].(map[string]*IsisInstance)[vs[1].(string)]
	}).(IsisInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IsisInstanceInput)(nil)).Elem(), &IsisInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*IsisInstanceArrayInput)(nil)).Elem(), IsisInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IsisInstanceMapInput)(nil)).Elem(), IsisInstanceMap{})
	pulumi.RegisterOutputType(IsisInstanceOutput{})
	pulumi.RegisterOutputType(IsisInstanceArrayOutput{})
	pulumi.RegisterOutputType(IsisInstanceMapOutput{})
}
