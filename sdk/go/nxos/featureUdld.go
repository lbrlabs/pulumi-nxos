// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the UDLD feature configuration.
//
// - API Documentation: [fmUdld](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Feature%20Management/fm:Udld/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewFeatureUdld(ctx, "example", &nxos.FeatureUdldArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/featureUdld:FeatureUdld example "sys/fm/udld"
//
// ```
type FeatureUdld struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureUdld registers a new resource with the given unique name, arguments, and options.
func NewFeatureUdld(ctx *pulumi.Context,
	name string, args *FeatureUdldArgs, opts ...pulumi.ResourceOption) (*FeatureUdld, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureUdld
	err := ctx.RegisterResource("nxos:index/featureUdld:FeatureUdld", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureUdld gets an existing FeatureUdld resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureUdld(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureUdldState, opts ...pulumi.ResourceOption) (*FeatureUdld, error) {
	var resource FeatureUdld
	err := ctx.ReadResource("nxos:index/featureUdld:FeatureUdld", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureUdld resources.
type featureUdldState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureUdldState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureUdldState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureUdldState)(nil)).Elem()
}

type featureUdldArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureUdld resource.
type FeatureUdldArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureUdldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureUdldArgs)(nil)).Elem()
}

type FeatureUdldInput interface {
	pulumi.Input

	ToFeatureUdldOutput() FeatureUdldOutput
	ToFeatureUdldOutputWithContext(ctx context.Context) FeatureUdldOutput
}

func (*FeatureUdld) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureUdld)(nil)).Elem()
}

func (i *FeatureUdld) ToFeatureUdldOutput() FeatureUdldOutput {
	return i.ToFeatureUdldOutputWithContext(context.Background())
}

func (i *FeatureUdld) ToFeatureUdldOutputWithContext(ctx context.Context) FeatureUdldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureUdldOutput)
}

func (i *FeatureUdld) ToOutput(ctx context.Context) pulumix.Output[*FeatureUdld] {
	return pulumix.Output[*FeatureUdld]{
		OutputState: i.ToFeatureUdldOutputWithContext(ctx).OutputState,
	}
}

// FeatureUdldArrayInput is an input type that accepts FeatureUdldArray and FeatureUdldArrayOutput values.
// You can construct a concrete instance of `FeatureUdldArrayInput` via:
//
//	FeatureUdldArray{ FeatureUdldArgs{...} }
type FeatureUdldArrayInput interface {
	pulumi.Input

	ToFeatureUdldArrayOutput() FeatureUdldArrayOutput
	ToFeatureUdldArrayOutputWithContext(context.Context) FeatureUdldArrayOutput
}

type FeatureUdldArray []FeatureUdldInput

func (FeatureUdldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureUdld)(nil)).Elem()
}

func (i FeatureUdldArray) ToFeatureUdldArrayOutput() FeatureUdldArrayOutput {
	return i.ToFeatureUdldArrayOutputWithContext(context.Background())
}

func (i FeatureUdldArray) ToFeatureUdldArrayOutputWithContext(ctx context.Context) FeatureUdldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureUdldArrayOutput)
}

func (i FeatureUdldArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureUdld] {
	return pulumix.Output[[]*FeatureUdld]{
		OutputState: i.ToFeatureUdldArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureUdldMapInput is an input type that accepts FeatureUdldMap and FeatureUdldMapOutput values.
// You can construct a concrete instance of `FeatureUdldMapInput` via:
//
//	FeatureUdldMap{ "key": FeatureUdldArgs{...} }
type FeatureUdldMapInput interface {
	pulumi.Input

	ToFeatureUdldMapOutput() FeatureUdldMapOutput
	ToFeatureUdldMapOutputWithContext(context.Context) FeatureUdldMapOutput
}

type FeatureUdldMap map[string]FeatureUdldInput

func (FeatureUdldMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureUdld)(nil)).Elem()
}

func (i FeatureUdldMap) ToFeatureUdldMapOutput() FeatureUdldMapOutput {
	return i.ToFeatureUdldMapOutputWithContext(context.Background())
}

func (i FeatureUdldMap) ToFeatureUdldMapOutputWithContext(ctx context.Context) FeatureUdldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureUdldMapOutput)
}

func (i FeatureUdldMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureUdld] {
	return pulumix.Output[map[string]*FeatureUdld]{
		OutputState: i.ToFeatureUdldMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureUdldOutput struct{ *pulumi.OutputState }

func (FeatureUdldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureUdld)(nil)).Elem()
}

func (o FeatureUdldOutput) ToFeatureUdldOutput() FeatureUdldOutput {
	return o
}

func (o FeatureUdldOutput) ToFeatureUdldOutputWithContext(ctx context.Context) FeatureUdldOutput {
	return o
}

func (o FeatureUdldOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureUdld] {
	return pulumix.Output[*FeatureUdld]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureUdldOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureUdld) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureUdldOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureUdld) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureUdldArrayOutput struct{ *pulumi.OutputState }

func (FeatureUdldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureUdld)(nil)).Elem()
}

func (o FeatureUdldArrayOutput) ToFeatureUdldArrayOutput() FeatureUdldArrayOutput {
	return o
}

func (o FeatureUdldArrayOutput) ToFeatureUdldArrayOutputWithContext(ctx context.Context) FeatureUdldArrayOutput {
	return o
}

func (o FeatureUdldArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureUdld] {
	return pulumix.Output[[]*FeatureUdld]{
		OutputState: o.OutputState,
	}
}

func (o FeatureUdldArrayOutput) Index(i pulumi.IntInput) FeatureUdldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureUdld {
		return vs[0].([]*FeatureUdld)[vs[1].(int)]
	}).(FeatureUdldOutput)
}

type FeatureUdldMapOutput struct{ *pulumi.OutputState }

func (FeatureUdldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureUdld)(nil)).Elem()
}

func (o FeatureUdldMapOutput) ToFeatureUdldMapOutput() FeatureUdldMapOutput {
	return o
}

func (o FeatureUdldMapOutput) ToFeatureUdldMapOutputWithContext(ctx context.Context) FeatureUdldMapOutput {
	return o
}

func (o FeatureUdldMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureUdld] {
	return pulumix.Output[map[string]*FeatureUdld]{
		OutputState: o.OutputState,
	}
}

func (o FeatureUdldMapOutput) MapIndex(k pulumi.StringInput) FeatureUdldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureUdld {
		return vs[0].(map[string]*FeatureUdld)[vs[1].(string)]
	}).(FeatureUdldOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureUdldInput)(nil)).Elem(), &FeatureUdld{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureUdldArrayInput)(nil)).Elem(), FeatureUdldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureUdldMapInput)(nil)).Elem(), FeatureUdldMap{})
	pulumi.RegisterOutputType(FeatureUdldOutput{})
	pulumi.RegisterOutputType(FeatureUdldArrayOutput{})
	pulumi.RegisterOutputType(FeatureUdldMapOutput{})
}
