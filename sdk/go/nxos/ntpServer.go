// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage an ntp server or peer.
//
// - API Documentation: [datetimeNtpProvider](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/datetime:NtpProvider/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewNtpServer(ctx, "example", &nxos.NtpServerArgs{
//				KeyId:   pulumi.Int(10),
//				MaxPoll: pulumi.Int(6),
//				MinPoll: pulumi.Int(4),
//				Type:    pulumi.String("server"),
//				Vrf:     pulumi.String("management"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/ntpServer:NtpServer example "sys/time/prov-[1.2.3.4]"
//
// ```
type NtpServer struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
	KeyId pulumi.IntPtrOutput `pulumi:"keyId"`
	// NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
	MaxPoll pulumi.IntOutput `pulumi:"maxPoll"`
	// NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
	MinPoll pulumi.IntOutput `pulumi:"minPoll"`
	// NTP server.
	Name pulumi.StringOutput `pulumi:"name"`
	// NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
	Type pulumi.StringOutput `pulumi:"type"`
	// Identifies the VRF for the NTP providers. - Default value: `default`
	Vrf pulumi.StringOutput `pulumi:"vrf"`
}

// NewNtpServer registers a new resource with the given unique name, arguments, and options.
func NewNtpServer(ctx *pulumi.Context,
	name string, args *NtpServerArgs, opts ...pulumi.ResourceOption) (*NtpServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NtpServer
	err := ctx.RegisterResource("nxos:index/ntpServer:NtpServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNtpServer gets an existing NtpServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNtpServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NtpServerState, opts ...pulumi.ResourceOption) (*NtpServer, error) {
	var resource NtpServer
	err := ctx.ReadResource("nxos:index/ntpServer:NtpServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NtpServer resources.
type ntpServerState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
	KeyId *int `pulumi:"keyId"`
	// NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
	MaxPoll *int `pulumi:"maxPoll"`
	// NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
	MinPoll *int `pulumi:"minPoll"`
	// NTP server.
	Name *string `pulumi:"name"`
	// NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
	Type *string `pulumi:"type"`
	// Identifies the VRF for the NTP providers. - Default value: `default`
	Vrf *string `pulumi:"vrf"`
}

type NtpServerState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
	KeyId pulumi.IntPtrInput
	// NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
	MaxPoll pulumi.IntPtrInput
	// NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
	MinPoll pulumi.IntPtrInput
	// NTP server.
	Name pulumi.StringPtrInput
	// NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
	Type pulumi.StringPtrInput
	// Identifies the VRF for the NTP providers. - Default value: `default`
	Vrf pulumi.StringPtrInput
}

func (NtpServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*ntpServerState)(nil)).Elem()
}

type ntpServerArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
	KeyId *int `pulumi:"keyId"`
	// NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
	MaxPoll *int `pulumi:"maxPoll"`
	// NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
	MinPoll *int `pulumi:"minPoll"`
	// NTP server.
	Name *string `pulumi:"name"`
	// NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
	Type string `pulumi:"type"`
	// Identifies the VRF for the NTP providers. - Default value: `default`
	Vrf *string `pulumi:"vrf"`
}

// The set of arguments for constructing a NtpServer resource.
type NtpServerArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
	KeyId pulumi.IntPtrInput
	// NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
	MaxPoll pulumi.IntPtrInput
	// NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
	MinPoll pulumi.IntPtrInput
	// NTP server.
	Name pulumi.StringPtrInput
	// NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
	Type pulumi.StringInput
	// Identifies the VRF for the NTP providers. - Default value: `default`
	Vrf pulumi.StringPtrInput
}

func (NtpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ntpServerArgs)(nil)).Elem()
}

type NtpServerInput interface {
	pulumi.Input

	ToNtpServerOutput() NtpServerOutput
	ToNtpServerOutputWithContext(ctx context.Context) NtpServerOutput
}

func (*NtpServer) ElementType() reflect.Type {
	return reflect.TypeOf((**NtpServer)(nil)).Elem()
}

func (i *NtpServer) ToNtpServerOutput() NtpServerOutput {
	return i.ToNtpServerOutputWithContext(context.Background())
}

func (i *NtpServer) ToNtpServerOutputWithContext(ctx context.Context) NtpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpServerOutput)
}

func (i *NtpServer) ToOutput(ctx context.Context) pulumix.Output[*NtpServer] {
	return pulumix.Output[*NtpServer]{
		OutputState: i.ToNtpServerOutputWithContext(ctx).OutputState,
	}
}

// NtpServerArrayInput is an input type that accepts NtpServerArray and NtpServerArrayOutput values.
// You can construct a concrete instance of `NtpServerArrayInput` via:
//
//	NtpServerArray{ NtpServerArgs{...} }
type NtpServerArrayInput interface {
	pulumi.Input

	ToNtpServerArrayOutput() NtpServerArrayOutput
	ToNtpServerArrayOutputWithContext(context.Context) NtpServerArrayOutput
}

type NtpServerArray []NtpServerInput

func (NtpServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NtpServer)(nil)).Elem()
}

func (i NtpServerArray) ToNtpServerArrayOutput() NtpServerArrayOutput {
	return i.ToNtpServerArrayOutputWithContext(context.Background())
}

func (i NtpServerArray) ToNtpServerArrayOutputWithContext(ctx context.Context) NtpServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpServerArrayOutput)
}

func (i NtpServerArray) ToOutput(ctx context.Context) pulumix.Output[[]*NtpServer] {
	return pulumix.Output[[]*NtpServer]{
		OutputState: i.ToNtpServerArrayOutputWithContext(ctx).OutputState,
	}
}

// NtpServerMapInput is an input type that accepts NtpServerMap and NtpServerMapOutput values.
// You can construct a concrete instance of `NtpServerMapInput` via:
//
//	NtpServerMap{ "key": NtpServerArgs{...} }
type NtpServerMapInput interface {
	pulumi.Input

	ToNtpServerMapOutput() NtpServerMapOutput
	ToNtpServerMapOutputWithContext(context.Context) NtpServerMapOutput
}

type NtpServerMap map[string]NtpServerInput

func (NtpServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NtpServer)(nil)).Elem()
}

func (i NtpServerMap) ToNtpServerMapOutput() NtpServerMapOutput {
	return i.ToNtpServerMapOutputWithContext(context.Background())
}

func (i NtpServerMap) ToNtpServerMapOutputWithContext(ctx context.Context) NtpServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpServerMapOutput)
}

func (i NtpServerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NtpServer] {
	return pulumix.Output[map[string]*NtpServer]{
		OutputState: i.ToNtpServerMapOutputWithContext(ctx).OutputState,
	}
}

type NtpServerOutput struct{ *pulumi.OutputState }

func (NtpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NtpServer)(nil)).Elem()
}

func (o NtpServerOutput) ToNtpServerOutput() NtpServerOutput {
	return o
}

func (o NtpServerOutput) ToNtpServerOutputWithContext(ctx context.Context) NtpServerOutput {
	return o
}

func (o NtpServerOutput) ToOutput(ctx context.Context) pulumix.Output[*NtpServer] {
	return pulumix.Output[*NtpServer]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o NtpServerOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
func (o NtpServerOutput) KeyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.IntPtrOutput { return v.KeyId }).(pulumi.IntPtrOutput)
}

// NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
func (o NtpServerOutput) MaxPoll() pulumi.IntOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.IntOutput { return v.MaxPoll }).(pulumi.IntOutput)
}

// NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
func (o NtpServerOutput) MinPoll() pulumi.IntOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.IntOutput { return v.MinPoll }).(pulumi.IntOutput)
}

// NTP server.
func (o NtpServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
func (o NtpServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Identifies the VRF for the NTP providers. - Default value: `default`
func (o NtpServerOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v *NtpServer) pulumi.StringOutput { return v.Vrf }).(pulumi.StringOutput)
}

type NtpServerArrayOutput struct{ *pulumi.OutputState }

func (NtpServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NtpServer)(nil)).Elem()
}

func (o NtpServerArrayOutput) ToNtpServerArrayOutput() NtpServerArrayOutput {
	return o
}

func (o NtpServerArrayOutput) ToNtpServerArrayOutputWithContext(ctx context.Context) NtpServerArrayOutput {
	return o
}

func (o NtpServerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NtpServer] {
	return pulumix.Output[[]*NtpServer]{
		OutputState: o.OutputState,
	}
}

func (o NtpServerArrayOutput) Index(i pulumi.IntInput) NtpServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NtpServer {
		return vs[0].([]*NtpServer)[vs[1].(int)]
	}).(NtpServerOutput)
}

type NtpServerMapOutput struct{ *pulumi.OutputState }

func (NtpServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NtpServer)(nil)).Elem()
}

func (o NtpServerMapOutput) ToNtpServerMapOutput() NtpServerMapOutput {
	return o
}

func (o NtpServerMapOutput) ToNtpServerMapOutputWithContext(ctx context.Context) NtpServerMapOutput {
	return o
}

func (o NtpServerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NtpServer] {
	return pulumix.Output[map[string]*NtpServer]{
		OutputState: o.OutputState,
	}
}

func (o NtpServerMapOutput) MapIndex(k pulumi.StringInput) NtpServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NtpServer {
		return vs[0].(map[string]*NtpServer)[vs[1].(string)]
	}).(NtpServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NtpServerInput)(nil)).Elem(), &NtpServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpServerArrayInput)(nil)).Elem(), NtpServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpServerMapInput)(nil)).Elem(), NtpServerMap{})
	pulumi.RegisterOutputType(NtpServerOutput{})
	pulumi.RegisterOutputType(NtpServerArrayOutput{})
	pulumi.RegisterOutputType(NtpServerMapOutput{})
}
