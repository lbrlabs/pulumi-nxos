// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage an IPv4 interface address.
//
// - API Documentation: [ipv4Addr](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:Addr/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewIpv4InterfaceAddress(ctx, "example", &nxos.Ipv4InterfaceAddressArgs{
//				Address:     pulumi.String("24.63.46.49/30"),
//				InterfaceId: pulumi.String("eth1/10"),
//				Type:        pulumi.String("primary"),
//				Vrf:         pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/ipv4InterfaceAddress:Ipv4InterfaceAddress example "sys/ipv4/inst/dom-[default]/if-[eth1/10]/addr-[24.63.46.49/30]"
//
// ```
type Ipv4InterfaceAddress struct {
	pulumi.CustomResourceState

	// IPv4 address.
	Address pulumi.StringOutput `pulumi:"address"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// Address type. - Choices: `primary`, `secondary` - Default value: `primary`
	Type pulumi.StringOutput `pulumi:"type"`
	// VRF name.
	Vrf pulumi.StringOutput `pulumi:"vrf"`
}

// NewIpv4InterfaceAddress registers a new resource with the given unique name, arguments, and options.
func NewIpv4InterfaceAddress(ctx *pulumi.Context,
	name string, args *Ipv4InterfaceAddressArgs, opts ...pulumi.ResourceOption) (*Ipv4InterfaceAddress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.Vrf == nil {
		return nil, errors.New("invalid value for required argument 'Vrf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipv4InterfaceAddress
	err := ctx.RegisterResource("nxos:index/ipv4InterfaceAddress:Ipv4InterfaceAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv4InterfaceAddress gets an existing Ipv4InterfaceAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv4InterfaceAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv4InterfaceAddressState, opts ...pulumi.ResourceOption) (*Ipv4InterfaceAddress, error) {
	var resource Ipv4InterfaceAddress
	err := ctx.ReadResource("nxos:index/ipv4InterfaceAddress:Ipv4InterfaceAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv4InterfaceAddress resources.
type ipv4InterfaceAddressState struct {
	// IPv4 address.
	Address *string `pulumi:"address"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId *string `pulumi:"interfaceId"`
	// Address type. - Choices: `primary`, `secondary` - Default value: `primary`
	Type *string `pulumi:"type"`
	// VRF name.
	Vrf *string `pulumi:"vrf"`
}

type Ipv4InterfaceAddressState struct {
	// IPv4 address.
	Address pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringPtrInput
	// Address type. - Choices: `primary`, `secondary` - Default value: `primary`
	Type pulumi.StringPtrInput
	// VRF name.
	Vrf pulumi.StringPtrInput
}

func (Ipv4InterfaceAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4InterfaceAddressState)(nil)).Elem()
}

type ipv4InterfaceAddressArgs struct {
	// IPv4 address.
	Address string `pulumi:"address"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
	// Address type. - Choices: `primary`, `secondary` - Default value: `primary`
	Type *string `pulumi:"type"`
	// VRF name.
	Vrf string `pulumi:"vrf"`
}

// The set of arguments for constructing a Ipv4InterfaceAddress resource.
type Ipv4InterfaceAddressArgs struct {
	// IPv4 address.
	Address pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringInput
	// Address type. - Choices: `primary`, `secondary` - Default value: `primary`
	Type pulumi.StringPtrInput
	// VRF name.
	Vrf pulumi.StringInput
}

func (Ipv4InterfaceAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4InterfaceAddressArgs)(nil)).Elem()
}

type Ipv4InterfaceAddressInput interface {
	pulumi.Input

	ToIpv4InterfaceAddressOutput() Ipv4InterfaceAddressOutput
	ToIpv4InterfaceAddressOutputWithContext(ctx context.Context) Ipv4InterfaceAddressOutput
}

func (*Ipv4InterfaceAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4InterfaceAddress)(nil)).Elem()
}

func (i *Ipv4InterfaceAddress) ToIpv4InterfaceAddressOutput() Ipv4InterfaceAddressOutput {
	return i.ToIpv4InterfaceAddressOutputWithContext(context.Background())
}

func (i *Ipv4InterfaceAddress) ToIpv4InterfaceAddressOutputWithContext(ctx context.Context) Ipv4InterfaceAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4InterfaceAddressOutput)
}

func (i *Ipv4InterfaceAddress) ToOutput(ctx context.Context) pulumix.Output[*Ipv4InterfaceAddress] {
	return pulumix.Output[*Ipv4InterfaceAddress]{
		OutputState: i.ToIpv4InterfaceAddressOutputWithContext(ctx).OutputState,
	}
}

// Ipv4InterfaceAddressArrayInput is an input type that accepts Ipv4InterfaceAddressArray and Ipv4InterfaceAddressArrayOutput values.
// You can construct a concrete instance of `Ipv4InterfaceAddressArrayInput` via:
//
//	Ipv4InterfaceAddressArray{ Ipv4InterfaceAddressArgs{...} }
type Ipv4InterfaceAddressArrayInput interface {
	pulumi.Input

	ToIpv4InterfaceAddressArrayOutput() Ipv4InterfaceAddressArrayOutput
	ToIpv4InterfaceAddressArrayOutputWithContext(context.Context) Ipv4InterfaceAddressArrayOutput
}

type Ipv4InterfaceAddressArray []Ipv4InterfaceAddressInput

func (Ipv4InterfaceAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4InterfaceAddress)(nil)).Elem()
}

func (i Ipv4InterfaceAddressArray) ToIpv4InterfaceAddressArrayOutput() Ipv4InterfaceAddressArrayOutput {
	return i.ToIpv4InterfaceAddressArrayOutputWithContext(context.Background())
}

func (i Ipv4InterfaceAddressArray) ToIpv4InterfaceAddressArrayOutputWithContext(ctx context.Context) Ipv4InterfaceAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4InterfaceAddressArrayOutput)
}

func (i Ipv4InterfaceAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4InterfaceAddress] {
	return pulumix.Output[[]*Ipv4InterfaceAddress]{
		OutputState: i.ToIpv4InterfaceAddressArrayOutputWithContext(ctx).OutputState,
	}
}

// Ipv4InterfaceAddressMapInput is an input type that accepts Ipv4InterfaceAddressMap and Ipv4InterfaceAddressMapOutput values.
// You can construct a concrete instance of `Ipv4InterfaceAddressMapInput` via:
//
//	Ipv4InterfaceAddressMap{ "key": Ipv4InterfaceAddressArgs{...} }
type Ipv4InterfaceAddressMapInput interface {
	pulumi.Input

	ToIpv4InterfaceAddressMapOutput() Ipv4InterfaceAddressMapOutput
	ToIpv4InterfaceAddressMapOutputWithContext(context.Context) Ipv4InterfaceAddressMapOutput
}

type Ipv4InterfaceAddressMap map[string]Ipv4InterfaceAddressInput

func (Ipv4InterfaceAddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4InterfaceAddress)(nil)).Elem()
}

func (i Ipv4InterfaceAddressMap) ToIpv4InterfaceAddressMapOutput() Ipv4InterfaceAddressMapOutput {
	return i.ToIpv4InterfaceAddressMapOutputWithContext(context.Background())
}

func (i Ipv4InterfaceAddressMap) ToIpv4InterfaceAddressMapOutputWithContext(ctx context.Context) Ipv4InterfaceAddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4InterfaceAddressMapOutput)
}

func (i Ipv4InterfaceAddressMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4InterfaceAddress] {
	return pulumix.Output[map[string]*Ipv4InterfaceAddress]{
		OutputState: i.ToIpv4InterfaceAddressMapOutputWithContext(ctx).OutputState,
	}
}

type Ipv4InterfaceAddressOutput struct{ *pulumi.OutputState }

func (Ipv4InterfaceAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4InterfaceAddress)(nil)).Elem()
}

func (o Ipv4InterfaceAddressOutput) ToIpv4InterfaceAddressOutput() Ipv4InterfaceAddressOutput {
	return o
}

func (o Ipv4InterfaceAddressOutput) ToIpv4InterfaceAddressOutputWithContext(ctx context.Context) Ipv4InterfaceAddressOutput {
	return o
}

func (o Ipv4InterfaceAddressOutput) ToOutput(ctx context.Context) pulumix.Output[*Ipv4InterfaceAddress] {
	return pulumix.Output[*Ipv4InterfaceAddress]{
		OutputState: o.OutputState,
	}
}

// IPv4 address.
func (o Ipv4InterfaceAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4InterfaceAddress) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o Ipv4InterfaceAddressOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4InterfaceAddress) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
func (o Ipv4InterfaceAddressOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4InterfaceAddress) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// Address type. - Choices: `primary`, `secondary` - Default value: `primary`
func (o Ipv4InterfaceAddressOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4InterfaceAddress) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// VRF name.
func (o Ipv4InterfaceAddressOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4InterfaceAddress) pulumi.StringOutput { return v.Vrf }).(pulumi.StringOutput)
}

type Ipv4InterfaceAddressArrayOutput struct{ *pulumi.OutputState }

func (Ipv4InterfaceAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4InterfaceAddress)(nil)).Elem()
}

func (o Ipv4InterfaceAddressArrayOutput) ToIpv4InterfaceAddressArrayOutput() Ipv4InterfaceAddressArrayOutput {
	return o
}

func (o Ipv4InterfaceAddressArrayOutput) ToIpv4InterfaceAddressArrayOutputWithContext(ctx context.Context) Ipv4InterfaceAddressArrayOutput {
	return o
}

func (o Ipv4InterfaceAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4InterfaceAddress] {
	return pulumix.Output[[]*Ipv4InterfaceAddress]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4InterfaceAddressArrayOutput) Index(i pulumi.IntInput) Ipv4InterfaceAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv4InterfaceAddress {
		return vs[0].([]*Ipv4InterfaceAddress)[vs[1].(int)]
	}).(Ipv4InterfaceAddressOutput)
}

type Ipv4InterfaceAddressMapOutput struct{ *pulumi.OutputState }

func (Ipv4InterfaceAddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4InterfaceAddress)(nil)).Elem()
}

func (o Ipv4InterfaceAddressMapOutput) ToIpv4InterfaceAddressMapOutput() Ipv4InterfaceAddressMapOutput {
	return o
}

func (o Ipv4InterfaceAddressMapOutput) ToIpv4InterfaceAddressMapOutputWithContext(ctx context.Context) Ipv4InterfaceAddressMapOutput {
	return o
}

func (o Ipv4InterfaceAddressMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4InterfaceAddress] {
	return pulumix.Output[map[string]*Ipv4InterfaceAddress]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4InterfaceAddressMapOutput) MapIndex(k pulumi.StringInput) Ipv4InterfaceAddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv4InterfaceAddress {
		return vs[0].(map[string]*Ipv4InterfaceAddress)[vs[1].(string)]
	}).(Ipv4InterfaceAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4InterfaceAddressInput)(nil)).Elem(), &Ipv4InterfaceAddress{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4InterfaceAddressArrayInput)(nil)).Elem(), Ipv4InterfaceAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4InterfaceAddressMapInput)(nil)).Elem(), Ipv4InterfaceAddressMap{})
	pulumi.RegisterOutputType(Ipv4InterfaceAddressOutput{})
	pulumi.RegisterOutputType(Ipv4InterfaceAddressArrayOutput{})
	pulumi.RegisterOutputType(Ipv4InterfaceAddressMapOutput{})
}
