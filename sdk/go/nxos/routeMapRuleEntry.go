// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage a Route-Map Rule Entry configuration.
//
// - API Documentation: [rtmapEntry](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtmap:Entry/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewRouteMapRuleEntry(ctx, "example", &nxos.RouteMapRuleEntryArgs{
//				Action:   pulumi.String("permit"),
//				Order:    pulumi.Int(10),
//				RuleName: pulumi.String("RULE1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/routeMapRuleEntry:RouteMapRuleEntry example "sys/rpm/rtmap-[RULE1]/ent-[10]"
//
// ```
type RouteMapRuleEntry struct {
	pulumi.CustomResourceState

	// Route-Map Rule Entry action. - Choices: `deny`, `permit` - Default value: `permit`
	Action pulumi.StringOutput `pulumi:"action"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Route-Map Rule Entry order. - Range: `0`-`65535`
	Order pulumi.IntOutput `pulumi:"order"`
	// Route Map rule name.
	RuleName pulumi.StringOutput `pulumi:"ruleName"`
}

// NewRouteMapRuleEntry registers a new resource with the given unique name, arguments, and options.
func NewRouteMapRuleEntry(ctx *pulumi.Context,
	name string, args *RouteMapRuleEntryArgs, opts ...pulumi.ResourceOption) (*RouteMapRuleEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Order == nil {
		return nil, errors.New("invalid value for required argument 'Order'")
	}
	if args.RuleName == nil {
		return nil, errors.New("invalid value for required argument 'RuleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteMapRuleEntry
	err := ctx.RegisterResource("nxos:index/routeMapRuleEntry:RouteMapRuleEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteMapRuleEntry gets an existing RouteMapRuleEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteMapRuleEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteMapRuleEntryState, opts ...pulumi.ResourceOption) (*RouteMapRuleEntry, error) {
	var resource RouteMapRuleEntry
	err := ctx.ReadResource("nxos:index/routeMapRuleEntry:RouteMapRuleEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteMapRuleEntry resources.
type routeMapRuleEntryState struct {
	// Route-Map Rule Entry action. - Choices: `deny`, `permit` - Default value: `permit`
	Action *string `pulumi:"action"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route-Map Rule Entry order. - Range: `0`-`65535`
	Order *int `pulumi:"order"`
	// Route Map rule name.
	RuleName *string `pulumi:"ruleName"`
}

type RouteMapRuleEntryState struct {
	// Route-Map Rule Entry action. - Choices: `deny`, `permit` - Default value: `permit`
	Action pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route-Map Rule Entry order. - Range: `0`-`65535`
	Order pulumi.IntPtrInput
	// Route Map rule name.
	RuleName pulumi.StringPtrInput
}

func (RouteMapRuleEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeMapRuleEntryState)(nil)).Elem()
}

type routeMapRuleEntryArgs struct {
	// Route-Map Rule Entry action. - Choices: `deny`, `permit` - Default value: `permit`
	Action *string `pulumi:"action"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route-Map Rule Entry order. - Range: `0`-`65535`
	Order int `pulumi:"order"`
	// Route Map rule name.
	RuleName string `pulumi:"ruleName"`
}

// The set of arguments for constructing a RouteMapRuleEntry resource.
type RouteMapRuleEntryArgs struct {
	// Route-Map Rule Entry action. - Choices: `deny`, `permit` - Default value: `permit`
	Action pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route-Map Rule Entry order. - Range: `0`-`65535`
	Order pulumi.IntInput
	// Route Map rule name.
	RuleName pulumi.StringInput
}

func (RouteMapRuleEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeMapRuleEntryArgs)(nil)).Elem()
}

type RouteMapRuleEntryInput interface {
	pulumi.Input

	ToRouteMapRuleEntryOutput() RouteMapRuleEntryOutput
	ToRouteMapRuleEntryOutputWithContext(ctx context.Context) RouteMapRuleEntryOutput
}

func (*RouteMapRuleEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteMapRuleEntry)(nil)).Elem()
}

func (i *RouteMapRuleEntry) ToRouteMapRuleEntryOutput() RouteMapRuleEntryOutput {
	return i.ToRouteMapRuleEntryOutputWithContext(context.Background())
}

func (i *RouteMapRuleEntry) ToRouteMapRuleEntryOutputWithContext(ctx context.Context) RouteMapRuleEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapRuleEntryOutput)
}

func (i *RouteMapRuleEntry) ToOutput(ctx context.Context) pulumix.Output[*RouteMapRuleEntry] {
	return pulumix.Output[*RouteMapRuleEntry]{
		OutputState: i.ToRouteMapRuleEntryOutputWithContext(ctx).OutputState,
	}
}

// RouteMapRuleEntryArrayInput is an input type that accepts RouteMapRuleEntryArray and RouteMapRuleEntryArrayOutput values.
// You can construct a concrete instance of `RouteMapRuleEntryArrayInput` via:
//
//	RouteMapRuleEntryArray{ RouteMapRuleEntryArgs{...} }
type RouteMapRuleEntryArrayInput interface {
	pulumi.Input

	ToRouteMapRuleEntryArrayOutput() RouteMapRuleEntryArrayOutput
	ToRouteMapRuleEntryArrayOutputWithContext(context.Context) RouteMapRuleEntryArrayOutput
}

type RouteMapRuleEntryArray []RouteMapRuleEntryInput

func (RouteMapRuleEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteMapRuleEntry)(nil)).Elem()
}

func (i RouteMapRuleEntryArray) ToRouteMapRuleEntryArrayOutput() RouteMapRuleEntryArrayOutput {
	return i.ToRouteMapRuleEntryArrayOutputWithContext(context.Background())
}

func (i RouteMapRuleEntryArray) ToRouteMapRuleEntryArrayOutputWithContext(ctx context.Context) RouteMapRuleEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapRuleEntryArrayOutput)
}

func (i RouteMapRuleEntryArray) ToOutput(ctx context.Context) pulumix.Output[[]*RouteMapRuleEntry] {
	return pulumix.Output[[]*RouteMapRuleEntry]{
		OutputState: i.ToRouteMapRuleEntryArrayOutputWithContext(ctx).OutputState,
	}
}

// RouteMapRuleEntryMapInput is an input type that accepts RouteMapRuleEntryMap and RouteMapRuleEntryMapOutput values.
// You can construct a concrete instance of `RouteMapRuleEntryMapInput` via:
//
//	RouteMapRuleEntryMap{ "key": RouteMapRuleEntryArgs{...} }
type RouteMapRuleEntryMapInput interface {
	pulumi.Input

	ToRouteMapRuleEntryMapOutput() RouteMapRuleEntryMapOutput
	ToRouteMapRuleEntryMapOutputWithContext(context.Context) RouteMapRuleEntryMapOutput
}

type RouteMapRuleEntryMap map[string]RouteMapRuleEntryInput

func (RouteMapRuleEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteMapRuleEntry)(nil)).Elem()
}

func (i RouteMapRuleEntryMap) ToRouteMapRuleEntryMapOutput() RouteMapRuleEntryMapOutput {
	return i.ToRouteMapRuleEntryMapOutputWithContext(context.Background())
}

func (i RouteMapRuleEntryMap) ToRouteMapRuleEntryMapOutputWithContext(ctx context.Context) RouteMapRuleEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapRuleEntryMapOutput)
}

func (i RouteMapRuleEntryMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouteMapRuleEntry] {
	return pulumix.Output[map[string]*RouteMapRuleEntry]{
		OutputState: i.ToRouteMapRuleEntryMapOutputWithContext(ctx).OutputState,
	}
}

type RouteMapRuleEntryOutput struct{ *pulumi.OutputState }

func (RouteMapRuleEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteMapRuleEntry)(nil)).Elem()
}

func (o RouteMapRuleEntryOutput) ToRouteMapRuleEntryOutput() RouteMapRuleEntryOutput {
	return o
}

func (o RouteMapRuleEntryOutput) ToRouteMapRuleEntryOutputWithContext(ctx context.Context) RouteMapRuleEntryOutput {
	return o
}

func (o RouteMapRuleEntryOutput) ToOutput(ctx context.Context) pulumix.Output[*RouteMapRuleEntry] {
	return pulumix.Output[*RouteMapRuleEntry]{
		OutputState: o.OutputState,
	}
}

// Route-Map Rule Entry action. - Choices: `deny`, `permit` - Default value: `permit`
func (o RouteMapRuleEntryOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteMapRuleEntry) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o RouteMapRuleEntryOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteMapRuleEntry) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Route-Map Rule Entry order. - Range: `0`-`65535`
func (o RouteMapRuleEntryOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *RouteMapRuleEntry) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// Route Map rule name.
func (o RouteMapRuleEntryOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteMapRuleEntry) pulumi.StringOutput { return v.RuleName }).(pulumi.StringOutput)
}

type RouteMapRuleEntryArrayOutput struct{ *pulumi.OutputState }

func (RouteMapRuleEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteMapRuleEntry)(nil)).Elem()
}

func (o RouteMapRuleEntryArrayOutput) ToRouteMapRuleEntryArrayOutput() RouteMapRuleEntryArrayOutput {
	return o
}

func (o RouteMapRuleEntryArrayOutput) ToRouteMapRuleEntryArrayOutputWithContext(ctx context.Context) RouteMapRuleEntryArrayOutput {
	return o
}

func (o RouteMapRuleEntryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RouteMapRuleEntry] {
	return pulumix.Output[[]*RouteMapRuleEntry]{
		OutputState: o.OutputState,
	}
}

func (o RouteMapRuleEntryArrayOutput) Index(i pulumi.IntInput) RouteMapRuleEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteMapRuleEntry {
		return vs[0].([]*RouteMapRuleEntry)[vs[1].(int)]
	}).(RouteMapRuleEntryOutput)
}

type RouteMapRuleEntryMapOutput struct{ *pulumi.OutputState }

func (RouteMapRuleEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteMapRuleEntry)(nil)).Elem()
}

func (o RouteMapRuleEntryMapOutput) ToRouteMapRuleEntryMapOutput() RouteMapRuleEntryMapOutput {
	return o
}

func (o RouteMapRuleEntryMapOutput) ToRouteMapRuleEntryMapOutputWithContext(ctx context.Context) RouteMapRuleEntryMapOutput {
	return o
}

func (o RouteMapRuleEntryMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouteMapRuleEntry] {
	return pulumix.Output[map[string]*RouteMapRuleEntry]{
		OutputState: o.OutputState,
	}
}

func (o RouteMapRuleEntryMapOutput) MapIndex(k pulumi.StringInput) RouteMapRuleEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteMapRuleEntry {
		return vs[0].(map[string]*RouteMapRuleEntry)[vs[1].(string)]
	}).(RouteMapRuleEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapRuleEntryInput)(nil)).Elem(), &RouteMapRuleEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapRuleEntryArrayInput)(nil)).Elem(), RouteMapRuleEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapRuleEntryMapInput)(nil)).Elem(), RouteMapRuleEntryMap{})
	pulumi.RegisterOutputType(RouteMapRuleEntryOutput{})
	pulumi.RegisterOutputType(RouteMapRuleEntryArrayOutput{})
	pulumi.RegisterOutputType(RouteMapRuleEntryMapOutput{})
}
