// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage a loopback interface.
//
// - API Documentation: [l3LbRtdIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/l3:LbRtdIf/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewLoopbackInterface(ctx, "example", &nxos.LoopbackInterfaceArgs{
//				AdminState:  pulumi.String("down"),
//				Description: pulumi.String("My Description"),
//				InterfaceId: pulumi.String("lo123"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/loopbackInterface:LoopbackInterface example "sys/intf/lb-[lo123]"
//
// ```
type LoopbackInterface struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `up`, `down` - Default value: `up`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// Interface description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `lo123`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
}

// NewLoopbackInterface registers a new resource with the given unique name, arguments, and options.
func NewLoopbackInterface(ctx *pulumi.Context,
	name string, args *LoopbackInterfaceArgs, opts ...pulumi.ResourceOption) (*LoopbackInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoopbackInterface
	err := ctx.RegisterResource("nxos:index/loopbackInterface:LoopbackInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoopbackInterface gets an existing LoopbackInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoopbackInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoopbackInterfaceState, opts ...pulumi.ResourceOption) (*LoopbackInterface, error) {
	var resource LoopbackInterface
	err := ctx.ReadResource("nxos:index/loopbackInterface:LoopbackInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoopbackInterface resources.
type loopbackInterfaceState struct {
	// Administrative state. - Choices: `up`, `down` - Default value: `up`
	AdminState *string `pulumi:"adminState"`
	// Interface description.
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `lo123`.
	InterfaceId *string `pulumi:"interfaceId"`
}

type LoopbackInterfaceState struct {
	// Administrative state. - Choices: `up`, `down` - Default value: `up`
	AdminState pulumi.StringPtrInput
	// Interface description.
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `lo123`.
	InterfaceId pulumi.StringPtrInput
}

func (LoopbackInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*loopbackInterfaceState)(nil)).Elem()
}

type loopbackInterfaceArgs struct {
	// Administrative state. - Choices: `up`, `down` - Default value: `up`
	AdminState *string `pulumi:"adminState"`
	// Interface description.
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `lo123`.
	InterfaceId string `pulumi:"interfaceId"`
}

// The set of arguments for constructing a LoopbackInterface resource.
type LoopbackInterfaceArgs struct {
	// Administrative state. - Choices: `up`, `down` - Default value: `up`
	AdminState pulumi.StringPtrInput
	// Interface description.
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `lo123`.
	InterfaceId pulumi.StringInput
}

func (LoopbackInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loopbackInterfaceArgs)(nil)).Elem()
}

type LoopbackInterfaceInput interface {
	pulumi.Input

	ToLoopbackInterfaceOutput() LoopbackInterfaceOutput
	ToLoopbackInterfaceOutputWithContext(ctx context.Context) LoopbackInterfaceOutput
}

func (*LoopbackInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**LoopbackInterface)(nil)).Elem()
}

func (i *LoopbackInterface) ToLoopbackInterfaceOutput() LoopbackInterfaceOutput {
	return i.ToLoopbackInterfaceOutputWithContext(context.Background())
}

func (i *LoopbackInterface) ToLoopbackInterfaceOutputWithContext(ctx context.Context) LoopbackInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoopbackInterfaceOutput)
}

func (i *LoopbackInterface) ToOutput(ctx context.Context) pulumix.Output[*LoopbackInterface] {
	return pulumix.Output[*LoopbackInterface]{
		OutputState: i.ToLoopbackInterfaceOutputWithContext(ctx).OutputState,
	}
}

// LoopbackInterfaceArrayInput is an input type that accepts LoopbackInterfaceArray and LoopbackInterfaceArrayOutput values.
// You can construct a concrete instance of `LoopbackInterfaceArrayInput` via:
//
//	LoopbackInterfaceArray{ LoopbackInterfaceArgs{...} }
type LoopbackInterfaceArrayInput interface {
	pulumi.Input

	ToLoopbackInterfaceArrayOutput() LoopbackInterfaceArrayOutput
	ToLoopbackInterfaceArrayOutputWithContext(context.Context) LoopbackInterfaceArrayOutput
}

type LoopbackInterfaceArray []LoopbackInterfaceInput

func (LoopbackInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoopbackInterface)(nil)).Elem()
}

func (i LoopbackInterfaceArray) ToLoopbackInterfaceArrayOutput() LoopbackInterfaceArrayOutput {
	return i.ToLoopbackInterfaceArrayOutputWithContext(context.Background())
}

func (i LoopbackInterfaceArray) ToLoopbackInterfaceArrayOutputWithContext(ctx context.Context) LoopbackInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoopbackInterfaceArrayOutput)
}

func (i LoopbackInterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*LoopbackInterface] {
	return pulumix.Output[[]*LoopbackInterface]{
		OutputState: i.ToLoopbackInterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// LoopbackInterfaceMapInput is an input type that accepts LoopbackInterfaceMap and LoopbackInterfaceMapOutput values.
// You can construct a concrete instance of `LoopbackInterfaceMapInput` via:
//
//	LoopbackInterfaceMap{ "key": LoopbackInterfaceArgs{...} }
type LoopbackInterfaceMapInput interface {
	pulumi.Input

	ToLoopbackInterfaceMapOutput() LoopbackInterfaceMapOutput
	ToLoopbackInterfaceMapOutputWithContext(context.Context) LoopbackInterfaceMapOutput
}

type LoopbackInterfaceMap map[string]LoopbackInterfaceInput

func (LoopbackInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoopbackInterface)(nil)).Elem()
}

func (i LoopbackInterfaceMap) ToLoopbackInterfaceMapOutput() LoopbackInterfaceMapOutput {
	return i.ToLoopbackInterfaceMapOutputWithContext(context.Background())
}

func (i LoopbackInterfaceMap) ToLoopbackInterfaceMapOutputWithContext(ctx context.Context) LoopbackInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoopbackInterfaceMapOutput)
}

func (i LoopbackInterfaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*LoopbackInterface] {
	return pulumix.Output[map[string]*LoopbackInterface]{
		OutputState: i.ToLoopbackInterfaceMapOutputWithContext(ctx).OutputState,
	}
}

type LoopbackInterfaceOutput struct{ *pulumi.OutputState }

func (LoopbackInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoopbackInterface)(nil)).Elem()
}

func (o LoopbackInterfaceOutput) ToLoopbackInterfaceOutput() LoopbackInterfaceOutput {
	return o
}

func (o LoopbackInterfaceOutput) ToLoopbackInterfaceOutputWithContext(ctx context.Context) LoopbackInterfaceOutput {
	return o
}

func (o LoopbackInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[*LoopbackInterface] {
	return pulumix.Output[*LoopbackInterface]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `up`, `down` - Default value: `up`
func (o LoopbackInterfaceOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *LoopbackInterface) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// Interface description.
func (o LoopbackInterfaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoopbackInterface) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o LoopbackInterfaceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoopbackInterface) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Must match first field in the output of `show intf brief`. Example: `lo123`.
func (o LoopbackInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoopbackInterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

type LoopbackInterfaceArrayOutput struct{ *pulumi.OutputState }

func (LoopbackInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoopbackInterface)(nil)).Elem()
}

func (o LoopbackInterfaceArrayOutput) ToLoopbackInterfaceArrayOutput() LoopbackInterfaceArrayOutput {
	return o
}

func (o LoopbackInterfaceArrayOutput) ToLoopbackInterfaceArrayOutputWithContext(ctx context.Context) LoopbackInterfaceArrayOutput {
	return o
}

func (o LoopbackInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*LoopbackInterface] {
	return pulumix.Output[[]*LoopbackInterface]{
		OutputState: o.OutputState,
	}
}

func (o LoopbackInterfaceArrayOutput) Index(i pulumi.IntInput) LoopbackInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoopbackInterface {
		return vs[0].([]*LoopbackInterface)[vs[1].(int)]
	}).(LoopbackInterfaceOutput)
}

type LoopbackInterfaceMapOutput struct{ *pulumi.OutputState }

func (LoopbackInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoopbackInterface)(nil)).Elem()
}

func (o LoopbackInterfaceMapOutput) ToLoopbackInterfaceMapOutput() LoopbackInterfaceMapOutput {
	return o
}

func (o LoopbackInterfaceMapOutput) ToLoopbackInterfaceMapOutputWithContext(ctx context.Context) LoopbackInterfaceMapOutput {
	return o
}

func (o LoopbackInterfaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*LoopbackInterface] {
	return pulumix.Output[map[string]*LoopbackInterface]{
		OutputState: o.OutputState,
	}
}

func (o LoopbackInterfaceMapOutput) MapIndex(k pulumi.StringInput) LoopbackInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoopbackInterface {
		return vs[0].(map[string]*LoopbackInterface)[vs[1].(string)]
	}).(LoopbackInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoopbackInterfaceInput)(nil)).Elem(), &LoopbackInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoopbackInterfaceArrayInput)(nil)).Elem(), LoopbackInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoopbackInterfaceMapInput)(nil)).Elem(), LoopbackInterfaceMap{})
	pulumi.RegisterOutputType(LoopbackInterfaceOutput{})
	pulumi.RegisterOutputType(LoopbackInterfaceArrayOutput{})
	pulumi.RegisterOutputType(LoopbackInterfaceMapOutput{})
}
