// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the OSPF interface configuration.
//
// - API Documentation: [ospfIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:If/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewOspfInterface(ctx, "example", &nxos.OspfInterfaceArgs{
//				AdvertiseSecondaries: pulumi.Bool(false),
//				Area:                 pulumi.String("0.0.0.10"),
//				Bfd:                  pulumi.String("disabled"),
//				Cost:                 pulumi.Int(1000),
//				DeadInterval:         pulumi.Int(60),
//				HelloInterval:        pulumi.Int(15),
//				InstanceName:         pulumi.String("OSPF1"),
//				InterfaceId:          pulumi.String("eth1/10"),
//				NetworkType:          pulumi.String("p2p"),
//				Passive:              pulumi.String("enabled"),
//				Priority:             pulumi.Int(10),
//				VrfName:              pulumi.String("VRF1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/ospfInterface:OspfInterface example "sys/ospf/inst-[OSPF1]/dom-[VRF1]/if-[eth1/10]"
//
// ```
type OspfInterface struct {
	pulumi.CustomResourceState

	// Advertise secondary IP addresses. - Default value: `true`
	AdvertiseSecondaries pulumi.BoolOutput `pulumi:"advertiseSecondaries"`
	// Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
	Area pulumi.StringOutput `pulumi:"area"`
	// Bidirectional Forwarding Detection (BFD). - Choices: `unspecified`, `enabled`, `disabled` - Default value: `unspecified`
	Bfd pulumi.StringOutput `pulumi:"bfd"`
	// Specifies the cost of interface. - Range: `0`-`65535` - Default value: `0`
	Cost pulumi.IntOutput `pulumi:"cost"`
	// Dead interval, interval after which router declares that neighbor as down. - Range: `0`-`65535` - Default value: `0`
	DeadInterval pulumi.IntOutput `pulumi:"deadInterval"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Hello interval, interval between hello packets that OSPF sends on the interface. - Range: `0`-`65535` - Default value:
	// `10`
	HelloInterval pulumi.IntOutput `pulumi:"helloInterval"`
	// OSPF instance name.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// Network type. - Choices: `unspecified`, `p2p`, `bcast` - Default value: `unspecified`
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// Passive interface control. Interface can be configured as passive or non-passive. - Choices: `unspecified`, `enabled`,
	// `disabled` - Default value: `unspecified`
	Passive pulumi.StringOutput `pulumi:"passive"`
	// Priority, used in determining the designated router on this network. - Range: `0`-`255` - Default value: `1`
	Priority pulumi.IntOutput `pulumi:"priority"`
	// VRF name.
	VrfName pulumi.StringOutput `pulumi:"vrfName"`
}

// NewOspfInterface registers a new resource with the given unique name, arguments, and options.
func NewOspfInterface(ctx *pulumi.Context,
	name string, args *OspfInterfaceArgs, opts ...pulumi.ResourceOption) (*OspfInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.VrfName == nil {
		return nil, errors.New("invalid value for required argument 'VrfName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OspfInterface
	err := ctx.RegisterResource("nxos:index/ospfInterface:OspfInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOspfInterface gets an existing OspfInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOspfInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OspfInterfaceState, opts ...pulumi.ResourceOption) (*OspfInterface, error) {
	var resource OspfInterface
	err := ctx.ReadResource("nxos:index/ospfInterface:OspfInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OspfInterface resources.
type ospfInterfaceState struct {
	// Advertise secondary IP addresses. - Default value: `true`
	AdvertiseSecondaries *bool `pulumi:"advertiseSecondaries"`
	// Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
	Area *string `pulumi:"area"`
	// Bidirectional Forwarding Detection (BFD). - Choices: `unspecified`, `enabled`, `disabled` - Default value: `unspecified`
	Bfd *string `pulumi:"bfd"`
	// Specifies the cost of interface. - Range: `0`-`65535` - Default value: `0`
	Cost *int `pulumi:"cost"`
	// Dead interval, interval after which router declares that neighbor as down. - Range: `0`-`65535` - Default value: `0`
	DeadInterval *int `pulumi:"deadInterval"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Hello interval, interval between hello packets that OSPF sends on the interface. - Range: `0`-`65535` - Default value:
	// `10`
	HelloInterval *int `pulumi:"helloInterval"`
	// OSPF instance name.
	InstanceName *string `pulumi:"instanceName"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId *string `pulumi:"interfaceId"`
	// Network type. - Choices: `unspecified`, `p2p`, `bcast` - Default value: `unspecified`
	NetworkType *string `pulumi:"networkType"`
	// Passive interface control. Interface can be configured as passive or non-passive. - Choices: `unspecified`, `enabled`,
	// `disabled` - Default value: `unspecified`
	Passive *string `pulumi:"passive"`
	// Priority, used in determining the designated router on this network. - Range: `0`-`255` - Default value: `1`
	Priority *int `pulumi:"priority"`
	// VRF name.
	VrfName *string `pulumi:"vrfName"`
}

type OspfInterfaceState struct {
	// Advertise secondary IP addresses. - Default value: `true`
	AdvertiseSecondaries pulumi.BoolPtrInput
	// Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
	Area pulumi.StringPtrInput
	// Bidirectional Forwarding Detection (BFD). - Choices: `unspecified`, `enabled`, `disabled` - Default value: `unspecified`
	Bfd pulumi.StringPtrInput
	// Specifies the cost of interface. - Range: `0`-`65535` - Default value: `0`
	Cost pulumi.IntPtrInput
	// Dead interval, interval after which router declares that neighbor as down. - Range: `0`-`65535` - Default value: `0`
	DeadInterval pulumi.IntPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Hello interval, interval between hello packets that OSPF sends on the interface. - Range: `0`-`65535` - Default value:
	// `10`
	HelloInterval pulumi.IntPtrInput
	// OSPF instance name.
	InstanceName pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringPtrInput
	// Network type. - Choices: `unspecified`, `p2p`, `bcast` - Default value: `unspecified`
	NetworkType pulumi.StringPtrInput
	// Passive interface control. Interface can be configured as passive or non-passive. - Choices: `unspecified`, `enabled`,
	// `disabled` - Default value: `unspecified`
	Passive pulumi.StringPtrInput
	// Priority, used in determining the designated router on this network. - Range: `0`-`255` - Default value: `1`
	Priority pulumi.IntPtrInput
	// VRF name.
	VrfName pulumi.StringPtrInput
}

func (OspfInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ospfInterfaceState)(nil)).Elem()
}

type ospfInterfaceArgs struct {
	// Advertise secondary IP addresses. - Default value: `true`
	AdvertiseSecondaries *bool `pulumi:"advertiseSecondaries"`
	// Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
	Area *string `pulumi:"area"`
	// Bidirectional Forwarding Detection (BFD). - Choices: `unspecified`, `enabled`, `disabled` - Default value: `unspecified`
	Bfd *string `pulumi:"bfd"`
	// Specifies the cost of interface. - Range: `0`-`65535` - Default value: `0`
	Cost *int `pulumi:"cost"`
	// Dead interval, interval after which router declares that neighbor as down. - Range: `0`-`65535` - Default value: `0`
	DeadInterval *int `pulumi:"deadInterval"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Hello interval, interval between hello packets that OSPF sends on the interface. - Range: `0`-`65535` - Default value:
	// `10`
	HelloInterval *int `pulumi:"helloInterval"`
	// OSPF instance name.
	InstanceName string `pulumi:"instanceName"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
	// Network type. - Choices: `unspecified`, `p2p`, `bcast` - Default value: `unspecified`
	NetworkType *string `pulumi:"networkType"`
	// Passive interface control. Interface can be configured as passive or non-passive. - Choices: `unspecified`, `enabled`,
	// `disabled` - Default value: `unspecified`
	Passive *string `pulumi:"passive"`
	// Priority, used in determining the designated router on this network. - Range: `0`-`255` - Default value: `1`
	Priority *int `pulumi:"priority"`
	// VRF name.
	VrfName string `pulumi:"vrfName"`
}

// The set of arguments for constructing a OspfInterface resource.
type OspfInterfaceArgs struct {
	// Advertise secondary IP addresses. - Default value: `true`
	AdvertiseSecondaries pulumi.BoolPtrInput
	// Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
	Area pulumi.StringPtrInput
	// Bidirectional Forwarding Detection (BFD). - Choices: `unspecified`, `enabled`, `disabled` - Default value: `unspecified`
	Bfd pulumi.StringPtrInput
	// Specifies the cost of interface. - Range: `0`-`65535` - Default value: `0`
	Cost pulumi.IntPtrInput
	// Dead interval, interval after which router declares that neighbor as down. - Range: `0`-`65535` - Default value: `0`
	DeadInterval pulumi.IntPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Hello interval, interval between hello packets that OSPF sends on the interface. - Range: `0`-`65535` - Default value:
	// `10`
	HelloInterval pulumi.IntPtrInput
	// OSPF instance name.
	InstanceName pulumi.StringInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringInput
	// Network type. - Choices: `unspecified`, `p2p`, `bcast` - Default value: `unspecified`
	NetworkType pulumi.StringPtrInput
	// Passive interface control. Interface can be configured as passive or non-passive. - Choices: `unspecified`, `enabled`,
	// `disabled` - Default value: `unspecified`
	Passive pulumi.StringPtrInput
	// Priority, used in determining the designated router on this network. - Range: `0`-`255` - Default value: `1`
	Priority pulumi.IntPtrInput
	// VRF name.
	VrfName pulumi.StringInput
}

func (OspfInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ospfInterfaceArgs)(nil)).Elem()
}

type OspfInterfaceInput interface {
	pulumi.Input

	ToOspfInterfaceOutput() OspfInterfaceOutput
	ToOspfInterfaceOutputWithContext(ctx context.Context) OspfInterfaceOutput
}

func (*OspfInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**OspfInterface)(nil)).Elem()
}

func (i *OspfInterface) ToOspfInterfaceOutput() OspfInterfaceOutput {
	return i.ToOspfInterfaceOutputWithContext(context.Background())
}

func (i *OspfInterface) ToOspfInterfaceOutputWithContext(ctx context.Context) OspfInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfInterfaceOutput)
}

func (i *OspfInterface) ToOutput(ctx context.Context) pulumix.Output[*OspfInterface] {
	return pulumix.Output[*OspfInterface]{
		OutputState: i.ToOspfInterfaceOutputWithContext(ctx).OutputState,
	}
}

// OspfInterfaceArrayInput is an input type that accepts OspfInterfaceArray and OspfInterfaceArrayOutput values.
// You can construct a concrete instance of `OspfInterfaceArrayInput` via:
//
//	OspfInterfaceArray{ OspfInterfaceArgs{...} }
type OspfInterfaceArrayInput interface {
	pulumi.Input

	ToOspfInterfaceArrayOutput() OspfInterfaceArrayOutput
	ToOspfInterfaceArrayOutputWithContext(context.Context) OspfInterfaceArrayOutput
}

type OspfInterfaceArray []OspfInterfaceInput

func (OspfInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OspfInterface)(nil)).Elem()
}

func (i OspfInterfaceArray) ToOspfInterfaceArrayOutput() OspfInterfaceArrayOutput {
	return i.ToOspfInterfaceArrayOutputWithContext(context.Background())
}

func (i OspfInterfaceArray) ToOspfInterfaceArrayOutputWithContext(ctx context.Context) OspfInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfInterfaceArrayOutput)
}

func (i OspfInterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*OspfInterface] {
	return pulumix.Output[[]*OspfInterface]{
		OutputState: i.ToOspfInterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// OspfInterfaceMapInput is an input type that accepts OspfInterfaceMap and OspfInterfaceMapOutput values.
// You can construct a concrete instance of `OspfInterfaceMapInput` via:
//
//	OspfInterfaceMap{ "key": OspfInterfaceArgs{...} }
type OspfInterfaceMapInput interface {
	pulumi.Input

	ToOspfInterfaceMapOutput() OspfInterfaceMapOutput
	ToOspfInterfaceMapOutputWithContext(context.Context) OspfInterfaceMapOutput
}

type OspfInterfaceMap map[string]OspfInterfaceInput

func (OspfInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OspfInterface)(nil)).Elem()
}

func (i OspfInterfaceMap) ToOspfInterfaceMapOutput() OspfInterfaceMapOutput {
	return i.ToOspfInterfaceMapOutputWithContext(context.Background())
}

func (i OspfInterfaceMap) ToOspfInterfaceMapOutputWithContext(ctx context.Context) OspfInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfInterfaceMapOutput)
}

func (i OspfInterfaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OspfInterface] {
	return pulumix.Output[map[string]*OspfInterface]{
		OutputState: i.ToOspfInterfaceMapOutputWithContext(ctx).OutputState,
	}
}

type OspfInterfaceOutput struct{ *pulumi.OutputState }

func (OspfInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OspfInterface)(nil)).Elem()
}

func (o OspfInterfaceOutput) ToOspfInterfaceOutput() OspfInterfaceOutput {
	return o
}

func (o OspfInterfaceOutput) ToOspfInterfaceOutputWithContext(ctx context.Context) OspfInterfaceOutput {
	return o
}

func (o OspfInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[*OspfInterface] {
	return pulumix.Output[*OspfInterface]{
		OutputState: o.OutputState,
	}
}

// Advertise secondary IP addresses. - Default value: `true`
func (o OspfInterfaceOutput) AdvertiseSecondaries() pulumi.BoolOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.BoolOutput { return v.AdvertiseSecondaries }).(pulumi.BoolOutput)
}

// Area identifier to which a network or interface belongs in IPv4 address format. - Default value: `0.0.0.0`
func (o OspfInterfaceOutput) Area() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.StringOutput { return v.Area }).(pulumi.StringOutput)
}

// Bidirectional Forwarding Detection (BFD). - Choices: `unspecified`, `enabled`, `disabled` - Default value: `unspecified`
func (o OspfInterfaceOutput) Bfd() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.StringOutput { return v.Bfd }).(pulumi.StringOutput)
}

// Specifies the cost of interface. - Range: `0`-`65535` - Default value: `0`
func (o OspfInterfaceOutput) Cost() pulumi.IntOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.IntOutput { return v.Cost }).(pulumi.IntOutput)
}

// Dead interval, interval after which router declares that neighbor as down. - Range: `0`-`65535` - Default value: `0`
func (o OspfInterfaceOutput) DeadInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.IntOutput { return v.DeadInterval }).(pulumi.IntOutput)
}

// A device name from the provider configuration.
func (o OspfInterfaceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Hello interval, interval between hello packets that OSPF sends on the interface. - Range: `0`-`65535` - Default value:
// `10`
func (o OspfInterfaceOutput) HelloInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.IntOutput { return v.HelloInterval }).(pulumi.IntOutput)
}

// OSPF instance name.
func (o OspfInterfaceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
func (o OspfInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// Network type. - Choices: `unspecified`, `p2p`, `bcast` - Default value: `unspecified`
func (o OspfInterfaceOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// Passive interface control. Interface can be configured as passive or non-passive. - Choices: `unspecified`, `enabled`,
// `disabled` - Default value: `unspecified`
func (o OspfInterfaceOutput) Passive() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.StringOutput { return v.Passive }).(pulumi.StringOutput)
}

// Priority, used in determining the designated router on this network. - Range: `0`-`255` - Default value: `1`
func (o OspfInterfaceOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// VRF name.
func (o OspfInterfaceOutput) VrfName() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfInterface) pulumi.StringOutput { return v.VrfName }).(pulumi.StringOutput)
}

type OspfInterfaceArrayOutput struct{ *pulumi.OutputState }

func (OspfInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OspfInterface)(nil)).Elem()
}

func (o OspfInterfaceArrayOutput) ToOspfInterfaceArrayOutput() OspfInterfaceArrayOutput {
	return o
}

func (o OspfInterfaceArrayOutput) ToOspfInterfaceArrayOutputWithContext(ctx context.Context) OspfInterfaceArrayOutput {
	return o
}

func (o OspfInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OspfInterface] {
	return pulumix.Output[[]*OspfInterface]{
		OutputState: o.OutputState,
	}
}

func (o OspfInterfaceArrayOutput) Index(i pulumi.IntInput) OspfInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OspfInterface {
		return vs[0].([]*OspfInterface)[vs[1].(int)]
	}).(OspfInterfaceOutput)
}

type OspfInterfaceMapOutput struct{ *pulumi.OutputState }

func (OspfInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OspfInterface)(nil)).Elem()
}

func (o OspfInterfaceMapOutput) ToOspfInterfaceMapOutput() OspfInterfaceMapOutput {
	return o
}

func (o OspfInterfaceMapOutput) ToOspfInterfaceMapOutputWithContext(ctx context.Context) OspfInterfaceMapOutput {
	return o
}

func (o OspfInterfaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OspfInterface] {
	return pulumix.Output[map[string]*OspfInterface]{
		OutputState: o.OutputState,
	}
}

func (o OspfInterfaceMapOutput) MapIndex(k pulumi.StringInput) OspfInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OspfInterface {
		return vs[0].(map[string]*OspfInterface)[vs[1].(string)]
	}).(OspfInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OspfInterfaceInput)(nil)).Elem(), &OspfInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfInterfaceArrayInput)(nil)).Elem(), OspfInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfInterfaceMapInput)(nil)).Elem(), OspfInterfaceMap{})
	pulumi.RegisterOutputType(OspfInterfaceOutput{})
	pulumi.RegisterOutputType(OspfInterfaceArrayOutput{})
	pulumi.RegisterOutputType(OspfInterfaceMapOutput{})
}
