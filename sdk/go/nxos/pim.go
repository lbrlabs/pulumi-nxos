// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the global PIM configuration.
//
// - API Documentation: [pimEntity](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:Entity/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewPim(ctx, "example", &nxos.PimArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/pim:Pim example "sys/pim"
//
// ```
type Pim struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewPim registers a new resource with the given unique name, arguments, and options.
func NewPim(ctx *pulumi.Context,
	name string, args *PimArgs, opts ...pulumi.ResourceOption) (*Pim, error) {
	if args == nil {
		args = &PimArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pim
	err := ctx.RegisterResource("nxos:index/pim:Pim", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPim gets an existing Pim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPim(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PimState, opts ...pulumi.ResourceOption) (*Pim, error) {
	var resource Pim
	err := ctx.ReadResource("nxos:index/pim:Pim", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pim resources.
type pimState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type PimState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (PimState) ElementType() reflect.Type {
	return reflect.TypeOf((*pimState)(nil)).Elem()
}

type pimArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a Pim resource.
type PimArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (PimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pimArgs)(nil)).Elem()
}

type PimInput interface {
	pulumi.Input

	ToPimOutput() PimOutput
	ToPimOutputWithContext(ctx context.Context) PimOutput
}

func (*Pim) ElementType() reflect.Type {
	return reflect.TypeOf((**Pim)(nil)).Elem()
}

func (i *Pim) ToPimOutput() PimOutput {
	return i.ToPimOutputWithContext(context.Background())
}

func (i *Pim) ToPimOutputWithContext(ctx context.Context) PimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimOutput)
}

func (i *Pim) ToOutput(ctx context.Context) pulumix.Output[*Pim] {
	return pulumix.Output[*Pim]{
		OutputState: i.ToPimOutputWithContext(ctx).OutputState,
	}
}

// PimArrayInput is an input type that accepts PimArray and PimArrayOutput values.
// You can construct a concrete instance of `PimArrayInput` via:
//
//	PimArray{ PimArgs{...} }
type PimArrayInput interface {
	pulumi.Input

	ToPimArrayOutput() PimArrayOutput
	ToPimArrayOutputWithContext(context.Context) PimArrayOutput
}

type PimArray []PimInput

func (PimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pim)(nil)).Elem()
}

func (i PimArray) ToPimArrayOutput() PimArrayOutput {
	return i.ToPimArrayOutputWithContext(context.Background())
}

func (i PimArray) ToPimArrayOutputWithContext(ctx context.Context) PimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimArrayOutput)
}

func (i PimArray) ToOutput(ctx context.Context) pulumix.Output[[]*Pim] {
	return pulumix.Output[[]*Pim]{
		OutputState: i.ToPimArrayOutputWithContext(ctx).OutputState,
	}
}

// PimMapInput is an input type that accepts PimMap and PimMapOutput values.
// You can construct a concrete instance of `PimMapInput` via:
//
//	PimMap{ "key": PimArgs{...} }
type PimMapInput interface {
	pulumi.Input

	ToPimMapOutput() PimMapOutput
	ToPimMapOutputWithContext(context.Context) PimMapOutput
}

type PimMap map[string]PimInput

func (PimMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pim)(nil)).Elem()
}

func (i PimMap) ToPimMapOutput() PimMapOutput {
	return i.ToPimMapOutputWithContext(context.Background())
}

func (i PimMap) ToPimMapOutputWithContext(ctx context.Context) PimMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimMapOutput)
}

func (i PimMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Pim] {
	return pulumix.Output[map[string]*Pim]{
		OutputState: i.ToPimMapOutputWithContext(ctx).OutputState,
	}
}

type PimOutput struct{ *pulumi.OutputState }

func (PimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pim)(nil)).Elem()
}

func (o PimOutput) ToPimOutput() PimOutput {
	return o
}

func (o PimOutput) ToPimOutputWithContext(ctx context.Context) PimOutput {
	return o
}

func (o PimOutput) ToOutput(ctx context.Context) pulumix.Output[*Pim] {
	return pulumix.Output[*Pim]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o PimOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *Pim) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o PimOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pim) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type PimArrayOutput struct{ *pulumi.OutputState }

func (PimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pim)(nil)).Elem()
}

func (o PimArrayOutput) ToPimArrayOutput() PimArrayOutput {
	return o
}

func (o PimArrayOutput) ToPimArrayOutputWithContext(ctx context.Context) PimArrayOutput {
	return o
}

func (o PimArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Pim] {
	return pulumix.Output[[]*Pim]{
		OutputState: o.OutputState,
	}
}

func (o PimArrayOutput) Index(i pulumi.IntInput) PimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pim {
		return vs[0].([]*Pim)[vs[1].(int)]
	}).(PimOutput)
}

type PimMapOutput struct{ *pulumi.OutputState }

func (PimMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pim)(nil)).Elem()
}

func (o PimMapOutput) ToPimMapOutput() PimMapOutput {
	return o
}

func (o PimMapOutput) ToPimMapOutputWithContext(ctx context.Context) PimMapOutput {
	return o
}

func (o PimMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Pim] {
	return pulumix.Output[map[string]*Pim]{
		OutputState: o.OutputState,
	}
}

func (o PimMapOutput) MapIndex(k pulumi.StringInput) PimOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pim {
		return vs[0].(map[string]*Pim)[vs[1].(string)]
	}).(PimOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PimInput)(nil)).Elem(), &Pim{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimArrayInput)(nil)).Elem(), PimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimMapInput)(nil)).Elem(), PimMap{})
	pulumi.RegisterOutputType(PimOutput{})
	pulumi.RegisterOutputType(PimArrayOutput{})
	pulumi.RegisterOutputType(PimMapOutput{})
}
