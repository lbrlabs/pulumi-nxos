// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the vPC instance configuration.
//
// - API Documentation: [vpcInst](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/vpc:Inst/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewVpcInstance(ctx, "example", &nxos.VpcInstanceArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/vpcInstance:VpcInstance example "sys/vpc/inst"
//
// ```
type VpcInstance struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewVpcInstance registers a new resource with the given unique name, arguments, and options.
func NewVpcInstance(ctx *pulumi.Context,
	name string, args *VpcInstanceArgs, opts ...pulumi.ResourceOption) (*VpcInstance, error) {
	if args == nil {
		args = &VpcInstanceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcInstance
	err := ctx.RegisterResource("nxos:index/vpcInstance:VpcInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcInstance gets an existing VpcInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcInstanceState, opts ...pulumi.ResourceOption) (*VpcInstance, error) {
	var resource VpcInstance
	err := ctx.ReadResource("nxos:index/vpcInstance:VpcInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcInstance resources.
type vpcInstanceState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type VpcInstanceState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (VpcInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcInstanceState)(nil)).Elem()
}

type vpcInstanceArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a VpcInstance resource.
type VpcInstanceArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (VpcInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcInstanceArgs)(nil)).Elem()
}

type VpcInstanceInput interface {
	pulumi.Input

	ToVpcInstanceOutput() VpcInstanceOutput
	ToVpcInstanceOutputWithContext(ctx context.Context) VpcInstanceOutput
}

func (*VpcInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcInstance)(nil)).Elem()
}

func (i *VpcInstance) ToVpcInstanceOutput() VpcInstanceOutput {
	return i.ToVpcInstanceOutputWithContext(context.Background())
}

func (i *VpcInstance) ToVpcInstanceOutputWithContext(ctx context.Context) VpcInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcInstanceOutput)
}

func (i *VpcInstance) ToOutput(ctx context.Context) pulumix.Output[*VpcInstance] {
	return pulumix.Output[*VpcInstance]{
		OutputState: i.ToVpcInstanceOutputWithContext(ctx).OutputState,
	}
}

// VpcInstanceArrayInput is an input type that accepts VpcInstanceArray and VpcInstanceArrayOutput values.
// You can construct a concrete instance of `VpcInstanceArrayInput` via:
//
//	VpcInstanceArray{ VpcInstanceArgs{...} }
type VpcInstanceArrayInput interface {
	pulumi.Input

	ToVpcInstanceArrayOutput() VpcInstanceArrayOutput
	ToVpcInstanceArrayOutputWithContext(context.Context) VpcInstanceArrayOutput
}

type VpcInstanceArray []VpcInstanceInput

func (VpcInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcInstance)(nil)).Elem()
}

func (i VpcInstanceArray) ToVpcInstanceArrayOutput() VpcInstanceArrayOutput {
	return i.ToVpcInstanceArrayOutputWithContext(context.Background())
}

func (i VpcInstanceArray) ToVpcInstanceArrayOutputWithContext(ctx context.Context) VpcInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcInstanceArrayOutput)
}

func (i VpcInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]*VpcInstance] {
	return pulumix.Output[[]*VpcInstance]{
		OutputState: i.ToVpcInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

// VpcInstanceMapInput is an input type that accepts VpcInstanceMap and VpcInstanceMapOutput values.
// You can construct a concrete instance of `VpcInstanceMapInput` via:
//
//	VpcInstanceMap{ "key": VpcInstanceArgs{...} }
type VpcInstanceMapInput interface {
	pulumi.Input

	ToVpcInstanceMapOutput() VpcInstanceMapOutput
	ToVpcInstanceMapOutputWithContext(context.Context) VpcInstanceMapOutput
}

type VpcInstanceMap map[string]VpcInstanceInput

func (VpcInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcInstance)(nil)).Elem()
}

func (i VpcInstanceMap) ToVpcInstanceMapOutput() VpcInstanceMapOutput {
	return i.ToVpcInstanceMapOutputWithContext(context.Background())
}

func (i VpcInstanceMap) ToVpcInstanceMapOutputWithContext(ctx context.Context) VpcInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcInstanceMapOutput)
}

func (i VpcInstanceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpcInstance] {
	return pulumix.Output[map[string]*VpcInstance]{
		OutputState: i.ToVpcInstanceMapOutputWithContext(ctx).OutputState,
	}
}

type VpcInstanceOutput struct{ *pulumi.OutputState }

func (VpcInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcInstance)(nil)).Elem()
}

func (o VpcInstanceOutput) ToVpcInstanceOutput() VpcInstanceOutput {
	return o
}

func (o VpcInstanceOutput) ToVpcInstanceOutputWithContext(ctx context.Context) VpcInstanceOutput {
	return o
}

func (o VpcInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[*VpcInstance] {
	return pulumix.Output[*VpcInstance]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o VpcInstanceOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcInstance) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o VpcInstanceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcInstance) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type VpcInstanceArrayOutput struct{ *pulumi.OutputState }

func (VpcInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcInstance)(nil)).Elem()
}

func (o VpcInstanceArrayOutput) ToVpcInstanceArrayOutput() VpcInstanceArrayOutput {
	return o
}

func (o VpcInstanceArrayOutput) ToVpcInstanceArrayOutputWithContext(ctx context.Context) VpcInstanceArrayOutput {
	return o
}

func (o VpcInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VpcInstance] {
	return pulumix.Output[[]*VpcInstance]{
		OutputState: o.OutputState,
	}
}

func (o VpcInstanceArrayOutput) Index(i pulumi.IntInput) VpcInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcInstance {
		return vs[0].([]*VpcInstance)[vs[1].(int)]
	}).(VpcInstanceOutput)
}

type VpcInstanceMapOutput struct{ *pulumi.OutputState }

func (VpcInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcInstance)(nil)).Elem()
}

func (o VpcInstanceMapOutput) ToVpcInstanceMapOutput() VpcInstanceMapOutput {
	return o
}

func (o VpcInstanceMapOutput) ToVpcInstanceMapOutputWithContext(ctx context.Context) VpcInstanceMapOutput {
	return o
}

func (o VpcInstanceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpcInstance] {
	return pulumix.Output[map[string]*VpcInstance]{
		OutputState: o.OutputState,
	}
}

func (o VpcInstanceMapOutput) MapIndex(k pulumi.StringInput) VpcInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcInstance {
		return vs[0].(map[string]*VpcInstance)[vs[1].(string)]
	}).(VpcInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInstanceInput)(nil)).Elem(), &VpcInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInstanceArrayInput)(nil)).Elem(), VpcInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInstanceMapInput)(nil)).Elem(), VpcInstanceMap{})
	pulumi.RegisterOutputType(VpcInstanceOutput{})
	pulumi.RegisterOutputType(VpcInstanceArrayOutput{})
	pulumi.RegisterOutputType(VpcInstanceMapOutput{})
}
