// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the BGP Route Control configuration.
//
// - API Documentation: [bgpRtCtrl](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/bgp:RtCtrl/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewBgpRouteControl(ctx, "example", &nxos.BgpRouteControlArgs{
//				Asn:                pulumi.String("65001"),
//				EnforceFirstAs:     pulumi.String("disabled"),
//				FibAccelerate:      pulumi.String("enabled"),
//				LogNeighborChanges: pulumi.String("enabled"),
//				SuppressRoutes:     pulumi.String("disabled"),
//				Vrf:                pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/bgpRouteControl:BgpRouteControl example "sys/bgp/inst/dom-[default]/rtctrl"
//
// ```
type BgpRouteControl struct {
	pulumi.CustomResourceState

	// Autonomous system number.
	Asn pulumi.StringOutput `pulumi:"asn"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
	// `enabled`
	EnforceFirstAs pulumi.StringOutput `pulumi:"enforceFirstAs"`
	// Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
	// `enabled`, `disabled` - Default value: `disabled`
	FibAccelerate pulumi.StringOutput `pulumi:"fibAccelerate"`
	// Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
	LogNeighborChanges pulumi.StringOutput `pulumi:"logNeighborChanges"`
	// Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
	// - Choices: `enabled`, `disabled` - Default value: `enabled`
	SuppressRoutes pulumi.StringOutput `pulumi:"suppressRoutes"`
	// VRF name.
	Vrf pulumi.StringOutput `pulumi:"vrf"`
}

// NewBgpRouteControl registers a new resource with the given unique name, arguments, and options.
func NewBgpRouteControl(ctx *pulumi.Context,
	name string, args *BgpRouteControlArgs, opts ...pulumi.ResourceOption) (*BgpRouteControl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Asn == nil {
		return nil, errors.New("invalid value for required argument 'Asn'")
	}
	if args.Vrf == nil {
		return nil, errors.New("invalid value for required argument 'Vrf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BgpRouteControl
	err := ctx.RegisterResource("nxos:index/bgpRouteControl:BgpRouteControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBgpRouteControl gets an existing BgpRouteControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBgpRouteControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BgpRouteControlState, opts ...pulumi.ResourceOption) (*BgpRouteControl, error) {
	var resource BgpRouteControl
	err := ctx.ReadResource("nxos:index/bgpRouteControl:BgpRouteControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BgpRouteControl resources.
type bgpRouteControlState struct {
	// Autonomous system number.
	Asn *string `pulumi:"asn"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
	// `enabled`
	EnforceFirstAs *string `pulumi:"enforceFirstAs"`
	// Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
	// `enabled`, `disabled` - Default value: `disabled`
	FibAccelerate *string `pulumi:"fibAccelerate"`
	// Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
	LogNeighborChanges *string `pulumi:"logNeighborChanges"`
	// Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
	// - Choices: `enabled`, `disabled` - Default value: `enabled`
	SuppressRoutes *string `pulumi:"suppressRoutes"`
	// VRF name.
	Vrf *string `pulumi:"vrf"`
}

type BgpRouteControlState struct {
	// Autonomous system number.
	Asn pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
	// `enabled`
	EnforceFirstAs pulumi.StringPtrInput
	// Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
	// `enabled`, `disabled` - Default value: `disabled`
	FibAccelerate pulumi.StringPtrInput
	// Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
	LogNeighborChanges pulumi.StringPtrInput
	// Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
	// - Choices: `enabled`, `disabled` - Default value: `enabled`
	SuppressRoutes pulumi.StringPtrInput
	// VRF name.
	Vrf pulumi.StringPtrInput
}

func (BgpRouteControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpRouteControlState)(nil)).Elem()
}

type bgpRouteControlArgs struct {
	// Autonomous system number.
	Asn string `pulumi:"asn"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
	// `enabled`
	EnforceFirstAs *string `pulumi:"enforceFirstAs"`
	// Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
	// `enabled`, `disabled` - Default value: `disabled`
	FibAccelerate *string `pulumi:"fibAccelerate"`
	// Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
	LogNeighborChanges *string `pulumi:"logNeighborChanges"`
	// Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
	// - Choices: `enabled`, `disabled` - Default value: `enabled`
	SuppressRoutes *string `pulumi:"suppressRoutes"`
	// VRF name.
	Vrf string `pulumi:"vrf"`
}

// The set of arguments for constructing a BgpRouteControl resource.
type BgpRouteControlArgs struct {
	// Autonomous system number.
	Asn pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
	// `enabled`
	EnforceFirstAs pulumi.StringPtrInput
	// Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
	// `enabled`, `disabled` - Default value: `disabled`
	FibAccelerate pulumi.StringPtrInput
	// Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
	LogNeighborChanges pulumi.StringPtrInput
	// Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
	// - Choices: `enabled`, `disabled` - Default value: `enabled`
	SuppressRoutes pulumi.StringPtrInput
	// VRF name.
	Vrf pulumi.StringInput
}

func (BgpRouteControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpRouteControlArgs)(nil)).Elem()
}

type BgpRouteControlInput interface {
	pulumi.Input

	ToBgpRouteControlOutput() BgpRouteControlOutput
	ToBgpRouteControlOutputWithContext(ctx context.Context) BgpRouteControlOutput
}

func (*BgpRouteControl) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpRouteControl)(nil)).Elem()
}

func (i *BgpRouteControl) ToBgpRouteControlOutput() BgpRouteControlOutput {
	return i.ToBgpRouteControlOutputWithContext(context.Background())
}

func (i *BgpRouteControl) ToBgpRouteControlOutputWithContext(ctx context.Context) BgpRouteControlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpRouteControlOutput)
}

func (i *BgpRouteControl) ToOutput(ctx context.Context) pulumix.Output[*BgpRouteControl] {
	return pulumix.Output[*BgpRouteControl]{
		OutputState: i.ToBgpRouteControlOutputWithContext(ctx).OutputState,
	}
}

// BgpRouteControlArrayInput is an input type that accepts BgpRouteControlArray and BgpRouteControlArrayOutput values.
// You can construct a concrete instance of `BgpRouteControlArrayInput` via:
//
//	BgpRouteControlArray{ BgpRouteControlArgs{...} }
type BgpRouteControlArrayInput interface {
	pulumi.Input

	ToBgpRouteControlArrayOutput() BgpRouteControlArrayOutput
	ToBgpRouteControlArrayOutputWithContext(context.Context) BgpRouteControlArrayOutput
}

type BgpRouteControlArray []BgpRouteControlInput

func (BgpRouteControlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BgpRouteControl)(nil)).Elem()
}

func (i BgpRouteControlArray) ToBgpRouteControlArrayOutput() BgpRouteControlArrayOutput {
	return i.ToBgpRouteControlArrayOutputWithContext(context.Background())
}

func (i BgpRouteControlArray) ToBgpRouteControlArrayOutputWithContext(ctx context.Context) BgpRouteControlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpRouteControlArrayOutput)
}

func (i BgpRouteControlArray) ToOutput(ctx context.Context) pulumix.Output[[]*BgpRouteControl] {
	return pulumix.Output[[]*BgpRouteControl]{
		OutputState: i.ToBgpRouteControlArrayOutputWithContext(ctx).OutputState,
	}
}

// BgpRouteControlMapInput is an input type that accepts BgpRouteControlMap and BgpRouteControlMapOutput values.
// You can construct a concrete instance of `BgpRouteControlMapInput` via:
//
//	BgpRouteControlMap{ "key": BgpRouteControlArgs{...} }
type BgpRouteControlMapInput interface {
	pulumi.Input

	ToBgpRouteControlMapOutput() BgpRouteControlMapOutput
	ToBgpRouteControlMapOutputWithContext(context.Context) BgpRouteControlMapOutput
}

type BgpRouteControlMap map[string]BgpRouteControlInput

func (BgpRouteControlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BgpRouteControl)(nil)).Elem()
}

func (i BgpRouteControlMap) ToBgpRouteControlMapOutput() BgpRouteControlMapOutput {
	return i.ToBgpRouteControlMapOutputWithContext(context.Background())
}

func (i BgpRouteControlMap) ToBgpRouteControlMapOutputWithContext(ctx context.Context) BgpRouteControlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpRouteControlMapOutput)
}

func (i BgpRouteControlMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*BgpRouteControl] {
	return pulumix.Output[map[string]*BgpRouteControl]{
		OutputState: i.ToBgpRouteControlMapOutputWithContext(ctx).OutputState,
	}
}

type BgpRouteControlOutput struct{ *pulumi.OutputState }

func (BgpRouteControlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpRouteControl)(nil)).Elem()
}

func (o BgpRouteControlOutput) ToBgpRouteControlOutput() BgpRouteControlOutput {
	return o
}

func (o BgpRouteControlOutput) ToBgpRouteControlOutputWithContext(ctx context.Context) BgpRouteControlOutput {
	return o
}

func (o BgpRouteControlOutput) ToOutput(ctx context.Context) pulumix.Output[*BgpRouteControl] {
	return pulumix.Output[*BgpRouteControl]{
		OutputState: o.OutputState,
	}
}

// Autonomous system number.
func (o BgpRouteControlOutput) Asn() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpRouteControl) pulumi.StringOutput { return v.Asn }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o BgpRouteControlOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpRouteControl) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Enforce First AS For Ebgp. Can be configured only for VRF default. - Choices: `enabled`, `disabled` - Default value:
// `enabled`
func (o BgpRouteControlOutput) EnforceFirstAs() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpRouteControl) pulumi.StringOutput { return v.EnforceFirstAs }).(pulumi.StringOutput)
}

// Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default. - Choices:
// `enabled`, `disabled` - Default value: `disabled`
func (o BgpRouteControlOutput) FibAccelerate() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpRouteControl) pulumi.StringOutput { return v.FibAccelerate }).(pulumi.StringOutput)
}

// Log Neighbor Changes. - Choices: `enabled`, `disabled` - Default value: `disabled`
func (o BgpRouteControlOutput) LogNeighborChanges() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpRouteControl) pulumi.StringOutput { return v.LogNeighborChanges }).(pulumi.StringOutput)
}

// Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
// - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o BgpRouteControlOutput) SuppressRoutes() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpRouteControl) pulumi.StringOutput { return v.SuppressRoutes }).(pulumi.StringOutput)
}

// VRF name.
func (o BgpRouteControlOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v *BgpRouteControl) pulumi.StringOutput { return v.Vrf }).(pulumi.StringOutput)
}

type BgpRouteControlArrayOutput struct{ *pulumi.OutputState }

func (BgpRouteControlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BgpRouteControl)(nil)).Elem()
}

func (o BgpRouteControlArrayOutput) ToBgpRouteControlArrayOutput() BgpRouteControlArrayOutput {
	return o
}

func (o BgpRouteControlArrayOutput) ToBgpRouteControlArrayOutputWithContext(ctx context.Context) BgpRouteControlArrayOutput {
	return o
}

func (o BgpRouteControlArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*BgpRouteControl] {
	return pulumix.Output[[]*BgpRouteControl]{
		OutputState: o.OutputState,
	}
}

func (o BgpRouteControlArrayOutput) Index(i pulumi.IntInput) BgpRouteControlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BgpRouteControl {
		return vs[0].([]*BgpRouteControl)[vs[1].(int)]
	}).(BgpRouteControlOutput)
}

type BgpRouteControlMapOutput struct{ *pulumi.OutputState }

func (BgpRouteControlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BgpRouteControl)(nil)).Elem()
}

func (o BgpRouteControlMapOutput) ToBgpRouteControlMapOutput() BgpRouteControlMapOutput {
	return o
}

func (o BgpRouteControlMapOutput) ToBgpRouteControlMapOutputWithContext(ctx context.Context) BgpRouteControlMapOutput {
	return o
}

func (o BgpRouteControlMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*BgpRouteControl] {
	return pulumix.Output[map[string]*BgpRouteControl]{
		OutputState: o.OutputState,
	}
}

func (o BgpRouteControlMapOutput) MapIndex(k pulumi.StringInput) BgpRouteControlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BgpRouteControl {
		return vs[0].(map[string]*BgpRouteControl)[vs[1].(string)]
	}).(BgpRouteControlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BgpRouteControlInput)(nil)).Elem(), &BgpRouteControl{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpRouteControlArrayInput)(nil)).Elem(), BgpRouteControlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpRouteControlMapInput)(nil)).Elem(), BgpRouteControlMap{})
	pulumi.RegisterOutputType(BgpRouteControlOutput{})
	pulumi.RegisterOutputType(BgpRouteControlArrayOutput{})
	pulumi.RegisterOutputType(BgpRouteControlMapOutput{})
}
