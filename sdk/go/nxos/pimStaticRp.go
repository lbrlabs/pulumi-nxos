// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the PIM Static RP configuration.
//
// - API Documentation: [pimStaticRP](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:StaticRP/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewPimStaticRp(ctx, "example", &nxos.PimStaticRpArgs{
//				Address: pulumi.String("1.2.3.4"),
//				VrfName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/pimStaticRp:PimStaticRp example "sys/pim/inst/dom-[default]/staticrp/rp-[1.2.3.4]"
//
// ```
type PimStaticRp struct {
	pulumi.CustomResourceState

	// Address.
	Address pulumi.StringOutput `pulumi:"address"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// VRF name.
	VrfName pulumi.StringOutput `pulumi:"vrfName"`
}

// NewPimStaticRp registers a new resource with the given unique name, arguments, and options.
func NewPimStaticRp(ctx *pulumi.Context,
	name string, args *PimStaticRpArgs, opts ...pulumi.ResourceOption) (*PimStaticRp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.VrfName == nil {
		return nil, errors.New("invalid value for required argument 'VrfName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PimStaticRp
	err := ctx.RegisterResource("nxos:index/pimStaticRp:PimStaticRp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPimStaticRp gets an existing PimStaticRp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPimStaticRp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PimStaticRpState, opts ...pulumi.ResourceOption) (*PimStaticRp, error) {
	var resource PimStaticRp
	err := ctx.ReadResource("nxos:index/pimStaticRp:PimStaticRp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PimStaticRp resources.
type pimStaticRpState struct {
	// Address.
	Address *string `pulumi:"address"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// VRF name.
	VrfName *string `pulumi:"vrfName"`
}

type PimStaticRpState struct {
	// Address.
	Address pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// VRF name.
	VrfName pulumi.StringPtrInput
}

func (PimStaticRpState) ElementType() reflect.Type {
	return reflect.TypeOf((*pimStaticRpState)(nil)).Elem()
}

type pimStaticRpArgs struct {
	// Address.
	Address string `pulumi:"address"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// VRF name.
	VrfName string `pulumi:"vrfName"`
}

// The set of arguments for constructing a PimStaticRp resource.
type PimStaticRpArgs struct {
	// Address.
	Address pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// VRF name.
	VrfName pulumi.StringInput
}

func (PimStaticRpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pimStaticRpArgs)(nil)).Elem()
}

type PimStaticRpInput interface {
	pulumi.Input

	ToPimStaticRpOutput() PimStaticRpOutput
	ToPimStaticRpOutputWithContext(ctx context.Context) PimStaticRpOutput
}

func (*PimStaticRp) ElementType() reflect.Type {
	return reflect.TypeOf((**PimStaticRp)(nil)).Elem()
}

func (i *PimStaticRp) ToPimStaticRpOutput() PimStaticRpOutput {
	return i.ToPimStaticRpOutputWithContext(context.Background())
}

func (i *PimStaticRp) ToPimStaticRpOutputWithContext(ctx context.Context) PimStaticRpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimStaticRpOutput)
}

func (i *PimStaticRp) ToOutput(ctx context.Context) pulumix.Output[*PimStaticRp] {
	return pulumix.Output[*PimStaticRp]{
		OutputState: i.ToPimStaticRpOutputWithContext(ctx).OutputState,
	}
}

// PimStaticRpArrayInput is an input type that accepts PimStaticRpArray and PimStaticRpArrayOutput values.
// You can construct a concrete instance of `PimStaticRpArrayInput` via:
//
//	PimStaticRpArray{ PimStaticRpArgs{...} }
type PimStaticRpArrayInput interface {
	pulumi.Input

	ToPimStaticRpArrayOutput() PimStaticRpArrayOutput
	ToPimStaticRpArrayOutputWithContext(context.Context) PimStaticRpArrayOutput
}

type PimStaticRpArray []PimStaticRpInput

func (PimStaticRpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PimStaticRp)(nil)).Elem()
}

func (i PimStaticRpArray) ToPimStaticRpArrayOutput() PimStaticRpArrayOutput {
	return i.ToPimStaticRpArrayOutputWithContext(context.Background())
}

func (i PimStaticRpArray) ToPimStaticRpArrayOutputWithContext(ctx context.Context) PimStaticRpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimStaticRpArrayOutput)
}

func (i PimStaticRpArray) ToOutput(ctx context.Context) pulumix.Output[[]*PimStaticRp] {
	return pulumix.Output[[]*PimStaticRp]{
		OutputState: i.ToPimStaticRpArrayOutputWithContext(ctx).OutputState,
	}
}

// PimStaticRpMapInput is an input type that accepts PimStaticRpMap and PimStaticRpMapOutput values.
// You can construct a concrete instance of `PimStaticRpMapInput` via:
//
//	PimStaticRpMap{ "key": PimStaticRpArgs{...} }
type PimStaticRpMapInput interface {
	pulumi.Input

	ToPimStaticRpMapOutput() PimStaticRpMapOutput
	ToPimStaticRpMapOutputWithContext(context.Context) PimStaticRpMapOutput
}

type PimStaticRpMap map[string]PimStaticRpInput

func (PimStaticRpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PimStaticRp)(nil)).Elem()
}

func (i PimStaticRpMap) ToPimStaticRpMapOutput() PimStaticRpMapOutput {
	return i.ToPimStaticRpMapOutputWithContext(context.Background())
}

func (i PimStaticRpMap) ToPimStaticRpMapOutputWithContext(ctx context.Context) PimStaticRpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimStaticRpMapOutput)
}

func (i PimStaticRpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PimStaticRp] {
	return pulumix.Output[map[string]*PimStaticRp]{
		OutputState: i.ToPimStaticRpMapOutputWithContext(ctx).OutputState,
	}
}

type PimStaticRpOutput struct{ *pulumi.OutputState }

func (PimStaticRpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PimStaticRp)(nil)).Elem()
}

func (o PimStaticRpOutput) ToPimStaticRpOutput() PimStaticRpOutput {
	return o
}

func (o PimStaticRpOutput) ToPimStaticRpOutputWithContext(ctx context.Context) PimStaticRpOutput {
	return o
}

func (o PimStaticRpOutput) ToOutput(ctx context.Context) pulumix.Output[*PimStaticRp] {
	return pulumix.Output[*PimStaticRp]{
		OutputState: o.OutputState,
	}
}

// Address.
func (o PimStaticRpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *PimStaticRp) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o PimStaticRpOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PimStaticRp) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// VRF name.
func (o PimStaticRpOutput) VrfName() pulumi.StringOutput {
	return o.ApplyT(func(v *PimStaticRp) pulumi.StringOutput { return v.VrfName }).(pulumi.StringOutput)
}

type PimStaticRpArrayOutput struct{ *pulumi.OutputState }

func (PimStaticRpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PimStaticRp)(nil)).Elem()
}

func (o PimStaticRpArrayOutput) ToPimStaticRpArrayOutput() PimStaticRpArrayOutput {
	return o
}

func (o PimStaticRpArrayOutput) ToPimStaticRpArrayOutputWithContext(ctx context.Context) PimStaticRpArrayOutput {
	return o
}

func (o PimStaticRpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PimStaticRp] {
	return pulumix.Output[[]*PimStaticRp]{
		OutputState: o.OutputState,
	}
}

func (o PimStaticRpArrayOutput) Index(i pulumi.IntInput) PimStaticRpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PimStaticRp {
		return vs[0].([]*PimStaticRp)[vs[1].(int)]
	}).(PimStaticRpOutput)
}

type PimStaticRpMapOutput struct{ *pulumi.OutputState }

func (PimStaticRpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PimStaticRp)(nil)).Elem()
}

func (o PimStaticRpMapOutput) ToPimStaticRpMapOutput() PimStaticRpMapOutput {
	return o
}

func (o PimStaticRpMapOutput) ToPimStaticRpMapOutputWithContext(ctx context.Context) PimStaticRpMapOutput {
	return o
}

func (o PimStaticRpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PimStaticRp] {
	return pulumix.Output[map[string]*PimStaticRp]{
		OutputState: o.OutputState,
	}
}

func (o PimStaticRpMapOutput) MapIndex(k pulumi.StringInput) PimStaticRpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PimStaticRp {
		return vs[0].(map[string]*PimStaticRp)[vs[1].(string)]
	}).(PimStaticRpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PimStaticRpInput)(nil)).Elem(), &PimStaticRp{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimStaticRpArrayInput)(nil)).Elem(), PimStaticRpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimStaticRpMapInput)(nil)).Elem(), PimStaticRpMap{})
	pulumi.RegisterOutputType(PimStaticRpOutput{})
	pulumi.RegisterOutputType(PimStaticRpArrayOutput{})
	pulumi.RegisterOutputType(PimStaticRpMapOutput{})
}
