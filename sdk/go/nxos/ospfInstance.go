// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the OSPF instance configuration.
//
// - API Documentation: [ospfInst](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:Inst/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewOspfInstance(ctx, "example", &nxos.OspfInstanceArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/ospfInstance:OspfInstance example "sys/ospf/inst-[OSPF1]"
//
// ```
type OspfInstance struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// OSPF instance name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewOspfInstance registers a new resource with the given unique name, arguments, and options.
func NewOspfInstance(ctx *pulumi.Context,
	name string, args *OspfInstanceArgs, opts ...pulumi.ResourceOption) (*OspfInstance, error) {
	if args == nil {
		args = &OspfInstanceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OspfInstance
	err := ctx.RegisterResource("nxos:index/ospfInstance:OspfInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOspfInstance gets an existing OspfInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOspfInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OspfInstanceState, opts ...pulumi.ResourceOption) (*OspfInstance, error) {
	var resource OspfInstance
	err := ctx.ReadResource("nxos:index/ospfInstance:OspfInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OspfInstance resources.
type ospfInstanceState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// OSPF instance name.
	Name *string `pulumi:"name"`
}

type OspfInstanceState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// OSPF instance name.
	Name pulumi.StringPtrInput
}

func (OspfInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ospfInstanceState)(nil)).Elem()
}

type ospfInstanceArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// OSPF instance name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a OspfInstance resource.
type OspfInstanceArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// OSPF instance name.
	Name pulumi.StringPtrInput
}

func (OspfInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ospfInstanceArgs)(nil)).Elem()
}

type OspfInstanceInput interface {
	pulumi.Input

	ToOspfInstanceOutput() OspfInstanceOutput
	ToOspfInstanceOutputWithContext(ctx context.Context) OspfInstanceOutput
}

func (*OspfInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**OspfInstance)(nil)).Elem()
}

func (i *OspfInstance) ToOspfInstanceOutput() OspfInstanceOutput {
	return i.ToOspfInstanceOutputWithContext(context.Background())
}

func (i *OspfInstance) ToOspfInstanceOutputWithContext(ctx context.Context) OspfInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfInstanceOutput)
}

func (i *OspfInstance) ToOutput(ctx context.Context) pulumix.Output[*OspfInstance] {
	return pulumix.Output[*OspfInstance]{
		OutputState: i.ToOspfInstanceOutputWithContext(ctx).OutputState,
	}
}

// OspfInstanceArrayInput is an input type that accepts OspfInstanceArray and OspfInstanceArrayOutput values.
// You can construct a concrete instance of `OspfInstanceArrayInput` via:
//
//	OspfInstanceArray{ OspfInstanceArgs{...} }
type OspfInstanceArrayInput interface {
	pulumi.Input

	ToOspfInstanceArrayOutput() OspfInstanceArrayOutput
	ToOspfInstanceArrayOutputWithContext(context.Context) OspfInstanceArrayOutput
}

type OspfInstanceArray []OspfInstanceInput

func (OspfInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OspfInstance)(nil)).Elem()
}

func (i OspfInstanceArray) ToOspfInstanceArrayOutput() OspfInstanceArrayOutput {
	return i.ToOspfInstanceArrayOutputWithContext(context.Background())
}

func (i OspfInstanceArray) ToOspfInstanceArrayOutputWithContext(ctx context.Context) OspfInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfInstanceArrayOutput)
}

func (i OspfInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]*OspfInstance] {
	return pulumix.Output[[]*OspfInstance]{
		OutputState: i.ToOspfInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

// OspfInstanceMapInput is an input type that accepts OspfInstanceMap and OspfInstanceMapOutput values.
// You can construct a concrete instance of `OspfInstanceMapInput` via:
//
//	OspfInstanceMap{ "key": OspfInstanceArgs{...} }
type OspfInstanceMapInput interface {
	pulumi.Input

	ToOspfInstanceMapOutput() OspfInstanceMapOutput
	ToOspfInstanceMapOutputWithContext(context.Context) OspfInstanceMapOutput
}

type OspfInstanceMap map[string]OspfInstanceInput

func (OspfInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OspfInstance)(nil)).Elem()
}

func (i OspfInstanceMap) ToOspfInstanceMapOutput() OspfInstanceMapOutput {
	return i.ToOspfInstanceMapOutputWithContext(context.Background())
}

func (i OspfInstanceMap) ToOspfInstanceMapOutputWithContext(ctx context.Context) OspfInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfInstanceMapOutput)
}

func (i OspfInstanceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OspfInstance] {
	return pulumix.Output[map[string]*OspfInstance]{
		OutputState: i.ToOspfInstanceMapOutputWithContext(ctx).OutputState,
	}
}

type OspfInstanceOutput struct{ *pulumi.OutputState }

func (OspfInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OspfInstance)(nil)).Elem()
}

func (o OspfInstanceOutput) ToOspfInstanceOutput() OspfInstanceOutput {
	return o
}

func (o OspfInstanceOutput) ToOspfInstanceOutputWithContext(ctx context.Context) OspfInstanceOutput {
	return o
}

func (o OspfInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[*OspfInstance] {
	return pulumix.Output[*OspfInstance]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o OspfInstanceOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfInstance) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o OspfInstanceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OspfInstance) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// OSPF instance name.
func (o OspfInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type OspfInstanceArrayOutput struct{ *pulumi.OutputState }

func (OspfInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OspfInstance)(nil)).Elem()
}

func (o OspfInstanceArrayOutput) ToOspfInstanceArrayOutput() OspfInstanceArrayOutput {
	return o
}

func (o OspfInstanceArrayOutput) ToOspfInstanceArrayOutputWithContext(ctx context.Context) OspfInstanceArrayOutput {
	return o
}

func (o OspfInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OspfInstance] {
	return pulumix.Output[[]*OspfInstance]{
		OutputState: o.OutputState,
	}
}

func (o OspfInstanceArrayOutput) Index(i pulumi.IntInput) OspfInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OspfInstance {
		return vs[0].([]*OspfInstance)[vs[1].(int)]
	}).(OspfInstanceOutput)
}

type OspfInstanceMapOutput struct{ *pulumi.OutputState }

func (OspfInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OspfInstance)(nil)).Elem()
}

func (o OspfInstanceMapOutput) ToOspfInstanceMapOutput() OspfInstanceMapOutput {
	return o
}

func (o OspfInstanceMapOutput) ToOspfInstanceMapOutputWithContext(ctx context.Context) OspfInstanceMapOutput {
	return o
}

func (o OspfInstanceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OspfInstance] {
	return pulumix.Output[map[string]*OspfInstance]{
		OutputState: o.OutputState,
	}
}

func (o OspfInstanceMapOutput) MapIndex(k pulumi.StringInput) OspfInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OspfInstance {
		return vs[0].(map[string]*OspfInstance)[vs[1].(string)]
	}).(OspfInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OspfInstanceInput)(nil)).Elem(), &OspfInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfInstanceArrayInput)(nil)).Elem(), OspfInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfInstanceMapInput)(nil)).Elem(), OspfInstanceMap{})
	pulumi.RegisterOutputType(OspfInstanceOutput{})
	pulumi.RegisterOutputType(OspfInstanceArrayOutput{})
	pulumi.RegisterOutputType(OspfInstanceMapOutput{})
}
