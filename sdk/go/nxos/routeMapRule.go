// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage a Route-Map Rule configuration.
//
// - API Documentation: [rtmapRule](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtmap:Rule/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewRouteMapRule(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/routeMapRule:RouteMapRule example "sys/rpm/rtmap-[RULE1]"
//
// ```
type RouteMapRule struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Route-Map Rule name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRouteMapRule registers a new resource with the given unique name, arguments, and options.
func NewRouteMapRule(ctx *pulumi.Context,
	name string, args *RouteMapRuleArgs, opts ...pulumi.ResourceOption) (*RouteMapRule, error) {
	if args == nil {
		args = &RouteMapRuleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteMapRule
	err := ctx.RegisterResource("nxos:index/routeMapRule:RouteMapRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteMapRule gets an existing RouteMapRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteMapRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteMapRuleState, opts ...pulumi.ResourceOption) (*RouteMapRule, error) {
	var resource RouteMapRule
	err := ctx.ReadResource("nxos:index/routeMapRule:RouteMapRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteMapRule resources.
type routeMapRuleState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route-Map Rule name.
	Name *string `pulumi:"name"`
}

type RouteMapRuleState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route-Map Rule name.
	Name pulumi.StringPtrInput
}

func (RouteMapRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeMapRuleState)(nil)).Elem()
}

type routeMapRuleArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route-Map Rule name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RouteMapRule resource.
type RouteMapRuleArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route-Map Rule name.
	Name pulumi.StringPtrInput
}

func (RouteMapRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeMapRuleArgs)(nil)).Elem()
}

type RouteMapRuleInput interface {
	pulumi.Input

	ToRouteMapRuleOutput() RouteMapRuleOutput
	ToRouteMapRuleOutputWithContext(ctx context.Context) RouteMapRuleOutput
}

func (*RouteMapRule) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteMapRule)(nil)).Elem()
}

func (i *RouteMapRule) ToRouteMapRuleOutput() RouteMapRuleOutput {
	return i.ToRouteMapRuleOutputWithContext(context.Background())
}

func (i *RouteMapRule) ToRouteMapRuleOutputWithContext(ctx context.Context) RouteMapRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapRuleOutput)
}

func (i *RouteMapRule) ToOutput(ctx context.Context) pulumix.Output[*RouteMapRule] {
	return pulumix.Output[*RouteMapRule]{
		OutputState: i.ToRouteMapRuleOutputWithContext(ctx).OutputState,
	}
}

// RouteMapRuleArrayInput is an input type that accepts RouteMapRuleArray and RouteMapRuleArrayOutput values.
// You can construct a concrete instance of `RouteMapRuleArrayInput` via:
//
//	RouteMapRuleArray{ RouteMapRuleArgs{...} }
type RouteMapRuleArrayInput interface {
	pulumi.Input

	ToRouteMapRuleArrayOutput() RouteMapRuleArrayOutput
	ToRouteMapRuleArrayOutputWithContext(context.Context) RouteMapRuleArrayOutput
}

type RouteMapRuleArray []RouteMapRuleInput

func (RouteMapRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteMapRule)(nil)).Elem()
}

func (i RouteMapRuleArray) ToRouteMapRuleArrayOutput() RouteMapRuleArrayOutput {
	return i.ToRouteMapRuleArrayOutputWithContext(context.Background())
}

func (i RouteMapRuleArray) ToRouteMapRuleArrayOutputWithContext(ctx context.Context) RouteMapRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapRuleArrayOutput)
}

func (i RouteMapRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]*RouteMapRule] {
	return pulumix.Output[[]*RouteMapRule]{
		OutputState: i.ToRouteMapRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// RouteMapRuleMapInput is an input type that accepts RouteMapRuleMap and RouteMapRuleMapOutput values.
// You can construct a concrete instance of `RouteMapRuleMapInput` via:
//
//	RouteMapRuleMap{ "key": RouteMapRuleArgs{...} }
type RouteMapRuleMapInput interface {
	pulumi.Input

	ToRouteMapRuleMapOutput() RouteMapRuleMapOutput
	ToRouteMapRuleMapOutputWithContext(context.Context) RouteMapRuleMapOutput
}

type RouteMapRuleMap map[string]RouteMapRuleInput

func (RouteMapRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteMapRule)(nil)).Elem()
}

func (i RouteMapRuleMap) ToRouteMapRuleMapOutput() RouteMapRuleMapOutput {
	return i.ToRouteMapRuleMapOutputWithContext(context.Background())
}

func (i RouteMapRuleMap) ToRouteMapRuleMapOutputWithContext(ctx context.Context) RouteMapRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapRuleMapOutput)
}

func (i RouteMapRuleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouteMapRule] {
	return pulumix.Output[map[string]*RouteMapRule]{
		OutputState: i.ToRouteMapRuleMapOutputWithContext(ctx).OutputState,
	}
}

type RouteMapRuleOutput struct{ *pulumi.OutputState }

func (RouteMapRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteMapRule)(nil)).Elem()
}

func (o RouteMapRuleOutput) ToRouteMapRuleOutput() RouteMapRuleOutput {
	return o
}

func (o RouteMapRuleOutput) ToRouteMapRuleOutputWithContext(ctx context.Context) RouteMapRuleOutput {
	return o
}

func (o RouteMapRuleOutput) ToOutput(ctx context.Context) pulumix.Output[*RouteMapRule] {
	return pulumix.Output[*RouteMapRule]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o RouteMapRuleOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteMapRule) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Route-Map Rule name.
func (o RouteMapRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteMapRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type RouteMapRuleArrayOutput struct{ *pulumi.OutputState }

func (RouteMapRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteMapRule)(nil)).Elem()
}

func (o RouteMapRuleArrayOutput) ToRouteMapRuleArrayOutput() RouteMapRuleArrayOutput {
	return o
}

func (o RouteMapRuleArrayOutput) ToRouteMapRuleArrayOutputWithContext(ctx context.Context) RouteMapRuleArrayOutput {
	return o
}

func (o RouteMapRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RouteMapRule] {
	return pulumix.Output[[]*RouteMapRule]{
		OutputState: o.OutputState,
	}
}

func (o RouteMapRuleArrayOutput) Index(i pulumi.IntInput) RouteMapRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteMapRule {
		return vs[0].([]*RouteMapRule)[vs[1].(int)]
	}).(RouteMapRuleOutput)
}

type RouteMapRuleMapOutput struct{ *pulumi.OutputState }

func (RouteMapRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteMapRule)(nil)).Elem()
}

func (o RouteMapRuleMapOutput) ToRouteMapRuleMapOutput() RouteMapRuleMapOutput {
	return o
}

func (o RouteMapRuleMapOutput) ToRouteMapRuleMapOutputWithContext(ctx context.Context) RouteMapRuleMapOutput {
	return o
}

func (o RouteMapRuleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouteMapRule] {
	return pulumix.Output[map[string]*RouteMapRule]{
		OutputState: o.OutputState,
	}
}

func (o RouteMapRuleMapOutput) MapIndex(k pulumi.StringInput) RouteMapRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteMapRule {
		return vs[0].(map[string]*RouteMapRule)[vs[1].(string)]
	}).(RouteMapRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapRuleInput)(nil)).Elem(), &RouteMapRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapRuleArrayInput)(nil)).Elem(), RouteMapRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapRuleMapInput)(nil)).Elem(), RouteMapRuleMap{})
	pulumi.RegisterOutputType(RouteMapRuleOutput{})
	pulumi.RegisterOutputType(RouteMapRuleArrayOutput{})
	pulumi.RegisterOutputType(RouteMapRuleMapOutput{})
}
