// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the OSPF VRF configuration.
//
// - API Documentation: [ospfDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:Dom/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupOspfVrf(ctx, &nxos.LookupOspfVrfArgs{
//				InstanceName: "OSPF1",
//				Name:         "VRF1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupOspfVrf(ctx *pulumi.Context, args *LookupOspfVrfArgs, opts ...pulumi.InvokeOption) (*LookupOspfVrfResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOspfVrfResult
	err := ctx.Invoke("nxos:index/getOspfVrf:getOspfVrf", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOspfVrf.
type LookupOspfVrfArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// OSPF instance name.
	InstanceName string `pulumi:"instanceName"`
	// VRF name.
	Name string `pulumi:"name"`
}

// A collection of values returned by getOspfVrf.
type LookupOspfVrfResult struct {
	// Administrative state.
	AdminState string `pulumi:"adminState"`
	// Bandwidth reference value.
	BandwidthReference int `pulumi:"bandwidthReference"`
	// Bandwidth reference unit.
	BanwidthReferenceUnit string `pulumi:"banwidthReferenceUnit"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Administrative distance preference.
	Distance int `pulumi:"distance"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
	// OSPF instance name.
	InstanceName string `pulumi:"instanceName"`
	// VRF name.
	Name string `pulumi:"name"`
	// Router ID.
	RouterId string `pulumi:"routerId"`
}

func LookupOspfVrfOutput(ctx *pulumi.Context, args LookupOspfVrfOutputArgs, opts ...pulumi.InvokeOption) LookupOspfVrfResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupOspfVrfResult, error) {
			args := v.(LookupOspfVrfArgs)
			r, err := LookupOspfVrf(ctx, &args, opts...)
			var s LookupOspfVrfResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupOspfVrfResultOutput)
}

// A collection of arguments for invoking getOspfVrf.
type LookupOspfVrfOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// OSPF instance name.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// VRF name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupOspfVrfOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOspfVrfArgs)(nil)).Elem()
}

// A collection of values returned by getOspfVrf.
type LookupOspfVrfResultOutput struct{ *pulumi.OutputState }

func (LookupOspfVrfResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOspfVrfResult)(nil)).Elem()
}

func (o LookupOspfVrfResultOutput) ToLookupOspfVrfResultOutput() LookupOspfVrfResultOutput {
	return o
}

func (o LookupOspfVrfResultOutput) ToLookupOspfVrfResultOutputWithContext(ctx context.Context) LookupOspfVrfResultOutput {
	return o
}

func (o LookupOspfVrfResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupOspfVrfResult] {
	return pulumix.Output[LookupOspfVrfResult]{
		OutputState: o.OutputState,
	}
}

// Administrative state.
func (o LookupOspfVrfResultOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOspfVrfResult) string { return v.AdminState }).(pulumi.StringOutput)
}

// Bandwidth reference value.
func (o LookupOspfVrfResultOutput) BandwidthReference() pulumi.IntOutput {
	return o.ApplyT(func(v LookupOspfVrfResult) int { return v.BandwidthReference }).(pulumi.IntOutput)
}

// Bandwidth reference unit.
func (o LookupOspfVrfResultOutput) BanwidthReferenceUnit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOspfVrfResult) string { return v.BanwidthReferenceUnit }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupOspfVrfResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOspfVrfResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Administrative distance preference.
func (o LookupOspfVrfResultOutput) Distance() pulumi.IntOutput {
	return o.ApplyT(func(v LookupOspfVrfResult) int { return v.Distance }).(pulumi.IntOutput)
}

// The distinguished name of the object.
func (o LookupOspfVrfResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOspfVrfResult) string { return v.Id }).(pulumi.StringOutput)
}

// OSPF instance name.
func (o LookupOspfVrfResultOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOspfVrfResult) string { return v.InstanceName }).(pulumi.StringOutput)
}

// VRF name.
func (o LookupOspfVrfResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOspfVrfResult) string { return v.Name }).(pulumi.StringOutput)
}

// Router ID.
func (o LookupOspfVrfResultOutput) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOspfVrfResult) string { return v.RouterId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOspfVrfResultOutput{})
}
