// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage a Match Route Prefix List in  Route-Map Rule Entry configuration.
//
// - API Documentation: [rtmapRsRtDstAtt](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtmap:RsRtDstAtt/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewRouteMapRuleEntryMatchRoutePrefixList(ctx, "example", &nxos.RouteMapRuleEntryMatchRoutePrefixListArgs{
//				Order:        pulumi.Int(10),
//				PrefixListDn: pulumi.String("sys/rpm/pfxlistv4-[LIST1]"),
//				RuleName:     pulumi.String("RULE1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/routeMapRuleEntryMatchRoutePrefixList:RouteMapRuleEntryMatchRoutePrefixList example "sys/rpm/rtmap-[RULE1]/ent-[10]/mrtdst/rsrtDstAtt-[sys/rpm/pfxlistv4-[LIST1]]"
//
// ```
type RouteMapRuleEntryMatchRoutePrefixList struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Route-Map Rule Entry order. - Range: `0`-`65535`
	Order pulumi.IntOutput `pulumi:"order"`
	// DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
	PrefixListDn pulumi.StringOutput `pulumi:"prefixListDn"`
	// Route Map rule name.
	RuleName pulumi.StringOutput `pulumi:"ruleName"`
}

// NewRouteMapRuleEntryMatchRoutePrefixList registers a new resource with the given unique name, arguments, and options.
func NewRouteMapRuleEntryMatchRoutePrefixList(ctx *pulumi.Context,
	name string, args *RouteMapRuleEntryMatchRoutePrefixListArgs, opts ...pulumi.ResourceOption) (*RouteMapRuleEntryMatchRoutePrefixList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Order == nil {
		return nil, errors.New("invalid value for required argument 'Order'")
	}
	if args.PrefixListDn == nil {
		return nil, errors.New("invalid value for required argument 'PrefixListDn'")
	}
	if args.RuleName == nil {
		return nil, errors.New("invalid value for required argument 'RuleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteMapRuleEntryMatchRoutePrefixList
	err := ctx.RegisterResource("nxos:index/routeMapRuleEntryMatchRoutePrefixList:RouteMapRuleEntryMatchRoutePrefixList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteMapRuleEntryMatchRoutePrefixList gets an existing RouteMapRuleEntryMatchRoutePrefixList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteMapRuleEntryMatchRoutePrefixList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteMapRuleEntryMatchRoutePrefixListState, opts ...pulumi.ResourceOption) (*RouteMapRuleEntryMatchRoutePrefixList, error) {
	var resource RouteMapRuleEntryMatchRoutePrefixList
	err := ctx.ReadResource("nxos:index/routeMapRuleEntryMatchRoutePrefixList:RouteMapRuleEntryMatchRoutePrefixList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteMapRuleEntryMatchRoutePrefixList resources.
type routeMapRuleEntryMatchRoutePrefixListState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route-Map Rule Entry order. - Range: `0`-`65535`
	Order *int `pulumi:"order"`
	// DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
	PrefixListDn *string `pulumi:"prefixListDn"`
	// Route Map rule name.
	RuleName *string `pulumi:"ruleName"`
}

type RouteMapRuleEntryMatchRoutePrefixListState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route-Map Rule Entry order. - Range: `0`-`65535`
	Order pulumi.IntPtrInput
	// DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
	PrefixListDn pulumi.StringPtrInput
	// Route Map rule name.
	RuleName pulumi.StringPtrInput
}

func (RouteMapRuleEntryMatchRoutePrefixListState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeMapRuleEntryMatchRoutePrefixListState)(nil)).Elem()
}

type routeMapRuleEntryMatchRoutePrefixListArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route-Map Rule Entry order. - Range: `0`-`65535`
	Order int `pulumi:"order"`
	// DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
	PrefixListDn string `pulumi:"prefixListDn"`
	// Route Map rule name.
	RuleName string `pulumi:"ruleName"`
}

// The set of arguments for constructing a RouteMapRuleEntryMatchRoutePrefixList resource.
type RouteMapRuleEntryMatchRoutePrefixListArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route-Map Rule Entry order. - Range: `0`-`65535`
	Order pulumi.IntInput
	// DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
	PrefixListDn pulumi.StringInput
	// Route Map rule name.
	RuleName pulumi.StringInput
}

func (RouteMapRuleEntryMatchRoutePrefixListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeMapRuleEntryMatchRoutePrefixListArgs)(nil)).Elem()
}

type RouteMapRuleEntryMatchRoutePrefixListInput interface {
	pulumi.Input

	ToRouteMapRuleEntryMatchRoutePrefixListOutput() RouteMapRuleEntryMatchRoutePrefixListOutput
	ToRouteMapRuleEntryMatchRoutePrefixListOutputWithContext(ctx context.Context) RouteMapRuleEntryMatchRoutePrefixListOutput
}

func (*RouteMapRuleEntryMatchRoutePrefixList) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteMapRuleEntryMatchRoutePrefixList)(nil)).Elem()
}

func (i *RouteMapRuleEntryMatchRoutePrefixList) ToRouteMapRuleEntryMatchRoutePrefixListOutput() RouteMapRuleEntryMatchRoutePrefixListOutput {
	return i.ToRouteMapRuleEntryMatchRoutePrefixListOutputWithContext(context.Background())
}

func (i *RouteMapRuleEntryMatchRoutePrefixList) ToRouteMapRuleEntryMatchRoutePrefixListOutputWithContext(ctx context.Context) RouteMapRuleEntryMatchRoutePrefixListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapRuleEntryMatchRoutePrefixListOutput)
}

func (i *RouteMapRuleEntryMatchRoutePrefixList) ToOutput(ctx context.Context) pulumix.Output[*RouteMapRuleEntryMatchRoutePrefixList] {
	return pulumix.Output[*RouteMapRuleEntryMatchRoutePrefixList]{
		OutputState: i.ToRouteMapRuleEntryMatchRoutePrefixListOutputWithContext(ctx).OutputState,
	}
}

// RouteMapRuleEntryMatchRoutePrefixListArrayInput is an input type that accepts RouteMapRuleEntryMatchRoutePrefixListArray and RouteMapRuleEntryMatchRoutePrefixListArrayOutput values.
// You can construct a concrete instance of `RouteMapRuleEntryMatchRoutePrefixListArrayInput` via:
//
//	RouteMapRuleEntryMatchRoutePrefixListArray{ RouteMapRuleEntryMatchRoutePrefixListArgs{...} }
type RouteMapRuleEntryMatchRoutePrefixListArrayInput interface {
	pulumi.Input

	ToRouteMapRuleEntryMatchRoutePrefixListArrayOutput() RouteMapRuleEntryMatchRoutePrefixListArrayOutput
	ToRouteMapRuleEntryMatchRoutePrefixListArrayOutputWithContext(context.Context) RouteMapRuleEntryMatchRoutePrefixListArrayOutput
}

type RouteMapRuleEntryMatchRoutePrefixListArray []RouteMapRuleEntryMatchRoutePrefixListInput

func (RouteMapRuleEntryMatchRoutePrefixListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteMapRuleEntryMatchRoutePrefixList)(nil)).Elem()
}

func (i RouteMapRuleEntryMatchRoutePrefixListArray) ToRouteMapRuleEntryMatchRoutePrefixListArrayOutput() RouteMapRuleEntryMatchRoutePrefixListArrayOutput {
	return i.ToRouteMapRuleEntryMatchRoutePrefixListArrayOutputWithContext(context.Background())
}

func (i RouteMapRuleEntryMatchRoutePrefixListArray) ToRouteMapRuleEntryMatchRoutePrefixListArrayOutputWithContext(ctx context.Context) RouteMapRuleEntryMatchRoutePrefixListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapRuleEntryMatchRoutePrefixListArrayOutput)
}

func (i RouteMapRuleEntryMatchRoutePrefixListArray) ToOutput(ctx context.Context) pulumix.Output[[]*RouteMapRuleEntryMatchRoutePrefixList] {
	return pulumix.Output[[]*RouteMapRuleEntryMatchRoutePrefixList]{
		OutputState: i.ToRouteMapRuleEntryMatchRoutePrefixListArrayOutputWithContext(ctx).OutputState,
	}
}

// RouteMapRuleEntryMatchRoutePrefixListMapInput is an input type that accepts RouteMapRuleEntryMatchRoutePrefixListMap and RouteMapRuleEntryMatchRoutePrefixListMapOutput values.
// You can construct a concrete instance of `RouteMapRuleEntryMatchRoutePrefixListMapInput` via:
//
//	RouteMapRuleEntryMatchRoutePrefixListMap{ "key": RouteMapRuleEntryMatchRoutePrefixListArgs{...} }
type RouteMapRuleEntryMatchRoutePrefixListMapInput interface {
	pulumi.Input

	ToRouteMapRuleEntryMatchRoutePrefixListMapOutput() RouteMapRuleEntryMatchRoutePrefixListMapOutput
	ToRouteMapRuleEntryMatchRoutePrefixListMapOutputWithContext(context.Context) RouteMapRuleEntryMatchRoutePrefixListMapOutput
}

type RouteMapRuleEntryMatchRoutePrefixListMap map[string]RouteMapRuleEntryMatchRoutePrefixListInput

func (RouteMapRuleEntryMatchRoutePrefixListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteMapRuleEntryMatchRoutePrefixList)(nil)).Elem()
}

func (i RouteMapRuleEntryMatchRoutePrefixListMap) ToRouteMapRuleEntryMatchRoutePrefixListMapOutput() RouteMapRuleEntryMatchRoutePrefixListMapOutput {
	return i.ToRouteMapRuleEntryMatchRoutePrefixListMapOutputWithContext(context.Background())
}

func (i RouteMapRuleEntryMatchRoutePrefixListMap) ToRouteMapRuleEntryMatchRoutePrefixListMapOutputWithContext(ctx context.Context) RouteMapRuleEntryMatchRoutePrefixListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapRuleEntryMatchRoutePrefixListMapOutput)
}

func (i RouteMapRuleEntryMatchRoutePrefixListMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouteMapRuleEntryMatchRoutePrefixList] {
	return pulumix.Output[map[string]*RouteMapRuleEntryMatchRoutePrefixList]{
		OutputState: i.ToRouteMapRuleEntryMatchRoutePrefixListMapOutputWithContext(ctx).OutputState,
	}
}

type RouteMapRuleEntryMatchRoutePrefixListOutput struct{ *pulumi.OutputState }

func (RouteMapRuleEntryMatchRoutePrefixListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteMapRuleEntryMatchRoutePrefixList)(nil)).Elem()
}

func (o RouteMapRuleEntryMatchRoutePrefixListOutput) ToRouteMapRuleEntryMatchRoutePrefixListOutput() RouteMapRuleEntryMatchRoutePrefixListOutput {
	return o
}

func (o RouteMapRuleEntryMatchRoutePrefixListOutput) ToRouteMapRuleEntryMatchRoutePrefixListOutputWithContext(ctx context.Context) RouteMapRuleEntryMatchRoutePrefixListOutput {
	return o
}

func (o RouteMapRuleEntryMatchRoutePrefixListOutput) ToOutput(ctx context.Context) pulumix.Output[*RouteMapRuleEntryMatchRoutePrefixList] {
	return pulumix.Output[*RouteMapRuleEntryMatchRoutePrefixList]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o RouteMapRuleEntryMatchRoutePrefixListOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteMapRuleEntryMatchRoutePrefixList) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Route-Map Rule Entry order. - Range: `0`-`65535`
func (o RouteMapRuleEntryMatchRoutePrefixListOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *RouteMapRuleEntryMatchRoutePrefixList) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// DN of Prefix List. For example: `sys/rpm/pfxlistv4-[LIST1]`
func (o RouteMapRuleEntryMatchRoutePrefixListOutput) PrefixListDn() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteMapRuleEntryMatchRoutePrefixList) pulumi.StringOutput { return v.PrefixListDn }).(pulumi.StringOutput)
}

// Route Map rule name.
func (o RouteMapRuleEntryMatchRoutePrefixListOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteMapRuleEntryMatchRoutePrefixList) pulumi.StringOutput { return v.RuleName }).(pulumi.StringOutput)
}

type RouteMapRuleEntryMatchRoutePrefixListArrayOutput struct{ *pulumi.OutputState }

func (RouteMapRuleEntryMatchRoutePrefixListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteMapRuleEntryMatchRoutePrefixList)(nil)).Elem()
}

func (o RouteMapRuleEntryMatchRoutePrefixListArrayOutput) ToRouteMapRuleEntryMatchRoutePrefixListArrayOutput() RouteMapRuleEntryMatchRoutePrefixListArrayOutput {
	return o
}

func (o RouteMapRuleEntryMatchRoutePrefixListArrayOutput) ToRouteMapRuleEntryMatchRoutePrefixListArrayOutputWithContext(ctx context.Context) RouteMapRuleEntryMatchRoutePrefixListArrayOutput {
	return o
}

func (o RouteMapRuleEntryMatchRoutePrefixListArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RouteMapRuleEntryMatchRoutePrefixList] {
	return pulumix.Output[[]*RouteMapRuleEntryMatchRoutePrefixList]{
		OutputState: o.OutputState,
	}
}

func (o RouteMapRuleEntryMatchRoutePrefixListArrayOutput) Index(i pulumi.IntInput) RouteMapRuleEntryMatchRoutePrefixListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteMapRuleEntryMatchRoutePrefixList {
		return vs[0].([]*RouteMapRuleEntryMatchRoutePrefixList)[vs[1].(int)]
	}).(RouteMapRuleEntryMatchRoutePrefixListOutput)
}

type RouteMapRuleEntryMatchRoutePrefixListMapOutput struct{ *pulumi.OutputState }

func (RouteMapRuleEntryMatchRoutePrefixListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteMapRuleEntryMatchRoutePrefixList)(nil)).Elem()
}

func (o RouteMapRuleEntryMatchRoutePrefixListMapOutput) ToRouteMapRuleEntryMatchRoutePrefixListMapOutput() RouteMapRuleEntryMatchRoutePrefixListMapOutput {
	return o
}

func (o RouteMapRuleEntryMatchRoutePrefixListMapOutput) ToRouteMapRuleEntryMatchRoutePrefixListMapOutputWithContext(ctx context.Context) RouteMapRuleEntryMatchRoutePrefixListMapOutput {
	return o
}

func (o RouteMapRuleEntryMatchRoutePrefixListMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouteMapRuleEntryMatchRoutePrefixList] {
	return pulumix.Output[map[string]*RouteMapRuleEntryMatchRoutePrefixList]{
		OutputState: o.OutputState,
	}
}

func (o RouteMapRuleEntryMatchRoutePrefixListMapOutput) MapIndex(k pulumi.StringInput) RouteMapRuleEntryMatchRoutePrefixListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteMapRuleEntryMatchRoutePrefixList {
		return vs[0].(map[string]*RouteMapRuleEntryMatchRoutePrefixList)[vs[1].(string)]
	}).(RouteMapRuleEntryMatchRoutePrefixListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapRuleEntryMatchRoutePrefixListInput)(nil)).Elem(), &RouteMapRuleEntryMatchRoutePrefixList{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapRuleEntryMatchRoutePrefixListArrayInput)(nil)).Elem(), RouteMapRuleEntryMatchRoutePrefixListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapRuleEntryMatchRoutePrefixListMapInput)(nil)).Elem(), RouteMapRuleEntryMatchRoutePrefixListMap{})
	pulumi.RegisterOutputType(RouteMapRuleEntryMatchRoutePrefixListOutput{})
	pulumi.RegisterOutputType(RouteMapRuleEntryMatchRoutePrefixListArrayOutput{})
	pulumi.RegisterOutputType(RouteMapRuleEntryMatchRoutePrefixListMapOutput{})
}
