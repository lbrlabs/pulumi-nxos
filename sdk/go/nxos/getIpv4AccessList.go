// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read IPv4 Access Lists.
//
// - API Documentation: [ipv4aclACL](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Security%20and%20Policing/ipv4acl:ACL/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupIpv4AccessList(ctx, &nxos.LookupIpv4AccessListArgs{
//				Name: "ACL1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIpv4AccessList(ctx *pulumi.Context, args *LookupIpv4AccessListArgs, opts ...pulumi.InvokeOption) (*LookupIpv4AccessListResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIpv4AccessListResult
	err := ctx.Invoke("nxos:index/getIpv4AccessList:getIpv4AccessList", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpv4AccessList.
type LookupIpv4AccessListArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Access list name.
	Name string `pulumi:"name"`
}

// A collection of values returned by getIpv4AccessList.
type LookupIpv4AccessListResult struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
	// Access list name.
	Name string `pulumi:"name"`
}

func LookupIpv4AccessListOutput(ctx *pulumi.Context, args LookupIpv4AccessListOutputArgs, opts ...pulumi.InvokeOption) LookupIpv4AccessListResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIpv4AccessListResult, error) {
			args := v.(LookupIpv4AccessListArgs)
			r, err := LookupIpv4AccessList(ctx, &args, opts...)
			var s LookupIpv4AccessListResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIpv4AccessListResultOutput)
}

// A collection of arguments for invoking getIpv4AccessList.
type LookupIpv4AccessListOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Access list name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupIpv4AccessListOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpv4AccessListArgs)(nil)).Elem()
}

// A collection of values returned by getIpv4AccessList.
type LookupIpv4AccessListResultOutput struct{ *pulumi.OutputState }

func (LookupIpv4AccessListResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpv4AccessListResult)(nil)).Elem()
}

func (o LookupIpv4AccessListResultOutput) ToLookupIpv4AccessListResultOutput() LookupIpv4AccessListResultOutput {
	return o
}

func (o LookupIpv4AccessListResultOutput) ToLookupIpv4AccessListResultOutputWithContext(ctx context.Context) LookupIpv4AccessListResultOutput {
	return o
}

func (o LookupIpv4AccessListResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupIpv4AccessListResult] {
	return pulumix.Output[LookupIpv4AccessListResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupIpv4AccessListResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIpv4AccessListResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The distinguished name of the object.
func (o LookupIpv4AccessListResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4AccessListResult) string { return v.Id }).(pulumi.StringOutput)
}

// Access list name.
func (o LookupIpv4AccessListResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpv4AccessListResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpv4AccessListResultOutput{})
}
