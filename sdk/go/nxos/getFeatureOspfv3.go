// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the OSPFv3 feature configuration.
//
// - API Documentation: [fmOspfv3](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Feature%20Management/fm:Ospfv3/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupFeatureOspfv3(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFeatureOspfv3(ctx *pulumi.Context, args *LookupFeatureOspfv3Args, opts ...pulumi.InvokeOption) (*LookupFeatureOspfv3Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFeatureOspfv3Result
	err := ctx.Invoke("nxos:index/getFeatureOspfv3:getFeatureOspfv3", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFeatureOspfv3.
type LookupFeatureOspfv3Args struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// A collection of values returned by getFeatureOspfv3.
type LookupFeatureOspfv3Result struct {
	// Administrative state.
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
}

func LookupFeatureOspfv3Output(ctx *pulumi.Context, args LookupFeatureOspfv3OutputArgs, opts ...pulumi.InvokeOption) LookupFeatureOspfv3ResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFeatureOspfv3Result, error) {
			args := v.(LookupFeatureOspfv3Args)
			r, err := LookupFeatureOspfv3(ctx, &args, opts...)
			var s LookupFeatureOspfv3Result
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupFeatureOspfv3ResultOutput)
}

// A collection of arguments for invoking getFeatureOspfv3.
type LookupFeatureOspfv3OutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (LookupFeatureOspfv3OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureOspfv3Args)(nil)).Elem()
}

// A collection of values returned by getFeatureOspfv3.
type LookupFeatureOspfv3ResultOutput struct{ *pulumi.OutputState }

func (LookupFeatureOspfv3ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureOspfv3Result)(nil)).Elem()
}

func (o LookupFeatureOspfv3ResultOutput) ToLookupFeatureOspfv3ResultOutput() LookupFeatureOspfv3ResultOutput {
	return o
}

func (o LookupFeatureOspfv3ResultOutput) ToLookupFeatureOspfv3ResultOutputWithContext(ctx context.Context) LookupFeatureOspfv3ResultOutput {
	return o
}

func (o LookupFeatureOspfv3ResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupFeatureOspfv3Result] {
	return pulumix.Output[LookupFeatureOspfv3Result]{
		OutputState: o.OutputState,
	}
}

// Administrative state.
func (o LookupFeatureOspfv3ResultOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureOspfv3Result) string { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupFeatureOspfv3ResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFeatureOspfv3Result) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The distinguished name of the object.
func (o LookupFeatureOspfv3ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureOspfv3Result) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFeatureOspfv3ResultOutput{})
}
