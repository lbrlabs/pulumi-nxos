// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the configuration of Virtual Network ID (VNI).
//
// - API Documentation: [nvoNw](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Network%20Virtualization/nvo:Nw/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupNveVni(ctx, &nxos.LookupNveVniArgs{
//				Vni: 103100,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNveVni(ctx *pulumi.Context, args *LookupNveVniArgs, opts ...pulumi.InvokeOption) (*LookupNveVniResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNveVniResult
	err := ctx.Invoke("nxos:index/getNveVni:getNveVni", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNveVni.
type LookupNveVniArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Virtual Network ID.
	Vni int `pulumi:"vni"`
}

// A collection of values returned by getNveVni.
type LookupNveVniResult struct {
	// Configures VNI as L3 VNI.
	AssociateVrf bool `pulumi:"associateVrf"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
	// Configures multicast group address for VNI.
	MulticastGroup string `pulumi:"multicastGroup"`
	// Enable or disable Multisite Ingress Replication for VNI(s).
	MultisiteIngressReplication string `pulumi:"multisiteIngressReplication"`
	// Enable or disable ARP suppression for VNI(s).
	SuppressArp string `pulumi:"suppressArp"`
	// Virtual Network ID.
	Vni int `pulumi:"vni"`
}

func LookupNveVniOutput(ctx *pulumi.Context, args LookupNveVniOutputArgs, opts ...pulumi.InvokeOption) LookupNveVniResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNveVniResult, error) {
			args := v.(LookupNveVniArgs)
			r, err := LookupNveVni(ctx, &args, opts...)
			var s LookupNveVniResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNveVniResultOutput)
}

// A collection of arguments for invoking getNveVni.
type LookupNveVniOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Virtual Network ID.
	Vni pulumi.IntInput `pulumi:"vni"`
}

func (LookupNveVniOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNveVniArgs)(nil)).Elem()
}

// A collection of values returned by getNveVni.
type LookupNveVniResultOutput struct{ *pulumi.OutputState }

func (LookupNveVniResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNveVniResult)(nil)).Elem()
}

func (o LookupNveVniResultOutput) ToLookupNveVniResultOutput() LookupNveVniResultOutput {
	return o
}

func (o LookupNveVniResultOutput) ToLookupNveVniResultOutputWithContext(ctx context.Context) LookupNveVniResultOutput {
	return o
}

func (o LookupNveVniResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupNveVniResult] {
	return pulumix.Output[LookupNveVniResult]{
		OutputState: o.OutputState,
	}
}

// Configures VNI as L3 VNI.
func (o LookupNveVniResultOutput) AssociateVrf() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNveVniResult) bool { return v.AssociateVrf }).(pulumi.BoolOutput)
}

// A device name from the provider configuration.
func (o LookupNveVniResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNveVniResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The distinguished name of the object.
func (o LookupNveVniResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNveVniResult) string { return v.Id }).(pulumi.StringOutput)
}

// Configures multicast group address for VNI.
func (o LookupNveVniResultOutput) MulticastGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNveVniResult) string { return v.MulticastGroup }).(pulumi.StringOutput)
}

// Enable or disable Multisite Ingress Replication for VNI(s).
func (o LookupNveVniResultOutput) MultisiteIngressReplication() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNveVniResult) string { return v.MultisiteIngressReplication }).(pulumi.StringOutput)
}

// Enable or disable ARP suppression for VNI(s).
func (o LookupNveVniResultOutput) SuppressArp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNveVniResult) string { return v.SuppressArp }).(pulumi.StringOutput)
}

// Virtual Network ID.
func (o LookupNveVniResultOutput) Vni() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNveVniResult) int { return v.Vni }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNveVniResultOutput{})
}
