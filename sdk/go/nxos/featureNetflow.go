// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Netflow feature configuration.
//
// - API Documentation: [fmNetflow](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Feature%20Management/fm:Netflow/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewFeatureNetflow(ctx, "example", &nxos.FeatureNetflowArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/featureNetflow:FeatureNetflow example "sys/fm/netflow"
//
// ```
type FeatureNetflow struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureNetflow registers a new resource with the given unique name, arguments, and options.
func NewFeatureNetflow(ctx *pulumi.Context,
	name string, args *FeatureNetflowArgs, opts ...pulumi.ResourceOption) (*FeatureNetflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureNetflow
	err := ctx.RegisterResource("nxos:index/featureNetflow:FeatureNetflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureNetflow gets an existing FeatureNetflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureNetflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureNetflowState, opts ...pulumi.ResourceOption) (*FeatureNetflow, error) {
	var resource FeatureNetflow
	err := ctx.ReadResource("nxos:index/featureNetflow:FeatureNetflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureNetflow resources.
type featureNetflowState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureNetflowState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureNetflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureNetflowState)(nil)).Elem()
}

type featureNetflowArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureNetflow resource.
type FeatureNetflowArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureNetflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureNetflowArgs)(nil)).Elem()
}

type FeatureNetflowInput interface {
	pulumi.Input

	ToFeatureNetflowOutput() FeatureNetflowOutput
	ToFeatureNetflowOutputWithContext(ctx context.Context) FeatureNetflowOutput
}

func (*FeatureNetflow) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureNetflow)(nil)).Elem()
}

func (i *FeatureNetflow) ToFeatureNetflowOutput() FeatureNetflowOutput {
	return i.ToFeatureNetflowOutputWithContext(context.Background())
}

func (i *FeatureNetflow) ToFeatureNetflowOutputWithContext(ctx context.Context) FeatureNetflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureNetflowOutput)
}

func (i *FeatureNetflow) ToOutput(ctx context.Context) pulumix.Output[*FeatureNetflow] {
	return pulumix.Output[*FeatureNetflow]{
		OutputState: i.ToFeatureNetflowOutputWithContext(ctx).OutputState,
	}
}

// FeatureNetflowArrayInput is an input type that accepts FeatureNetflowArray and FeatureNetflowArrayOutput values.
// You can construct a concrete instance of `FeatureNetflowArrayInput` via:
//
//	FeatureNetflowArray{ FeatureNetflowArgs{...} }
type FeatureNetflowArrayInput interface {
	pulumi.Input

	ToFeatureNetflowArrayOutput() FeatureNetflowArrayOutput
	ToFeatureNetflowArrayOutputWithContext(context.Context) FeatureNetflowArrayOutput
}

type FeatureNetflowArray []FeatureNetflowInput

func (FeatureNetflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureNetflow)(nil)).Elem()
}

func (i FeatureNetflowArray) ToFeatureNetflowArrayOutput() FeatureNetflowArrayOutput {
	return i.ToFeatureNetflowArrayOutputWithContext(context.Background())
}

func (i FeatureNetflowArray) ToFeatureNetflowArrayOutputWithContext(ctx context.Context) FeatureNetflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureNetflowArrayOutput)
}

func (i FeatureNetflowArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureNetflow] {
	return pulumix.Output[[]*FeatureNetflow]{
		OutputState: i.ToFeatureNetflowArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureNetflowMapInput is an input type that accepts FeatureNetflowMap and FeatureNetflowMapOutput values.
// You can construct a concrete instance of `FeatureNetflowMapInput` via:
//
//	FeatureNetflowMap{ "key": FeatureNetflowArgs{...} }
type FeatureNetflowMapInput interface {
	pulumi.Input

	ToFeatureNetflowMapOutput() FeatureNetflowMapOutput
	ToFeatureNetflowMapOutputWithContext(context.Context) FeatureNetflowMapOutput
}

type FeatureNetflowMap map[string]FeatureNetflowInput

func (FeatureNetflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureNetflow)(nil)).Elem()
}

func (i FeatureNetflowMap) ToFeatureNetflowMapOutput() FeatureNetflowMapOutput {
	return i.ToFeatureNetflowMapOutputWithContext(context.Background())
}

func (i FeatureNetflowMap) ToFeatureNetflowMapOutputWithContext(ctx context.Context) FeatureNetflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureNetflowMapOutput)
}

func (i FeatureNetflowMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureNetflow] {
	return pulumix.Output[map[string]*FeatureNetflow]{
		OutputState: i.ToFeatureNetflowMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureNetflowOutput struct{ *pulumi.OutputState }

func (FeatureNetflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureNetflow)(nil)).Elem()
}

func (o FeatureNetflowOutput) ToFeatureNetflowOutput() FeatureNetflowOutput {
	return o
}

func (o FeatureNetflowOutput) ToFeatureNetflowOutputWithContext(ctx context.Context) FeatureNetflowOutput {
	return o
}

func (o FeatureNetflowOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureNetflow] {
	return pulumix.Output[*FeatureNetflow]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureNetflowOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureNetflow) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureNetflowOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureNetflow) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureNetflowArrayOutput struct{ *pulumi.OutputState }

func (FeatureNetflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureNetflow)(nil)).Elem()
}

func (o FeatureNetflowArrayOutput) ToFeatureNetflowArrayOutput() FeatureNetflowArrayOutput {
	return o
}

func (o FeatureNetflowArrayOutput) ToFeatureNetflowArrayOutputWithContext(ctx context.Context) FeatureNetflowArrayOutput {
	return o
}

func (o FeatureNetflowArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureNetflow] {
	return pulumix.Output[[]*FeatureNetflow]{
		OutputState: o.OutputState,
	}
}

func (o FeatureNetflowArrayOutput) Index(i pulumi.IntInput) FeatureNetflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureNetflow {
		return vs[0].([]*FeatureNetflow)[vs[1].(int)]
	}).(FeatureNetflowOutput)
}

type FeatureNetflowMapOutput struct{ *pulumi.OutputState }

func (FeatureNetflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureNetflow)(nil)).Elem()
}

func (o FeatureNetflowMapOutput) ToFeatureNetflowMapOutput() FeatureNetflowMapOutput {
	return o
}

func (o FeatureNetflowMapOutput) ToFeatureNetflowMapOutputWithContext(ctx context.Context) FeatureNetflowMapOutput {
	return o
}

func (o FeatureNetflowMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureNetflow] {
	return pulumix.Output[map[string]*FeatureNetflow]{
		OutputState: o.OutputState,
	}
}

func (o FeatureNetflowMapOutput) MapIndex(k pulumi.StringInput) FeatureNetflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureNetflow {
		return vs[0].(map[string]*FeatureNetflow)[vs[1].(string)]
	}).(FeatureNetflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureNetflowInput)(nil)).Elem(), &FeatureNetflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureNetflowArrayInput)(nil)).Elem(), FeatureNetflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureNetflowMapInput)(nil)).Elem(), FeatureNetflowMap{})
	pulumi.RegisterOutputType(FeatureNetflowOutput{})
	pulumi.RegisterOutputType(FeatureNetflowArrayOutput{})
	pulumi.RegisterOutputType(FeatureNetflowMapOutput{})
}
