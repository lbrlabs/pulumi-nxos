// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage an SVI interface VRF association.
//
// - API Documentation: [nwRtVrfMbr](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/nw:RtVrfMbr/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewSviInterfaceVrf(ctx, "example", &nxos.SviInterfaceVrfArgs{
//				InterfaceId: pulumi.String("vlan293"),
//				VrfDn:       pulumi.String("sys/inst-VRF123"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/sviInterfaceVrf:SviInterfaceVrf example "sys/intf/svi-[vlan293]/rtvrfMbr"
//
// ```
type SviInterfaceVrf struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringOutput `pulumi:"vrfDn"`
}

// NewSviInterfaceVrf registers a new resource with the given unique name, arguments, and options.
func NewSviInterfaceVrf(ctx *pulumi.Context,
	name string, args *SviInterfaceVrfArgs, opts ...pulumi.ResourceOption) (*SviInterfaceVrf, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.VrfDn == nil {
		return nil, errors.New("invalid value for required argument 'VrfDn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SviInterfaceVrf
	err := ctx.RegisterResource("nxos:index/sviInterfaceVrf:SviInterfaceVrf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSviInterfaceVrf gets an existing SviInterfaceVrf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSviInterfaceVrf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SviInterfaceVrfState, opts ...pulumi.ResourceOption) (*SviInterfaceVrf, error) {
	var resource SviInterfaceVrf
	err := ctx.ReadResource("nxos:index/sviInterfaceVrf:SviInterfaceVrf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SviInterfaceVrf resources.
type sviInterfaceVrfState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId *string `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn *string `pulumi:"vrfDn"`
}

type SviInterfaceVrfState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId pulumi.StringPtrInput
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringPtrInput
}

func (SviInterfaceVrfState) ElementType() reflect.Type {
	return reflect.TypeOf((*sviInterfaceVrfState)(nil)).Elem()
}

type sviInterfaceVrfArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId string `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn string `pulumi:"vrfDn"`
}

// The set of arguments for constructing a SviInterfaceVrf resource.
type SviInterfaceVrfArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId pulumi.StringInput
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringInput
}

func (SviInterfaceVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sviInterfaceVrfArgs)(nil)).Elem()
}

type SviInterfaceVrfInput interface {
	pulumi.Input

	ToSviInterfaceVrfOutput() SviInterfaceVrfOutput
	ToSviInterfaceVrfOutputWithContext(ctx context.Context) SviInterfaceVrfOutput
}

func (*SviInterfaceVrf) ElementType() reflect.Type {
	return reflect.TypeOf((**SviInterfaceVrf)(nil)).Elem()
}

func (i *SviInterfaceVrf) ToSviInterfaceVrfOutput() SviInterfaceVrfOutput {
	return i.ToSviInterfaceVrfOutputWithContext(context.Background())
}

func (i *SviInterfaceVrf) ToSviInterfaceVrfOutputWithContext(ctx context.Context) SviInterfaceVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SviInterfaceVrfOutput)
}

func (i *SviInterfaceVrf) ToOutput(ctx context.Context) pulumix.Output[*SviInterfaceVrf] {
	return pulumix.Output[*SviInterfaceVrf]{
		OutputState: i.ToSviInterfaceVrfOutputWithContext(ctx).OutputState,
	}
}

// SviInterfaceVrfArrayInput is an input type that accepts SviInterfaceVrfArray and SviInterfaceVrfArrayOutput values.
// You can construct a concrete instance of `SviInterfaceVrfArrayInput` via:
//
//	SviInterfaceVrfArray{ SviInterfaceVrfArgs{...} }
type SviInterfaceVrfArrayInput interface {
	pulumi.Input

	ToSviInterfaceVrfArrayOutput() SviInterfaceVrfArrayOutput
	ToSviInterfaceVrfArrayOutputWithContext(context.Context) SviInterfaceVrfArrayOutput
}

type SviInterfaceVrfArray []SviInterfaceVrfInput

func (SviInterfaceVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SviInterfaceVrf)(nil)).Elem()
}

func (i SviInterfaceVrfArray) ToSviInterfaceVrfArrayOutput() SviInterfaceVrfArrayOutput {
	return i.ToSviInterfaceVrfArrayOutputWithContext(context.Background())
}

func (i SviInterfaceVrfArray) ToSviInterfaceVrfArrayOutputWithContext(ctx context.Context) SviInterfaceVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SviInterfaceVrfArrayOutput)
}

func (i SviInterfaceVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]*SviInterfaceVrf] {
	return pulumix.Output[[]*SviInterfaceVrf]{
		OutputState: i.ToSviInterfaceVrfArrayOutputWithContext(ctx).OutputState,
	}
}

// SviInterfaceVrfMapInput is an input type that accepts SviInterfaceVrfMap and SviInterfaceVrfMapOutput values.
// You can construct a concrete instance of `SviInterfaceVrfMapInput` via:
//
//	SviInterfaceVrfMap{ "key": SviInterfaceVrfArgs{...} }
type SviInterfaceVrfMapInput interface {
	pulumi.Input

	ToSviInterfaceVrfMapOutput() SviInterfaceVrfMapOutput
	ToSviInterfaceVrfMapOutputWithContext(context.Context) SviInterfaceVrfMapOutput
}

type SviInterfaceVrfMap map[string]SviInterfaceVrfInput

func (SviInterfaceVrfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SviInterfaceVrf)(nil)).Elem()
}

func (i SviInterfaceVrfMap) ToSviInterfaceVrfMapOutput() SviInterfaceVrfMapOutput {
	return i.ToSviInterfaceVrfMapOutputWithContext(context.Background())
}

func (i SviInterfaceVrfMap) ToSviInterfaceVrfMapOutputWithContext(ctx context.Context) SviInterfaceVrfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SviInterfaceVrfMapOutput)
}

func (i SviInterfaceVrfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SviInterfaceVrf] {
	return pulumix.Output[map[string]*SviInterfaceVrf]{
		OutputState: i.ToSviInterfaceVrfMapOutputWithContext(ctx).OutputState,
	}
}

type SviInterfaceVrfOutput struct{ *pulumi.OutputState }

func (SviInterfaceVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SviInterfaceVrf)(nil)).Elem()
}

func (o SviInterfaceVrfOutput) ToSviInterfaceVrfOutput() SviInterfaceVrfOutput {
	return o
}

func (o SviInterfaceVrfOutput) ToSviInterfaceVrfOutputWithContext(ctx context.Context) SviInterfaceVrfOutput {
	return o
}

func (o SviInterfaceVrfOutput) ToOutput(ctx context.Context) pulumix.Output[*SviInterfaceVrf] {
	return pulumix.Output[*SviInterfaceVrf]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o SviInterfaceVrfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SviInterfaceVrf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Must match first field in the output of `show intf brief`. Example: `vlan100`.
func (o SviInterfaceVrfOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SviInterfaceVrf) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// DN of VRF. For example: `sys/inst-VRF1`.
func (o SviInterfaceVrfOutput) VrfDn() pulumi.StringOutput {
	return o.ApplyT(func(v *SviInterfaceVrf) pulumi.StringOutput { return v.VrfDn }).(pulumi.StringOutput)
}

type SviInterfaceVrfArrayOutput struct{ *pulumi.OutputState }

func (SviInterfaceVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SviInterfaceVrf)(nil)).Elem()
}

func (o SviInterfaceVrfArrayOutput) ToSviInterfaceVrfArrayOutput() SviInterfaceVrfArrayOutput {
	return o
}

func (o SviInterfaceVrfArrayOutput) ToSviInterfaceVrfArrayOutputWithContext(ctx context.Context) SviInterfaceVrfArrayOutput {
	return o
}

func (o SviInterfaceVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SviInterfaceVrf] {
	return pulumix.Output[[]*SviInterfaceVrf]{
		OutputState: o.OutputState,
	}
}

func (o SviInterfaceVrfArrayOutput) Index(i pulumi.IntInput) SviInterfaceVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SviInterfaceVrf {
		return vs[0].([]*SviInterfaceVrf)[vs[1].(int)]
	}).(SviInterfaceVrfOutput)
}

type SviInterfaceVrfMapOutput struct{ *pulumi.OutputState }

func (SviInterfaceVrfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SviInterfaceVrf)(nil)).Elem()
}

func (o SviInterfaceVrfMapOutput) ToSviInterfaceVrfMapOutput() SviInterfaceVrfMapOutput {
	return o
}

func (o SviInterfaceVrfMapOutput) ToSviInterfaceVrfMapOutputWithContext(ctx context.Context) SviInterfaceVrfMapOutput {
	return o
}

func (o SviInterfaceVrfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SviInterfaceVrf] {
	return pulumix.Output[map[string]*SviInterfaceVrf]{
		OutputState: o.OutputState,
	}
}

func (o SviInterfaceVrfMapOutput) MapIndex(k pulumi.StringInput) SviInterfaceVrfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SviInterfaceVrf {
		return vs[0].(map[string]*SviInterfaceVrf)[vs[1].(string)]
	}).(SviInterfaceVrfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SviInterfaceVrfInput)(nil)).Elem(), &SviInterfaceVrf{})
	pulumi.RegisterInputType(reflect.TypeOf((*SviInterfaceVrfArrayInput)(nil)).Elem(), SviInterfaceVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SviInterfaceVrfMapInput)(nil)).Elem(), SviInterfaceVrfMap{})
	pulumi.RegisterOutputType(SviInterfaceVrfOutput{})
	pulumi.RegisterOutputType(SviInterfaceVrfArrayOutput{})
	pulumi.RegisterOutputType(SviInterfaceVrfMapOutput{})
}
