// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the PIM Anycast RP peer configuration.
//
// - API Documentation: [pimAcastRPPeer](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:AcastRPPeer/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupPimAnycastRpPeer(ctx, &nxos.LookupPimAnycastRpPeerArgs{
//				Address:      "10.1.1.1/32",
//				RpSetAddress: "20.1.1.1/32",
//				VrfName:      "default",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPimAnycastRpPeer(ctx *pulumi.Context, args *LookupPimAnycastRpPeerArgs, opts ...pulumi.InvokeOption) (*LookupPimAnycastRpPeerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPimAnycastRpPeerResult
	err := ctx.Invoke("nxos:index/getPimAnycastRpPeer:getPimAnycastRpPeer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPimAnycastRpPeer.
type LookupPimAnycastRpPeerArgs struct {
	// Anycast RP address.
	Address string `pulumi:"address"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// RP set address.
	RpSetAddress string `pulumi:"rpSetAddress"`
	// VRF name.
	VrfName string `pulumi:"vrfName"`
}

// A collection of values returned by getPimAnycastRpPeer.
type LookupPimAnycastRpPeerResult struct {
	// Anycast RP address.
	Address string `pulumi:"address"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
	// RP set address.
	RpSetAddress string `pulumi:"rpSetAddress"`
	// VRF name.
	VrfName string `pulumi:"vrfName"`
}

func LookupPimAnycastRpPeerOutput(ctx *pulumi.Context, args LookupPimAnycastRpPeerOutputArgs, opts ...pulumi.InvokeOption) LookupPimAnycastRpPeerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPimAnycastRpPeerResult, error) {
			args := v.(LookupPimAnycastRpPeerArgs)
			r, err := LookupPimAnycastRpPeer(ctx, &args, opts...)
			var s LookupPimAnycastRpPeerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPimAnycastRpPeerResultOutput)
}

// A collection of arguments for invoking getPimAnycastRpPeer.
type LookupPimAnycastRpPeerOutputArgs struct {
	// Anycast RP address.
	Address pulumi.StringInput `pulumi:"address"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// RP set address.
	RpSetAddress pulumi.StringInput `pulumi:"rpSetAddress"`
	// VRF name.
	VrfName pulumi.StringInput `pulumi:"vrfName"`
}

func (LookupPimAnycastRpPeerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPimAnycastRpPeerArgs)(nil)).Elem()
}

// A collection of values returned by getPimAnycastRpPeer.
type LookupPimAnycastRpPeerResultOutput struct{ *pulumi.OutputState }

func (LookupPimAnycastRpPeerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPimAnycastRpPeerResult)(nil)).Elem()
}

func (o LookupPimAnycastRpPeerResultOutput) ToLookupPimAnycastRpPeerResultOutput() LookupPimAnycastRpPeerResultOutput {
	return o
}

func (o LookupPimAnycastRpPeerResultOutput) ToLookupPimAnycastRpPeerResultOutputWithContext(ctx context.Context) LookupPimAnycastRpPeerResultOutput {
	return o
}

func (o LookupPimAnycastRpPeerResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupPimAnycastRpPeerResult] {
	return pulumix.Output[LookupPimAnycastRpPeerResult]{
		OutputState: o.OutputState,
	}
}

// Anycast RP address.
func (o LookupPimAnycastRpPeerResultOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimAnycastRpPeerResult) string { return v.Address }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupPimAnycastRpPeerResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPimAnycastRpPeerResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The distinguished name of the object.
func (o LookupPimAnycastRpPeerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimAnycastRpPeerResult) string { return v.Id }).(pulumi.StringOutput)
}

// RP set address.
func (o LookupPimAnycastRpPeerResultOutput) RpSetAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimAnycastRpPeerResult) string { return v.RpSetAddress }).(pulumi.StringOutput)
}

// VRF name.
func (o LookupPimAnycastRpPeerResultOutput) VrfName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimAnycastRpPeerResult) string { return v.VrfName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPimAnycastRpPeerResultOutput{})
}
