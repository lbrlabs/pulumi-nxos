// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the LACP feature configuration.
//
// - API Documentation: [fmLacp](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Feature%20Management/fm:Lacp/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewFeatureLacp(ctx, "example", &nxos.FeatureLacpArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/featureLacp:FeatureLacp example "sys/fm/lacp"
//
// ```
type FeatureLacp struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureLacp registers a new resource with the given unique name, arguments, and options.
func NewFeatureLacp(ctx *pulumi.Context,
	name string, args *FeatureLacpArgs, opts ...pulumi.ResourceOption) (*FeatureLacp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureLacp
	err := ctx.RegisterResource("nxos:index/featureLacp:FeatureLacp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureLacp gets an existing FeatureLacp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureLacp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureLacpState, opts ...pulumi.ResourceOption) (*FeatureLacp, error) {
	var resource FeatureLacp
	err := ctx.ReadResource("nxos:index/featureLacp:FeatureLacp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureLacp resources.
type featureLacpState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureLacpState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureLacpState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureLacpState)(nil)).Elem()
}

type featureLacpArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureLacp resource.
type FeatureLacpArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureLacpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureLacpArgs)(nil)).Elem()
}

type FeatureLacpInput interface {
	pulumi.Input

	ToFeatureLacpOutput() FeatureLacpOutput
	ToFeatureLacpOutputWithContext(ctx context.Context) FeatureLacpOutput
}

func (*FeatureLacp) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureLacp)(nil)).Elem()
}

func (i *FeatureLacp) ToFeatureLacpOutput() FeatureLacpOutput {
	return i.ToFeatureLacpOutputWithContext(context.Background())
}

func (i *FeatureLacp) ToFeatureLacpOutputWithContext(ctx context.Context) FeatureLacpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureLacpOutput)
}

func (i *FeatureLacp) ToOutput(ctx context.Context) pulumix.Output[*FeatureLacp] {
	return pulumix.Output[*FeatureLacp]{
		OutputState: i.ToFeatureLacpOutputWithContext(ctx).OutputState,
	}
}

// FeatureLacpArrayInput is an input type that accepts FeatureLacpArray and FeatureLacpArrayOutput values.
// You can construct a concrete instance of `FeatureLacpArrayInput` via:
//
//	FeatureLacpArray{ FeatureLacpArgs{...} }
type FeatureLacpArrayInput interface {
	pulumi.Input

	ToFeatureLacpArrayOutput() FeatureLacpArrayOutput
	ToFeatureLacpArrayOutputWithContext(context.Context) FeatureLacpArrayOutput
}

type FeatureLacpArray []FeatureLacpInput

func (FeatureLacpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureLacp)(nil)).Elem()
}

func (i FeatureLacpArray) ToFeatureLacpArrayOutput() FeatureLacpArrayOutput {
	return i.ToFeatureLacpArrayOutputWithContext(context.Background())
}

func (i FeatureLacpArray) ToFeatureLacpArrayOutputWithContext(ctx context.Context) FeatureLacpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureLacpArrayOutput)
}

func (i FeatureLacpArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureLacp] {
	return pulumix.Output[[]*FeatureLacp]{
		OutputState: i.ToFeatureLacpArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureLacpMapInput is an input type that accepts FeatureLacpMap and FeatureLacpMapOutput values.
// You can construct a concrete instance of `FeatureLacpMapInput` via:
//
//	FeatureLacpMap{ "key": FeatureLacpArgs{...} }
type FeatureLacpMapInput interface {
	pulumi.Input

	ToFeatureLacpMapOutput() FeatureLacpMapOutput
	ToFeatureLacpMapOutputWithContext(context.Context) FeatureLacpMapOutput
}

type FeatureLacpMap map[string]FeatureLacpInput

func (FeatureLacpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureLacp)(nil)).Elem()
}

func (i FeatureLacpMap) ToFeatureLacpMapOutput() FeatureLacpMapOutput {
	return i.ToFeatureLacpMapOutputWithContext(context.Background())
}

func (i FeatureLacpMap) ToFeatureLacpMapOutputWithContext(ctx context.Context) FeatureLacpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureLacpMapOutput)
}

func (i FeatureLacpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureLacp] {
	return pulumix.Output[map[string]*FeatureLacp]{
		OutputState: i.ToFeatureLacpMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureLacpOutput struct{ *pulumi.OutputState }

func (FeatureLacpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureLacp)(nil)).Elem()
}

func (o FeatureLacpOutput) ToFeatureLacpOutput() FeatureLacpOutput {
	return o
}

func (o FeatureLacpOutput) ToFeatureLacpOutputWithContext(ctx context.Context) FeatureLacpOutput {
	return o
}

func (o FeatureLacpOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureLacp] {
	return pulumix.Output[*FeatureLacp]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureLacpOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureLacp) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureLacpOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureLacp) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureLacpArrayOutput struct{ *pulumi.OutputState }

func (FeatureLacpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureLacp)(nil)).Elem()
}

func (o FeatureLacpArrayOutput) ToFeatureLacpArrayOutput() FeatureLacpArrayOutput {
	return o
}

func (o FeatureLacpArrayOutput) ToFeatureLacpArrayOutputWithContext(ctx context.Context) FeatureLacpArrayOutput {
	return o
}

func (o FeatureLacpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureLacp] {
	return pulumix.Output[[]*FeatureLacp]{
		OutputState: o.OutputState,
	}
}

func (o FeatureLacpArrayOutput) Index(i pulumi.IntInput) FeatureLacpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureLacp {
		return vs[0].([]*FeatureLacp)[vs[1].(int)]
	}).(FeatureLacpOutput)
}

type FeatureLacpMapOutput struct{ *pulumi.OutputState }

func (FeatureLacpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureLacp)(nil)).Elem()
}

func (o FeatureLacpMapOutput) ToFeatureLacpMapOutput() FeatureLacpMapOutput {
	return o
}

func (o FeatureLacpMapOutput) ToFeatureLacpMapOutputWithContext(ctx context.Context) FeatureLacpMapOutput {
	return o
}

func (o FeatureLacpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureLacp] {
	return pulumix.Output[map[string]*FeatureLacp]{
		OutputState: o.OutputState,
	}
}

func (o FeatureLacpMapOutput) MapIndex(k pulumi.StringInput) FeatureLacpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureLacp {
		return vs[0].(map[string]*FeatureLacp)[vs[1].(string)]
	}).(FeatureLacpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureLacpInput)(nil)).Elem(), &FeatureLacp{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureLacpArrayInput)(nil)).Elem(), FeatureLacpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureLacpMapInput)(nil)).Elem(), FeatureLacpMap{})
	pulumi.RegisterOutputType(FeatureLacpOutput{})
	pulumi.RegisterOutputType(FeatureLacpArrayOutput{})
	pulumi.RegisterOutputType(FeatureLacpMapOutput{})
}
