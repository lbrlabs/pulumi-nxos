// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the IS-IS VRF configuration.
//
// - API Documentation: [isisDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:Dom/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupIsisVrf(ctx, &nxos.LookupIsisVrfArgs{
//				InstanceName: "ISIS1",
//				Name:         "default",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIsisVrf(ctx *pulumi.Context, args *LookupIsisVrfArgs, opts ...pulumi.InvokeOption) (*LookupIsisVrfResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIsisVrfResult
	err := ctx.Invoke("nxos:index/getIsisVrf:getIsisVrf", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIsisVrf.
type LookupIsisVrfArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// IS-IS instance name.
	InstanceName string `pulumi:"instanceName"`
	// VRF name.
	Name string `pulumi:"name"`
}

// A collection of values returned by getIsisVrf.
type LookupIsisVrfResult struct {
	// Administrative state.
	AdminState string `pulumi:"adminState"`
	// Authentication Check for ISIS on Level-1.
	AuthenticationCheckL1 bool `pulumi:"authenticationCheckL1"`
	// Authentication Check for ISIS on Level-2.
	AuthenticationCheckL2 bool `pulumi:"authenticationCheckL2"`
	// Authentication Key for IS-IS on Level-1.
	AuthenticationKeyL1 string `pulumi:"authenticationKeyL1"`
	// Authentication Key for IS-IS on Level-2.
	AuthenticationKeyL2 string `pulumi:"authenticationKeyL2"`
	// IS-IS Authentication-Type for Level-1.
	AuthenticationTypeL1 string `pulumi:"authenticationTypeL1"`
	// IS-IS Authentication-Type for Level-2.
	AuthenticationTypeL2 string `pulumi:"authenticationTypeL2"`
	// The IS-IS domain bandwidth reference. This sets the default reference bandwidth used for calculating the IS-IS cost metric.
	BandwidthReference int `pulumi:"bandwidthReference"`
	// Bandwidth reference unit.
	BanwidthReferenceUnit string `pulumi:"banwidthReferenceUnit"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
	// IS-IS instance name.
	InstanceName string `pulumi:"instanceName"`
	// IS-IS domain type.
	IsType string `pulumi:"isType"`
	// IS-IS metric type.
	MetricType string `pulumi:"metricType"`
	// The configuration of link-state packet (LSP) maximum transmission units (MTU) is supported. You can enable up to 4352 bytes.
	Mtu int `pulumi:"mtu"`
	// VRF name.
	Name string `pulumi:"name"`
	// Holds IS-IS domain NET (address) value.
	Net string `pulumi:"net"`
	// IS-IS Domain passive-interface default level.
	PassiveDefault string `pulumi:"passiveDefault"`
}

func LookupIsisVrfOutput(ctx *pulumi.Context, args LookupIsisVrfOutputArgs, opts ...pulumi.InvokeOption) LookupIsisVrfResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIsisVrfResult, error) {
			args := v.(LookupIsisVrfArgs)
			r, err := LookupIsisVrf(ctx, &args, opts...)
			var s LookupIsisVrfResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIsisVrfResultOutput)
}

// A collection of arguments for invoking getIsisVrf.
type LookupIsisVrfOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// IS-IS instance name.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// VRF name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupIsisVrfOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIsisVrfArgs)(nil)).Elem()
}

// A collection of values returned by getIsisVrf.
type LookupIsisVrfResultOutput struct{ *pulumi.OutputState }

func (LookupIsisVrfResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIsisVrfResult)(nil)).Elem()
}

func (o LookupIsisVrfResultOutput) ToLookupIsisVrfResultOutput() LookupIsisVrfResultOutput {
	return o
}

func (o LookupIsisVrfResultOutput) ToLookupIsisVrfResultOutputWithContext(ctx context.Context) LookupIsisVrfResultOutput {
	return o
}

func (o LookupIsisVrfResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupIsisVrfResult] {
	return pulumix.Output[LookupIsisVrfResult]{
		OutputState: o.OutputState,
	}
}

// Administrative state.
func (o LookupIsisVrfResultOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.AdminState }).(pulumi.StringOutput)
}

// Authentication Check for ISIS on Level-1.
func (o LookupIsisVrfResultOutput) AuthenticationCheckL1() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) bool { return v.AuthenticationCheckL1 }).(pulumi.BoolOutput)
}

// Authentication Check for ISIS on Level-2.
func (o LookupIsisVrfResultOutput) AuthenticationCheckL2() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) bool { return v.AuthenticationCheckL2 }).(pulumi.BoolOutput)
}

// Authentication Key for IS-IS on Level-1.
func (o LookupIsisVrfResultOutput) AuthenticationKeyL1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.AuthenticationKeyL1 }).(pulumi.StringOutput)
}

// Authentication Key for IS-IS on Level-2.
func (o LookupIsisVrfResultOutput) AuthenticationKeyL2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.AuthenticationKeyL2 }).(pulumi.StringOutput)
}

// IS-IS Authentication-Type for Level-1.
func (o LookupIsisVrfResultOutput) AuthenticationTypeL1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.AuthenticationTypeL1 }).(pulumi.StringOutput)
}

// IS-IS Authentication-Type for Level-2.
func (o LookupIsisVrfResultOutput) AuthenticationTypeL2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.AuthenticationTypeL2 }).(pulumi.StringOutput)
}

// The IS-IS domain bandwidth reference. This sets the default reference bandwidth used for calculating the IS-IS cost metric.
func (o LookupIsisVrfResultOutput) BandwidthReference() pulumi.IntOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) int { return v.BandwidthReference }).(pulumi.IntOutput)
}

// Bandwidth reference unit.
func (o LookupIsisVrfResultOutput) BanwidthReferenceUnit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.BanwidthReferenceUnit }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupIsisVrfResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The distinguished name of the object.
func (o LookupIsisVrfResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.Id }).(pulumi.StringOutput)
}

// IS-IS instance name.
func (o LookupIsisVrfResultOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.InstanceName }).(pulumi.StringOutput)
}

// IS-IS domain type.
func (o LookupIsisVrfResultOutput) IsType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.IsType }).(pulumi.StringOutput)
}

// IS-IS metric type.
func (o LookupIsisVrfResultOutput) MetricType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.MetricType }).(pulumi.StringOutput)
}

// The configuration of link-state packet (LSP) maximum transmission units (MTU) is supported. You can enable up to 4352 bytes.
func (o LookupIsisVrfResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// VRF name.
func (o LookupIsisVrfResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.Name }).(pulumi.StringOutput)
}

// Holds IS-IS domain NET (address) value.
func (o LookupIsisVrfResultOutput) Net() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.Net }).(pulumi.StringOutput)
}

// IS-IS Domain passive-interface default level.
func (o LookupIsisVrfResultOutput) PassiveDefault() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIsisVrfResult) string { return v.PassiveDefault }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIsisVrfResultOutput{})
}
