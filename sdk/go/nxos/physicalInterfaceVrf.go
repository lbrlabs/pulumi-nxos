// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage a physical interface VRF association.
//
// - API Documentation: [nwRtVrfMbr](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/nw:RtVrfMbr/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewPhysicalInterfaceVrf(ctx, "example", &nxos.PhysicalInterfaceVrfArgs{
//				InterfaceId: pulumi.String("eth1/10"),
//				VrfDn:       pulumi.String("sys/inst-default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/physicalInterfaceVrf:PhysicalInterfaceVrf example "sys/intf/phys-[eth1/10]/rtvrfMbr"
//
// ```
type PhysicalInterfaceVrf struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringOutput `pulumi:"vrfDn"`
}

// NewPhysicalInterfaceVrf registers a new resource with the given unique name, arguments, and options.
func NewPhysicalInterfaceVrf(ctx *pulumi.Context,
	name string, args *PhysicalInterfaceVrfArgs, opts ...pulumi.ResourceOption) (*PhysicalInterfaceVrf, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.VrfDn == nil {
		return nil, errors.New("invalid value for required argument 'VrfDn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PhysicalInterfaceVrf
	err := ctx.RegisterResource("nxos:index/physicalInterfaceVrf:PhysicalInterfaceVrf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPhysicalInterfaceVrf gets an existing PhysicalInterfaceVrf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPhysicalInterfaceVrf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PhysicalInterfaceVrfState, opts ...pulumi.ResourceOption) (*PhysicalInterfaceVrf, error) {
	var resource PhysicalInterfaceVrf
	err := ctx.ReadResource("nxos:index/physicalInterfaceVrf:PhysicalInterfaceVrf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PhysicalInterfaceVrf resources.
type physicalInterfaceVrfState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId *string `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn *string `pulumi:"vrfDn"`
}

type PhysicalInterfaceVrfState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringPtrInput
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringPtrInput
}

func (PhysicalInterfaceVrfState) ElementType() reflect.Type {
	return reflect.TypeOf((*physicalInterfaceVrfState)(nil)).Elem()
}

type physicalInterfaceVrfArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn string `pulumi:"vrfDn"`
}

// The set of arguments for constructing a PhysicalInterfaceVrf resource.
type PhysicalInterfaceVrfArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringInput
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringInput
}

func (PhysicalInterfaceVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*physicalInterfaceVrfArgs)(nil)).Elem()
}

type PhysicalInterfaceVrfInput interface {
	pulumi.Input

	ToPhysicalInterfaceVrfOutput() PhysicalInterfaceVrfOutput
	ToPhysicalInterfaceVrfOutputWithContext(ctx context.Context) PhysicalInterfaceVrfOutput
}

func (*PhysicalInterfaceVrf) ElementType() reflect.Type {
	return reflect.TypeOf((**PhysicalInterfaceVrf)(nil)).Elem()
}

func (i *PhysicalInterfaceVrf) ToPhysicalInterfaceVrfOutput() PhysicalInterfaceVrfOutput {
	return i.ToPhysicalInterfaceVrfOutputWithContext(context.Background())
}

func (i *PhysicalInterfaceVrf) ToPhysicalInterfaceVrfOutputWithContext(ctx context.Context) PhysicalInterfaceVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhysicalInterfaceVrfOutput)
}

func (i *PhysicalInterfaceVrf) ToOutput(ctx context.Context) pulumix.Output[*PhysicalInterfaceVrf] {
	return pulumix.Output[*PhysicalInterfaceVrf]{
		OutputState: i.ToPhysicalInterfaceVrfOutputWithContext(ctx).OutputState,
	}
}

// PhysicalInterfaceVrfArrayInput is an input type that accepts PhysicalInterfaceVrfArray and PhysicalInterfaceVrfArrayOutput values.
// You can construct a concrete instance of `PhysicalInterfaceVrfArrayInput` via:
//
//	PhysicalInterfaceVrfArray{ PhysicalInterfaceVrfArgs{...} }
type PhysicalInterfaceVrfArrayInput interface {
	pulumi.Input

	ToPhysicalInterfaceVrfArrayOutput() PhysicalInterfaceVrfArrayOutput
	ToPhysicalInterfaceVrfArrayOutputWithContext(context.Context) PhysicalInterfaceVrfArrayOutput
}

type PhysicalInterfaceVrfArray []PhysicalInterfaceVrfInput

func (PhysicalInterfaceVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PhysicalInterfaceVrf)(nil)).Elem()
}

func (i PhysicalInterfaceVrfArray) ToPhysicalInterfaceVrfArrayOutput() PhysicalInterfaceVrfArrayOutput {
	return i.ToPhysicalInterfaceVrfArrayOutputWithContext(context.Background())
}

func (i PhysicalInterfaceVrfArray) ToPhysicalInterfaceVrfArrayOutputWithContext(ctx context.Context) PhysicalInterfaceVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhysicalInterfaceVrfArrayOutput)
}

func (i PhysicalInterfaceVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]*PhysicalInterfaceVrf] {
	return pulumix.Output[[]*PhysicalInterfaceVrf]{
		OutputState: i.ToPhysicalInterfaceVrfArrayOutputWithContext(ctx).OutputState,
	}
}

// PhysicalInterfaceVrfMapInput is an input type that accepts PhysicalInterfaceVrfMap and PhysicalInterfaceVrfMapOutput values.
// You can construct a concrete instance of `PhysicalInterfaceVrfMapInput` via:
//
//	PhysicalInterfaceVrfMap{ "key": PhysicalInterfaceVrfArgs{...} }
type PhysicalInterfaceVrfMapInput interface {
	pulumi.Input

	ToPhysicalInterfaceVrfMapOutput() PhysicalInterfaceVrfMapOutput
	ToPhysicalInterfaceVrfMapOutputWithContext(context.Context) PhysicalInterfaceVrfMapOutput
}

type PhysicalInterfaceVrfMap map[string]PhysicalInterfaceVrfInput

func (PhysicalInterfaceVrfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PhysicalInterfaceVrf)(nil)).Elem()
}

func (i PhysicalInterfaceVrfMap) ToPhysicalInterfaceVrfMapOutput() PhysicalInterfaceVrfMapOutput {
	return i.ToPhysicalInterfaceVrfMapOutputWithContext(context.Background())
}

func (i PhysicalInterfaceVrfMap) ToPhysicalInterfaceVrfMapOutputWithContext(ctx context.Context) PhysicalInterfaceVrfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhysicalInterfaceVrfMapOutput)
}

func (i PhysicalInterfaceVrfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PhysicalInterfaceVrf] {
	return pulumix.Output[map[string]*PhysicalInterfaceVrf]{
		OutputState: i.ToPhysicalInterfaceVrfMapOutputWithContext(ctx).OutputState,
	}
}

type PhysicalInterfaceVrfOutput struct{ *pulumi.OutputState }

func (PhysicalInterfaceVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PhysicalInterfaceVrf)(nil)).Elem()
}

func (o PhysicalInterfaceVrfOutput) ToPhysicalInterfaceVrfOutput() PhysicalInterfaceVrfOutput {
	return o
}

func (o PhysicalInterfaceVrfOutput) ToPhysicalInterfaceVrfOutputWithContext(ctx context.Context) PhysicalInterfaceVrfOutput {
	return o
}

func (o PhysicalInterfaceVrfOutput) ToOutput(ctx context.Context) pulumix.Output[*PhysicalInterfaceVrf] {
	return pulumix.Output[*PhysicalInterfaceVrf]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o PhysicalInterfaceVrfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhysicalInterfaceVrf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
func (o PhysicalInterfaceVrfOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterfaceVrf) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// DN of VRF. For example: `sys/inst-VRF1`.
func (o PhysicalInterfaceVrfOutput) VrfDn() pulumi.StringOutput {
	return o.ApplyT(func(v *PhysicalInterfaceVrf) pulumi.StringOutput { return v.VrfDn }).(pulumi.StringOutput)
}

type PhysicalInterfaceVrfArrayOutput struct{ *pulumi.OutputState }

func (PhysicalInterfaceVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PhysicalInterfaceVrf)(nil)).Elem()
}

func (o PhysicalInterfaceVrfArrayOutput) ToPhysicalInterfaceVrfArrayOutput() PhysicalInterfaceVrfArrayOutput {
	return o
}

func (o PhysicalInterfaceVrfArrayOutput) ToPhysicalInterfaceVrfArrayOutputWithContext(ctx context.Context) PhysicalInterfaceVrfArrayOutput {
	return o
}

func (o PhysicalInterfaceVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PhysicalInterfaceVrf] {
	return pulumix.Output[[]*PhysicalInterfaceVrf]{
		OutputState: o.OutputState,
	}
}

func (o PhysicalInterfaceVrfArrayOutput) Index(i pulumi.IntInput) PhysicalInterfaceVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PhysicalInterfaceVrf {
		return vs[0].([]*PhysicalInterfaceVrf)[vs[1].(int)]
	}).(PhysicalInterfaceVrfOutput)
}

type PhysicalInterfaceVrfMapOutput struct{ *pulumi.OutputState }

func (PhysicalInterfaceVrfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PhysicalInterfaceVrf)(nil)).Elem()
}

func (o PhysicalInterfaceVrfMapOutput) ToPhysicalInterfaceVrfMapOutput() PhysicalInterfaceVrfMapOutput {
	return o
}

func (o PhysicalInterfaceVrfMapOutput) ToPhysicalInterfaceVrfMapOutputWithContext(ctx context.Context) PhysicalInterfaceVrfMapOutput {
	return o
}

func (o PhysicalInterfaceVrfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PhysicalInterfaceVrf] {
	return pulumix.Output[map[string]*PhysicalInterfaceVrf]{
		OutputState: o.OutputState,
	}
}

func (o PhysicalInterfaceVrfMapOutput) MapIndex(k pulumi.StringInput) PhysicalInterfaceVrfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PhysicalInterfaceVrf {
		return vs[0].(map[string]*PhysicalInterfaceVrf)[vs[1].(string)]
	}).(PhysicalInterfaceVrfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PhysicalInterfaceVrfInput)(nil)).Elem(), &PhysicalInterfaceVrf{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhysicalInterfaceVrfArrayInput)(nil)).Elem(), PhysicalInterfaceVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PhysicalInterfaceVrfMapInput)(nil)).Elem(), PhysicalInterfaceVrfMap{})
	pulumi.RegisterOutputType(PhysicalInterfaceVrfOutput{})
	pulumi.RegisterOutputType(PhysicalInterfaceVrfArrayOutput{})
	pulumi.RegisterOutputType(PhysicalInterfaceVrfMapOutput{})
}
