// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the configuration of a physical interface.
//
// - API Documentation: [l1PhysIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/l1:PhysIf/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupPhysicalInterface(ctx, &nxos.LookupPhysicalInterfaceArgs{
//				InterfaceId: "eth1/10",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPhysicalInterface(ctx *pulumi.Context, args *LookupPhysicalInterfaceArgs, opts ...pulumi.InvokeOption) (*LookupPhysicalInterfaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPhysicalInterfaceResult
	err := ctx.Invoke("nxos:index/getPhysicalInterface:getPhysicalInterface", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPhysicalInterface.
type LookupPhysicalInterfaceArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
}

// A collection of values returned by getPhysicalInterface.
type LookupPhysicalInterfaceResult struct {
	// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	AccessVlan string `pulumi:"accessVlan"`
	// Administrative port state.
	AdminState string `pulumi:"adminState"`
	// Administrative port auto-negotiation.
	AutoNegotiation string `pulumi:"autoNegotiation"`
	// The bandwidth parameter for a routed interface, port channel, or subinterface.
	Bandwidth int `pulumi:"bandwidth"`
	// The administrative port delay time.
	Delay int `pulumi:"delay"`
	// Interface description.
	Description string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Duplex.
	Duplex string `pulumi:"duplex"`
	// FEC mode.
	FecMode string `pulumi:"fecMode"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
	// Administrative port layer.
	Layer string `pulumi:"layer"`
	// Administrative port link debounce interval.
	LinkDebounceDown int `pulumi:"linkDebounceDown"`
	// Link Debounce Interval - LinkUp Event.
	LinkDebounceUp int `pulumi:"linkDebounceUp"`
	// Administrative link logging.
	LinkLogging string `pulumi:"linkLogging"`
	// The administrative port medium type.
	Medium string `pulumi:"medium"`
	// Administrative port mode.
	Mode string `pulumi:"mode"`
	// Administrative port MTU.
	Mtu int `pulumi:"mtu"`
	// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	NativeVlan string `pulumi:"nativeVlan"`
	// Administrative port speed.
	Speed string `pulumi:"speed"`
	// Speed group.
	SpeedGroup string `pulumi:"speedGroup"`
	// List of trunk VLANs.
	TrunkVlans string `pulumi:"trunkVlans"`
	// UDE (Uni-Directional Ethernet).
	UniDirectionalEthernet string `pulumi:"uniDirectionalEthernet"`
	// Port User Config Flags.
	UserConfiguredFlags string `pulumi:"userConfiguredFlags"`
}

func LookupPhysicalInterfaceOutput(ctx *pulumi.Context, args LookupPhysicalInterfaceOutputArgs, opts ...pulumi.InvokeOption) LookupPhysicalInterfaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPhysicalInterfaceResult, error) {
			args := v.(LookupPhysicalInterfaceArgs)
			r, err := LookupPhysicalInterface(ctx, &args, opts...)
			var s LookupPhysicalInterfaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPhysicalInterfaceResultOutput)
}

// A collection of arguments for invoking getPhysicalInterface.
type LookupPhysicalInterfaceOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringInput `pulumi:"interfaceId"`
}

func (LookupPhysicalInterfaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPhysicalInterfaceArgs)(nil)).Elem()
}

// A collection of values returned by getPhysicalInterface.
type LookupPhysicalInterfaceResultOutput struct{ *pulumi.OutputState }

func (LookupPhysicalInterfaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPhysicalInterfaceResult)(nil)).Elem()
}

func (o LookupPhysicalInterfaceResultOutput) ToLookupPhysicalInterfaceResultOutput() LookupPhysicalInterfaceResultOutput {
	return o
}

func (o LookupPhysicalInterfaceResultOutput) ToLookupPhysicalInterfaceResultOutputWithContext(ctx context.Context) LookupPhysicalInterfaceResultOutput {
	return o
}

func (o LookupPhysicalInterfaceResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupPhysicalInterfaceResult] {
	return pulumix.Output[LookupPhysicalInterfaceResult]{
		OutputState: o.OutputState,
	}
}

// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
func (o LookupPhysicalInterfaceResultOutput) AccessVlan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.AccessVlan }).(pulumi.StringOutput)
}

// Administrative port state.
func (o LookupPhysicalInterfaceResultOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.AdminState }).(pulumi.StringOutput)
}

// Administrative port auto-negotiation.
func (o LookupPhysicalInterfaceResultOutput) AutoNegotiation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.AutoNegotiation }).(pulumi.StringOutput)
}

// The bandwidth parameter for a routed interface, port channel, or subinterface.
func (o LookupPhysicalInterfaceResultOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// The administrative port delay time.
func (o LookupPhysicalInterfaceResultOutput) Delay() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) int { return v.Delay }).(pulumi.IntOutput)
}

// Interface description.
func (o LookupPhysicalInterfaceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.Description }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupPhysicalInterfaceResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Duplex.
func (o LookupPhysicalInterfaceResultOutput) Duplex() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.Duplex }).(pulumi.StringOutput)
}

// FEC mode.
func (o LookupPhysicalInterfaceResultOutput) FecMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.FecMode }).(pulumi.StringOutput)
}

// The distinguished name of the object.
func (o LookupPhysicalInterfaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
func (o LookupPhysicalInterfaceResultOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.InterfaceId }).(pulumi.StringOutput)
}

// Administrative port layer.
func (o LookupPhysicalInterfaceResultOutput) Layer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.Layer }).(pulumi.StringOutput)
}

// Administrative port link debounce interval.
func (o LookupPhysicalInterfaceResultOutput) LinkDebounceDown() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) int { return v.LinkDebounceDown }).(pulumi.IntOutput)
}

// Link Debounce Interval - LinkUp Event.
func (o LookupPhysicalInterfaceResultOutput) LinkDebounceUp() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) int { return v.LinkDebounceUp }).(pulumi.IntOutput)
}

// Administrative link logging.
func (o LookupPhysicalInterfaceResultOutput) LinkLogging() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.LinkLogging }).(pulumi.StringOutput)
}

// The administrative port medium type.
func (o LookupPhysicalInterfaceResultOutput) Medium() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.Medium }).(pulumi.StringOutput)
}

// Administrative port mode.
func (o LookupPhysicalInterfaceResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.Mode }).(pulumi.StringOutput)
}

// Administrative port MTU.
func (o LookupPhysicalInterfaceResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
func (o LookupPhysicalInterfaceResultOutput) NativeVlan() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.NativeVlan }).(pulumi.StringOutput)
}

// Administrative port speed.
func (o LookupPhysicalInterfaceResultOutput) Speed() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.Speed }).(pulumi.StringOutput)
}

// Speed group.
func (o LookupPhysicalInterfaceResultOutput) SpeedGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.SpeedGroup }).(pulumi.StringOutput)
}

// List of trunk VLANs.
func (o LookupPhysicalInterfaceResultOutput) TrunkVlans() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.TrunkVlans }).(pulumi.StringOutput)
}

// UDE (Uni-Directional Ethernet).
func (o LookupPhysicalInterfaceResultOutput) UniDirectionalEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.UniDirectionalEthernet }).(pulumi.StringOutput)
}

// Port User Config Flags.
func (o LookupPhysicalInterfaceResultOutput) UserConfiguredFlags() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhysicalInterfaceResult) string { return v.UserConfiguredFlags }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPhysicalInterfaceResultOutput{})
}
