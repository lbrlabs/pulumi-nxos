// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the queuing QoS policy system out configuration.
//
// - API Documentation: [ipqosSystem](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Qos/ipqos:System/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewQueuingQosPolicySystemOut(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/queuingQosPolicySystemOut:QueuingQosPolicySystemOut example "sys/ipqos/queuing/policy/out/sys"
//
// ```
type QueuingQosPolicySystemOut struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewQueuingQosPolicySystemOut registers a new resource with the given unique name, arguments, and options.
func NewQueuingQosPolicySystemOut(ctx *pulumi.Context,
	name string, args *QueuingQosPolicySystemOutArgs, opts ...pulumi.ResourceOption) (*QueuingQosPolicySystemOut, error) {
	if args == nil {
		args = &QueuingQosPolicySystemOutArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QueuingQosPolicySystemOut
	err := ctx.RegisterResource("nxos:index/queuingQosPolicySystemOut:QueuingQosPolicySystemOut", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueuingQosPolicySystemOut gets an existing QueuingQosPolicySystemOut resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueuingQosPolicySystemOut(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueuingQosPolicySystemOutState, opts ...pulumi.ResourceOption) (*QueuingQosPolicySystemOut, error) {
	var resource QueuingQosPolicySystemOut
	err := ctx.ReadResource("nxos:index/queuingQosPolicySystemOut:QueuingQosPolicySystemOut", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueuingQosPolicySystemOut resources.
type queuingQosPolicySystemOutState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type QueuingQosPolicySystemOutState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (QueuingQosPolicySystemOutState) ElementType() reflect.Type {
	return reflect.TypeOf((*queuingQosPolicySystemOutState)(nil)).Elem()
}

type queuingQosPolicySystemOutArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a QueuingQosPolicySystemOut resource.
type QueuingQosPolicySystemOutArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (QueuingQosPolicySystemOutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queuingQosPolicySystemOutArgs)(nil)).Elem()
}

type QueuingQosPolicySystemOutInput interface {
	pulumi.Input

	ToQueuingQosPolicySystemOutOutput() QueuingQosPolicySystemOutOutput
	ToQueuingQosPolicySystemOutOutputWithContext(ctx context.Context) QueuingQosPolicySystemOutOutput
}

func (*QueuingQosPolicySystemOut) ElementType() reflect.Type {
	return reflect.TypeOf((**QueuingQosPolicySystemOut)(nil)).Elem()
}

func (i *QueuingQosPolicySystemOut) ToQueuingQosPolicySystemOutOutput() QueuingQosPolicySystemOutOutput {
	return i.ToQueuingQosPolicySystemOutOutputWithContext(context.Background())
}

func (i *QueuingQosPolicySystemOut) ToQueuingQosPolicySystemOutOutputWithContext(ctx context.Context) QueuingQosPolicySystemOutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuingQosPolicySystemOutOutput)
}

func (i *QueuingQosPolicySystemOut) ToOutput(ctx context.Context) pulumix.Output[*QueuingQosPolicySystemOut] {
	return pulumix.Output[*QueuingQosPolicySystemOut]{
		OutputState: i.ToQueuingQosPolicySystemOutOutputWithContext(ctx).OutputState,
	}
}

// QueuingQosPolicySystemOutArrayInput is an input type that accepts QueuingQosPolicySystemOutArray and QueuingQosPolicySystemOutArrayOutput values.
// You can construct a concrete instance of `QueuingQosPolicySystemOutArrayInput` via:
//
//	QueuingQosPolicySystemOutArray{ QueuingQosPolicySystemOutArgs{...} }
type QueuingQosPolicySystemOutArrayInput interface {
	pulumi.Input

	ToQueuingQosPolicySystemOutArrayOutput() QueuingQosPolicySystemOutArrayOutput
	ToQueuingQosPolicySystemOutArrayOutputWithContext(context.Context) QueuingQosPolicySystemOutArrayOutput
}

type QueuingQosPolicySystemOutArray []QueuingQosPolicySystemOutInput

func (QueuingQosPolicySystemOutArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueuingQosPolicySystemOut)(nil)).Elem()
}

func (i QueuingQosPolicySystemOutArray) ToQueuingQosPolicySystemOutArrayOutput() QueuingQosPolicySystemOutArrayOutput {
	return i.ToQueuingQosPolicySystemOutArrayOutputWithContext(context.Background())
}

func (i QueuingQosPolicySystemOutArray) ToQueuingQosPolicySystemOutArrayOutputWithContext(ctx context.Context) QueuingQosPolicySystemOutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuingQosPolicySystemOutArrayOutput)
}

func (i QueuingQosPolicySystemOutArray) ToOutput(ctx context.Context) pulumix.Output[[]*QueuingQosPolicySystemOut] {
	return pulumix.Output[[]*QueuingQosPolicySystemOut]{
		OutputState: i.ToQueuingQosPolicySystemOutArrayOutputWithContext(ctx).OutputState,
	}
}

// QueuingQosPolicySystemOutMapInput is an input type that accepts QueuingQosPolicySystemOutMap and QueuingQosPolicySystemOutMapOutput values.
// You can construct a concrete instance of `QueuingQosPolicySystemOutMapInput` via:
//
//	QueuingQosPolicySystemOutMap{ "key": QueuingQosPolicySystemOutArgs{...} }
type QueuingQosPolicySystemOutMapInput interface {
	pulumi.Input

	ToQueuingQosPolicySystemOutMapOutput() QueuingQosPolicySystemOutMapOutput
	ToQueuingQosPolicySystemOutMapOutputWithContext(context.Context) QueuingQosPolicySystemOutMapOutput
}

type QueuingQosPolicySystemOutMap map[string]QueuingQosPolicySystemOutInput

func (QueuingQosPolicySystemOutMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueuingQosPolicySystemOut)(nil)).Elem()
}

func (i QueuingQosPolicySystemOutMap) ToQueuingQosPolicySystemOutMapOutput() QueuingQosPolicySystemOutMapOutput {
	return i.ToQueuingQosPolicySystemOutMapOutputWithContext(context.Background())
}

func (i QueuingQosPolicySystemOutMap) ToQueuingQosPolicySystemOutMapOutputWithContext(ctx context.Context) QueuingQosPolicySystemOutMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuingQosPolicySystemOutMapOutput)
}

func (i QueuingQosPolicySystemOutMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*QueuingQosPolicySystemOut] {
	return pulumix.Output[map[string]*QueuingQosPolicySystemOut]{
		OutputState: i.ToQueuingQosPolicySystemOutMapOutputWithContext(ctx).OutputState,
	}
}

type QueuingQosPolicySystemOutOutput struct{ *pulumi.OutputState }

func (QueuingQosPolicySystemOutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueuingQosPolicySystemOut)(nil)).Elem()
}

func (o QueuingQosPolicySystemOutOutput) ToQueuingQosPolicySystemOutOutput() QueuingQosPolicySystemOutOutput {
	return o
}

func (o QueuingQosPolicySystemOutOutput) ToQueuingQosPolicySystemOutOutputWithContext(ctx context.Context) QueuingQosPolicySystemOutOutput {
	return o
}

func (o QueuingQosPolicySystemOutOutput) ToOutput(ctx context.Context) pulumix.Output[*QueuingQosPolicySystemOut] {
	return pulumix.Output[*QueuingQosPolicySystemOut]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o QueuingQosPolicySystemOutOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueuingQosPolicySystemOut) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type QueuingQosPolicySystemOutArrayOutput struct{ *pulumi.OutputState }

func (QueuingQosPolicySystemOutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueuingQosPolicySystemOut)(nil)).Elem()
}

func (o QueuingQosPolicySystemOutArrayOutput) ToQueuingQosPolicySystemOutArrayOutput() QueuingQosPolicySystemOutArrayOutput {
	return o
}

func (o QueuingQosPolicySystemOutArrayOutput) ToQueuingQosPolicySystemOutArrayOutputWithContext(ctx context.Context) QueuingQosPolicySystemOutArrayOutput {
	return o
}

func (o QueuingQosPolicySystemOutArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*QueuingQosPolicySystemOut] {
	return pulumix.Output[[]*QueuingQosPolicySystemOut]{
		OutputState: o.OutputState,
	}
}

func (o QueuingQosPolicySystemOutArrayOutput) Index(i pulumi.IntInput) QueuingQosPolicySystemOutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QueuingQosPolicySystemOut {
		return vs[0].([]*QueuingQosPolicySystemOut)[vs[1].(int)]
	}).(QueuingQosPolicySystemOutOutput)
}

type QueuingQosPolicySystemOutMapOutput struct{ *pulumi.OutputState }

func (QueuingQosPolicySystemOutMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueuingQosPolicySystemOut)(nil)).Elem()
}

func (o QueuingQosPolicySystemOutMapOutput) ToQueuingQosPolicySystemOutMapOutput() QueuingQosPolicySystemOutMapOutput {
	return o
}

func (o QueuingQosPolicySystemOutMapOutput) ToQueuingQosPolicySystemOutMapOutputWithContext(ctx context.Context) QueuingQosPolicySystemOutMapOutput {
	return o
}

func (o QueuingQosPolicySystemOutMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*QueuingQosPolicySystemOut] {
	return pulumix.Output[map[string]*QueuingQosPolicySystemOut]{
		OutputState: o.OutputState,
	}
}

func (o QueuingQosPolicySystemOutMapOutput) MapIndex(k pulumi.StringInput) QueuingQosPolicySystemOutOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QueuingQosPolicySystemOut {
		return vs[0].(map[string]*QueuingQosPolicySystemOut)[vs[1].(string)]
	}).(QueuingQosPolicySystemOutOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueuingQosPolicySystemOutInput)(nil)).Elem(), &QueuingQosPolicySystemOut{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueuingQosPolicySystemOutArrayInput)(nil)).Elem(), QueuingQosPolicySystemOutArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueuingQosPolicySystemOutMapInput)(nil)).Elem(), QueuingQosPolicySystemOutMap{})
	pulumi.RegisterOutputType(QueuingQosPolicySystemOutOutput{})
	pulumi.RegisterOutputType(QueuingQosPolicySystemOutArrayOutput{})
	pulumi.RegisterOutputType(QueuingQosPolicySystemOutMapOutput{})
}
