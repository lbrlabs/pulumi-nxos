// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the OSPF feature configuration.
//
// - API Documentation: [fmOspf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Feature%20Management/fm:Ospf/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewFeatureOspf(ctx, "example", &nxos.FeatureOspfArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/featureOspf:FeatureOspf example "sys/fm/ospf"
//
// ```
type FeatureOspf struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureOspf registers a new resource with the given unique name, arguments, and options.
func NewFeatureOspf(ctx *pulumi.Context,
	name string, args *FeatureOspfArgs, opts ...pulumi.ResourceOption) (*FeatureOspf, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureOspf
	err := ctx.RegisterResource("nxos:index/featureOspf:FeatureOspf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureOspf gets an existing FeatureOspf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureOspf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureOspfState, opts ...pulumi.ResourceOption) (*FeatureOspf, error) {
	var resource FeatureOspf
	err := ctx.ReadResource("nxos:index/featureOspf:FeatureOspf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureOspf resources.
type featureOspfState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureOspfState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureOspfState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureOspfState)(nil)).Elem()
}

type featureOspfArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureOspf resource.
type FeatureOspfArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureOspfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureOspfArgs)(nil)).Elem()
}

type FeatureOspfInput interface {
	pulumi.Input

	ToFeatureOspfOutput() FeatureOspfOutput
	ToFeatureOspfOutputWithContext(ctx context.Context) FeatureOspfOutput
}

func (*FeatureOspf) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureOspf)(nil)).Elem()
}

func (i *FeatureOspf) ToFeatureOspfOutput() FeatureOspfOutput {
	return i.ToFeatureOspfOutputWithContext(context.Background())
}

func (i *FeatureOspf) ToFeatureOspfOutputWithContext(ctx context.Context) FeatureOspfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureOspfOutput)
}

func (i *FeatureOspf) ToOutput(ctx context.Context) pulumix.Output[*FeatureOspf] {
	return pulumix.Output[*FeatureOspf]{
		OutputState: i.ToFeatureOspfOutputWithContext(ctx).OutputState,
	}
}

// FeatureOspfArrayInput is an input type that accepts FeatureOspfArray and FeatureOspfArrayOutput values.
// You can construct a concrete instance of `FeatureOspfArrayInput` via:
//
//	FeatureOspfArray{ FeatureOspfArgs{...} }
type FeatureOspfArrayInput interface {
	pulumi.Input

	ToFeatureOspfArrayOutput() FeatureOspfArrayOutput
	ToFeatureOspfArrayOutputWithContext(context.Context) FeatureOspfArrayOutput
}

type FeatureOspfArray []FeatureOspfInput

func (FeatureOspfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureOspf)(nil)).Elem()
}

func (i FeatureOspfArray) ToFeatureOspfArrayOutput() FeatureOspfArrayOutput {
	return i.ToFeatureOspfArrayOutputWithContext(context.Background())
}

func (i FeatureOspfArray) ToFeatureOspfArrayOutputWithContext(ctx context.Context) FeatureOspfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureOspfArrayOutput)
}

func (i FeatureOspfArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureOspf] {
	return pulumix.Output[[]*FeatureOspf]{
		OutputState: i.ToFeatureOspfArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureOspfMapInput is an input type that accepts FeatureOspfMap and FeatureOspfMapOutput values.
// You can construct a concrete instance of `FeatureOspfMapInput` via:
//
//	FeatureOspfMap{ "key": FeatureOspfArgs{...} }
type FeatureOspfMapInput interface {
	pulumi.Input

	ToFeatureOspfMapOutput() FeatureOspfMapOutput
	ToFeatureOspfMapOutputWithContext(context.Context) FeatureOspfMapOutput
}

type FeatureOspfMap map[string]FeatureOspfInput

func (FeatureOspfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureOspf)(nil)).Elem()
}

func (i FeatureOspfMap) ToFeatureOspfMapOutput() FeatureOspfMapOutput {
	return i.ToFeatureOspfMapOutputWithContext(context.Background())
}

func (i FeatureOspfMap) ToFeatureOspfMapOutputWithContext(ctx context.Context) FeatureOspfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureOspfMapOutput)
}

func (i FeatureOspfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureOspf] {
	return pulumix.Output[map[string]*FeatureOspf]{
		OutputState: i.ToFeatureOspfMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureOspfOutput struct{ *pulumi.OutputState }

func (FeatureOspfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureOspf)(nil)).Elem()
}

func (o FeatureOspfOutput) ToFeatureOspfOutput() FeatureOspfOutput {
	return o
}

func (o FeatureOspfOutput) ToFeatureOspfOutputWithContext(ctx context.Context) FeatureOspfOutput {
	return o
}

func (o FeatureOspfOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureOspf] {
	return pulumix.Output[*FeatureOspf]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureOspfOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureOspf) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureOspfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureOspf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureOspfArrayOutput struct{ *pulumi.OutputState }

func (FeatureOspfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureOspf)(nil)).Elem()
}

func (o FeatureOspfArrayOutput) ToFeatureOspfArrayOutput() FeatureOspfArrayOutput {
	return o
}

func (o FeatureOspfArrayOutput) ToFeatureOspfArrayOutputWithContext(ctx context.Context) FeatureOspfArrayOutput {
	return o
}

func (o FeatureOspfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureOspf] {
	return pulumix.Output[[]*FeatureOspf]{
		OutputState: o.OutputState,
	}
}

func (o FeatureOspfArrayOutput) Index(i pulumi.IntInput) FeatureOspfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureOspf {
		return vs[0].([]*FeatureOspf)[vs[1].(int)]
	}).(FeatureOspfOutput)
}

type FeatureOspfMapOutput struct{ *pulumi.OutputState }

func (FeatureOspfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureOspf)(nil)).Elem()
}

func (o FeatureOspfMapOutput) ToFeatureOspfMapOutput() FeatureOspfMapOutput {
	return o
}

func (o FeatureOspfMapOutput) ToFeatureOspfMapOutputWithContext(ctx context.Context) FeatureOspfMapOutput {
	return o
}

func (o FeatureOspfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureOspf] {
	return pulumix.Output[map[string]*FeatureOspf]{
		OutputState: o.OutputState,
	}
}

func (o FeatureOspfMapOutput) MapIndex(k pulumi.StringInput) FeatureOspfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureOspf {
		return vs[0].(map[string]*FeatureOspf)[vs[1].(string)]
	}).(FeatureOspfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureOspfInput)(nil)).Elem(), &FeatureOspf{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureOspfArrayInput)(nil)).Elem(), FeatureOspfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureOspfMapInput)(nil)).Elem(), FeatureOspfMap{})
	pulumi.RegisterOutputType(FeatureOspfOutput{})
	pulumi.RegisterOutputType(FeatureOspfArrayOutput{})
	pulumi.RegisterOutputType(FeatureOspfMapOutput{})
}
