// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the OSPF VRF configuration.
//
// - API Documentation: [ospfDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:Dom/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewOspfVrf(ctx, "example", &nxos.OspfVrfArgs{
//				AdminState:            pulumi.String("enabled"),
//				BandwidthReference:    pulumi.Int(400000),
//				BanwidthReferenceUnit: pulumi.String("mbps"),
//				Distance:              pulumi.Int(110),
//				InstanceName:          pulumi.String("OSPF1"),
//				RouterId:              pulumi.String("34.56.78.90"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/ospfVrf:OspfVrf example "sys/ospf/inst-[OSPF1]/dom-[VRF1]"
//
// ```
type OspfVrf struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
	BandwidthReference pulumi.IntOutput `pulumi:"bandwidthReference"`
	// Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
	BanwidthReferenceUnit pulumi.StringOutput `pulumi:"banwidthReferenceUnit"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Administrative distance preference. - Range: `1`-`255` - Default value: `110`
	Distance pulumi.IntOutput `pulumi:"distance"`
	// OSPF instance name.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// VRF name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Router ID. - Default value: `0.0.0.0`
	RouterId pulumi.StringOutput `pulumi:"routerId"`
}

// NewOspfVrf registers a new resource with the given unique name, arguments, and options.
func NewOspfVrf(ctx *pulumi.Context,
	name string, args *OspfVrfArgs, opts ...pulumi.ResourceOption) (*OspfVrf, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OspfVrf
	err := ctx.RegisterResource("nxos:index/ospfVrf:OspfVrf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOspfVrf gets an existing OspfVrf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOspfVrf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OspfVrfState, opts ...pulumi.ResourceOption) (*OspfVrf, error) {
	var resource OspfVrf
	err := ctx.ReadResource("nxos:index/ospfVrf:OspfVrf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OspfVrf resources.
type ospfVrfState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
	BandwidthReference *int `pulumi:"bandwidthReference"`
	// Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
	BanwidthReferenceUnit *string `pulumi:"banwidthReferenceUnit"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Administrative distance preference. - Range: `1`-`255` - Default value: `110`
	Distance *int `pulumi:"distance"`
	// OSPF instance name.
	InstanceName *string `pulumi:"instanceName"`
	// VRF name.
	Name *string `pulumi:"name"`
	// Router ID. - Default value: `0.0.0.0`
	RouterId *string `pulumi:"routerId"`
}

type OspfVrfState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
	BandwidthReference pulumi.IntPtrInput
	// Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
	BanwidthReferenceUnit pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Administrative distance preference. - Range: `1`-`255` - Default value: `110`
	Distance pulumi.IntPtrInput
	// OSPF instance name.
	InstanceName pulumi.StringPtrInput
	// VRF name.
	Name pulumi.StringPtrInput
	// Router ID. - Default value: `0.0.0.0`
	RouterId pulumi.StringPtrInput
}

func (OspfVrfState) ElementType() reflect.Type {
	return reflect.TypeOf((*ospfVrfState)(nil)).Elem()
}

type ospfVrfArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
	BandwidthReference *int `pulumi:"bandwidthReference"`
	// Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
	BanwidthReferenceUnit *string `pulumi:"banwidthReferenceUnit"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Administrative distance preference. - Range: `1`-`255` - Default value: `110`
	Distance *int `pulumi:"distance"`
	// OSPF instance name.
	InstanceName string `pulumi:"instanceName"`
	// VRF name.
	Name *string `pulumi:"name"`
	// Router ID. - Default value: `0.0.0.0`
	RouterId *string `pulumi:"routerId"`
}

// The set of arguments for constructing a OspfVrf resource.
type OspfVrfArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
	BandwidthReference pulumi.IntPtrInput
	// Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
	BanwidthReferenceUnit pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Administrative distance preference. - Range: `1`-`255` - Default value: `110`
	Distance pulumi.IntPtrInput
	// OSPF instance name.
	InstanceName pulumi.StringInput
	// VRF name.
	Name pulumi.StringPtrInput
	// Router ID. - Default value: `0.0.0.0`
	RouterId pulumi.StringPtrInput
}

func (OspfVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ospfVrfArgs)(nil)).Elem()
}

type OspfVrfInput interface {
	pulumi.Input

	ToOspfVrfOutput() OspfVrfOutput
	ToOspfVrfOutputWithContext(ctx context.Context) OspfVrfOutput
}

func (*OspfVrf) ElementType() reflect.Type {
	return reflect.TypeOf((**OspfVrf)(nil)).Elem()
}

func (i *OspfVrf) ToOspfVrfOutput() OspfVrfOutput {
	return i.ToOspfVrfOutputWithContext(context.Background())
}

func (i *OspfVrf) ToOspfVrfOutputWithContext(ctx context.Context) OspfVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfVrfOutput)
}

func (i *OspfVrf) ToOutput(ctx context.Context) pulumix.Output[*OspfVrf] {
	return pulumix.Output[*OspfVrf]{
		OutputState: i.ToOspfVrfOutputWithContext(ctx).OutputState,
	}
}

// OspfVrfArrayInput is an input type that accepts OspfVrfArray and OspfVrfArrayOutput values.
// You can construct a concrete instance of `OspfVrfArrayInput` via:
//
//	OspfVrfArray{ OspfVrfArgs{...} }
type OspfVrfArrayInput interface {
	pulumi.Input

	ToOspfVrfArrayOutput() OspfVrfArrayOutput
	ToOspfVrfArrayOutputWithContext(context.Context) OspfVrfArrayOutput
}

type OspfVrfArray []OspfVrfInput

func (OspfVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OspfVrf)(nil)).Elem()
}

func (i OspfVrfArray) ToOspfVrfArrayOutput() OspfVrfArrayOutput {
	return i.ToOspfVrfArrayOutputWithContext(context.Background())
}

func (i OspfVrfArray) ToOspfVrfArrayOutputWithContext(ctx context.Context) OspfVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfVrfArrayOutput)
}

func (i OspfVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]*OspfVrf] {
	return pulumix.Output[[]*OspfVrf]{
		OutputState: i.ToOspfVrfArrayOutputWithContext(ctx).OutputState,
	}
}

// OspfVrfMapInput is an input type that accepts OspfVrfMap and OspfVrfMapOutput values.
// You can construct a concrete instance of `OspfVrfMapInput` via:
//
//	OspfVrfMap{ "key": OspfVrfArgs{...} }
type OspfVrfMapInput interface {
	pulumi.Input

	ToOspfVrfMapOutput() OspfVrfMapOutput
	ToOspfVrfMapOutputWithContext(context.Context) OspfVrfMapOutput
}

type OspfVrfMap map[string]OspfVrfInput

func (OspfVrfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OspfVrf)(nil)).Elem()
}

func (i OspfVrfMap) ToOspfVrfMapOutput() OspfVrfMapOutput {
	return i.ToOspfVrfMapOutputWithContext(context.Background())
}

func (i OspfVrfMap) ToOspfVrfMapOutputWithContext(ctx context.Context) OspfVrfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfVrfMapOutput)
}

func (i OspfVrfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OspfVrf] {
	return pulumix.Output[map[string]*OspfVrf]{
		OutputState: i.ToOspfVrfMapOutputWithContext(ctx).OutputState,
	}
}

type OspfVrfOutput struct{ *pulumi.OutputState }

func (OspfVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OspfVrf)(nil)).Elem()
}

func (o OspfVrfOutput) ToOspfVrfOutput() OspfVrfOutput {
	return o
}

func (o OspfVrfOutput) ToOspfVrfOutputWithContext(ctx context.Context) OspfVrfOutput {
	return o
}

func (o OspfVrfOutput) ToOutput(ctx context.Context) pulumix.Output[*OspfVrf] {
	return pulumix.Output[*OspfVrf]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o OspfVrfOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfVrf) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// Bandwidth reference value. - Range: `0`-`4294967295` - Default value: `40000`
func (o OspfVrfOutput) BandwidthReference() pulumi.IntOutput {
	return o.ApplyT(func(v *OspfVrf) pulumi.IntOutput { return v.BandwidthReference }).(pulumi.IntOutput)
}

// Bandwidth reference unit. - Choices: `mbps`, `gbps` - Default value: `mbps`
func (o OspfVrfOutput) BanwidthReferenceUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfVrf) pulumi.StringOutput { return v.BanwidthReferenceUnit }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o OspfVrfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OspfVrf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Administrative distance preference. - Range: `1`-`255` - Default value: `110`
func (o OspfVrfOutput) Distance() pulumi.IntOutput {
	return o.ApplyT(func(v *OspfVrf) pulumi.IntOutput { return v.Distance }).(pulumi.IntOutput)
}

// OSPF instance name.
func (o OspfVrfOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfVrf) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// VRF name.
func (o OspfVrfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfVrf) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Router ID. - Default value: `0.0.0.0`
func (o OspfVrfOutput) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *OspfVrf) pulumi.StringOutput { return v.RouterId }).(pulumi.StringOutput)
}

type OspfVrfArrayOutput struct{ *pulumi.OutputState }

func (OspfVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OspfVrf)(nil)).Elem()
}

func (o OspfVrfArrayOutput) ToOspfVrfArrayOutput() OspfVrfArrayOutput {
	return o
}

func (o OspfVrfArrayOutput) ToOspfVrfArrayOutputWithContext(ctx context.Context) OspfVrfArrayOutput {
	return o
}

func (o OspfVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OspfVrf] {
	return pulumix.Output[[]*OspfVrf]{
		OutputState: o.OutputState,
	}
}

func (o OspfVrfArrayOutput) Index(i pulumi.IntInput) OspfVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OspfVrf {
		return vs[0].([]*OspfVrf)[vs[1].(int)]
	}).(OspfVrfOutput)
}

type OspfVrfMapOutput struct{ *pulumi.OutputState }

func (OspfVrfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OspfVrf)(nil)).Elem()
}

func (o OspfVrfMapOutput) ToOspfVrfMapOutput() OspfVrfMapOutput {
	return o
}

func (o OspfVrfMapOutput) ToOspfVrfMapOutputWithContext(ctx context.Context) OspfVrfMapOutput {
	return o
}

func (o OspfVrfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OspfVrf] {
	return pulumix.Output[map[string]*OspfVrf]{
		OutputState: o.OutputState,
	}
}

func (o OspfVrfMapOutput) MapIndex(k pulumi.StringInput) OspfVrfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OspfVrf {
		return vs[0].(map[string]*OspfVrf)[vs[1].(string)]
	}).(OspfVrfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OspfVrfInput)(nil)).Elem(), &OspfVrf{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfVrfArrayInput)(nil)).Elem(), OspfVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfVrfMapInput)(nil)).Elem(), OspfVrfMap{})
	pulumi.RegisterOutputType(OspfVrfOutput{})
	pulumi.RegisterOutputType(OspfVrfArrayOutput{})
	pulumi.RegisterOutputType(OspfVrfMapOutput{})
}
