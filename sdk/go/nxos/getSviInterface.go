// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read an SVI interface.
//
// - API Documentation: [sviIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Interfaces/svi:If/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupSviInterface(ctx, &nxos.LookupSviInterfaceArgs{
//				InterfaceId: "vlan293",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSviInterface(ctx *pulumi.Context, args *LookupSviInterfaceArgs, opts ...pulumi.InvokeOption) (*LookupSviInterfaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSviInterfaceResult
	err := ctx.Invoke("nxos:index/getSviInterface:getSviInterface", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSviInterface.
type LookupSviInterfaceArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId string `pulumi:"interfaceId"`
}

// A collection of values returned by getSviInterface.
type LookupSviInterfaceResult struct {
	// Administrative port state.
	AdminState string `pulumi:"adminState"`
	// Specifies the administrative port bandwidth.
	Bandwidth int `pulumi:"bandwidth"`
	// Specifies the administrative port delay.
	Delay int `pulumi:"delay"`
	// Interface description.
	Description string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId string `pulumi:"interfaceId"`
	// The administrative port medium type.
	Medium string `pulumi:"medium"`
	// Administrative port MTU.
	Mtu int `pulumi:"mtu"`
}

func LookupSviInterfaceOutput(ctx *pulumi.Context, args LookupSviInterfaceOutputArgs, opts ...pulumi.InvokeOption) LookupSviInterfaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSviInterfaceResult, error) {
			args := v.(LookupSviInterfaceArgs)
			r, err := LookupSviInterface(ctx, &args, opts...)
			var s LookupSviInterfaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSviInterfaceResultOutput)
}

// A collection of arguments for invoking getSviInterface.
type LookupSviInterfaceOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId pulumi.StringInput `pulumi:"interfaceId"`
}

func (LookupSviInterfaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSviInterfaceArgs)(nil)).Elem()
}

// A collection of values returned by getSviInterface.
type LookupSviInterfaceResultOutput struct{ *pulumi.OutputState }

func (LookupSviInterfaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSviInterfaceResult)(nil)).Elem()
}

func (o LookupSviInterfaceResultOutput) ToLookupSviInterfaceResultOutput() LookupSviInterfaceResultOutput {
	return o
}

func (o LookupSviInterfaceResultOutput) ToLookupSviInterfaceResultOutputWithContext(ctx context.Context) LookupSviInterfaceResultOutput {
	return o
}

func (o LookupSviInterfaceResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupSviInterfaceResult] {
	return pulumix.Output[LookupSviInterfaceResult]{
		OutputState: o.OutputState,
	}
}

// Administrative port state.
func (o LookupSviInterfaceResultOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSviInterfaceResult) string { return v.AdminState }).(pulumi.StringOutput)
}

// Specifies the administrative port bandwidth.
func (o LookupSviInterfaceResultOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSviInterfaceResult) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// Specifies the administrative port delay.
func (o LookupSviInterfaceResultOutput) Delay() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSviInterfaceResult) int { return v.Delay }).(pulumi.IntOutput)
}

// Interface description.
func (o LookupSviInterfaceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSviInterfaceResult) string { return v.Description }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupSviInterfaceResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSviInterfaceResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The distinguished name of the object.
func (o LookupSviInterfaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSviInterfaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Must match first field in the output of `show intf brief`. Example: `vlan100`.
func (o LookupSviInterfaceResultOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSviInterfaceResult) string { return v.InterfaceId }).(pulumi.StringOutput)
}

// The administrative port medium type.
func (o LookupSviInterfaceResultOutput) Medium() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSviInterfaceResult) string { return v.Medium }).(pulumi.StringOutput)
}

// Administrative port MTU.
func (o LookupSviInterfaceResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSviInterfaceResult) int { return v.Mtu }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSviInterfaceResultOutput{})
}
