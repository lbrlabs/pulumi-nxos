// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage an IPv4 Prefix List configuration.
//
// - API Documentation: [rtpfxRuleV4](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtpfx:RuleV4/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewIpv4PrefixListRule(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/ipv4PrefixListRule:Ipv4PrefixListRule example "sys/rpm/pfxlistv4-[RULE1]"
//
// ```
type Ipv4PrefixListRule struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// IPv4 Prefix List Rule name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIpv4PrefixListRule registers a new resource with the given unique name, arguments, and options.
func NewIpv4PrefixListRule(ctx *pulumi.Context,
	name string, args *Ipv4PrefixListRuleArgs, opts ...pulumi.ResourceOption) (*Ipv4PrefixListRule, error) {
	if args == nil {
		args = &Ipv4PrefixListRuleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipv4PrefixListRule
	err := ctx.RegisterResource("nxos:index/ipv4PrefixListRule:Ipv4PrefixListRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv4PrefixListRule gets an existing Ipv4PrefixListRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv4PrefixListRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv4PrefixListRuleState, opts ...pulumi.ResourceOption) (*Ipv4PrefixListRule, error) {
	var resource Ipv4PrefixListRule
	err := ctx.ReadResource("nxos:index/ipv4PrefixListRule:Ipv4PrefixListRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv4PrefixListRule resources.
type ipv4PrefixListRuleState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// IPv4 Prefix List Rule name.
	Name *string `pulumi:"name"`
}

type Ipv4PrefixListRuleState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// IPv4 Prefix List Rule name.
	Name pulumi.StringPtrInput
}

func (Ipv4PrefixListRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4PrefixListRuleState)(nil)).Elem()
}

type ipv4PrefixListRuleArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// IPv4 Prefix List Rule name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Ipv4PrefixListRule resource.
type Ipv4PrefixListRuleArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// IPv4 Prefix List Rule name.
	Name pulumi.StringPtrInput
}

func (Ipv4PrefixListRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4PrefixListRuleArgs)(nil)).Elem()
}

type Ipv4PrefixListRuleInput interface {
	pulumi.Input

	ToIpv4PrefixListRuleOutput() Ipv4PrefixListRuleOutput
	ToIpv4PrefixListRuleOutputWithContext(ctx context.Context) Ipv4PrefixListRuleOutput
}

func (*Ipv4PrefixListRule) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4PrefixListRule)(nil)).Elem()
}

func (i *Ipv4PrefixListRule) ToIpv4PrefixListRuleOutput() Ipv4PrefixListRuleOutput {
	return i.ToIpv4PrefixListRuleOutputWithContext(context.Background())
}

func (i *Ipv4PrefixListRule) ToIpv4PrefixListRuleOutputWithContext(ctx context.Context) Ipv4PrefixListRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4PrefixListRuleOutput)
}

func (i *Ipv4PrefixListRule) ToOutput(ctx context.Context) pulumix.Output[*Ipv4PrefixListRule] {
	return pulumix.Output[*Ipv4PrefixListRule]{
		OutputState: i.ToIpv4PrefixListRuleOutputWithContext(ctx).OutputState,
	}
}

// Ipv4PrefixListRuleArrayInput is an input type that accepts Ipv4PrefixListRuleArray and Ipv4PrefixListRuleArrayOutput values.
// You can construct a concrete instance of `Ipv4PrefixListRuleArrayInput` via:
//
//	Ipv4PrefixListRuleArray{ Ipv4PrefixListRuleArgs{...} }
type Ipv4PrefixListRuleArrayInput interface {
	pulumi.Input

	ToIpv4PrefixListRuleArrayOutput() Ipv4PrefixListRuleArrayOutput
	ToIpv4PrefixListRuleArrayOutputWithContext(context.Context) Ipv4PrefixListRuleArrayOutput
}

type Ipv4PrefixListRuleArray []Ipv4PrefixListRuleInput

func (Ipv4PrefixListRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4PrefixListRule)(nil)).Elem()
}

func (i Ipv4PrefixListRuleArray) ToIpv4PrefixListRuleArrayOutput() Ipv4PrefixListRuleArrayOutput {
	return i.ToIpv4PrefixListRuleArrayOutputWithContext(context.Background())
}

func (i Ipv4PrefixListRuleArray) ToIpv4PrefixListRuleArrayOutputWithContext(ctx context.Context) Ipv4PrefixListRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4PrefixListRuleArrayOutput)
}

func (i Ipv4PrefixListRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4PrefixListRule] {
	return pulumix.Output[[]*Ipv4PrefixListRule]{
		OutputState: i.ToIpv4PrefixListRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// Ipv4PrefixListRuleMapInput is an input type that accepts Ipv4PrefixListRuleMap and Ipv4PrefixListRuleMapOutput values.
// You can construct a concrete instance of `Ipv4PrefixListRuleMapInput` via:
//
//	Ipv4PrefixListRuleMap{ "key": Ipv4PrefixListRuleArgs{...} }
type Ipv4PrefixListRuleMapInput interface {
	pulumi.Input

	ToIpv4PrefixListRuleMapOutput() Ipv4PrefixListRuleMapOutput
	ToIpv4PrefixListRuleMapOutputWithContext(context.Context) Ipv4PrefixListRuleMapOutput
}

type Ipv4PrefixListRuleMap map[string]Ipv4PrefixListRuleInput

func (Ipv4PrefixListRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4PrefixListRule)(nil)).Elem()
}

func (i Ipv4PrefixListRuleMap) ToIpv4PrefixListRuleMapOutput() Ipv4PrefixListRuleMapOutput {
	return i.ToIpv4PrefixListRuleMapOutputWithContext(context.Background())
}

func (i Ipv4PrefixListRuleMap) ToIpv4PrefixListRuleMapOutputWithContext(ctx context.Context) Ipv4PrefixListRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4PrefixListRuleMapOutput)
}

func (i Ipv4PrefixListRuleMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4PrefixListRule] {
	return pulumix.Output[map[string]*Ipv4PrefixListRule]{
		OutputState: i.ToIpv4PrefixListRuleMapOutputWithContext(ctx).OutputState,
	}
}

type Ipv4PrefixListRuleOutput struct{ *pulumi.OutputState }

func (Ipv4PrefixListRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4PrefixListRule)(nil)).Elem()
}

func (o Ipv4PrefixListRuleOutput) ToIpv4PrefixListRuleOutput() Ipv4PrefixListRuleOutput {
	return o
}

func (o Ipv4PrefixListRuleOutput) ToIpv4PrefixListRuleOutputWithContext(ctx context.Context) Ipv4PrefixListRuleOutput {
	return o
}

func (o Ipv4PrefixListRuleOutput) ToOutput(ctx context.Context) pulumix.Output[*Ipv4PrefixListRule] {
	return pulumix.Output[*Ipv4PrefixListRule]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o Ipv4PrefixListRuleOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4PrefixListRule) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// IPv4 Prefix List Rule name.
func (o Ipv4PrefixListRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4PrefixListRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type Ipv4PrefixListRuleArrayOutput struct{ *pulumi.OutputState }

func (Ipv4PrefixListRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4PrefixListRule)(nil)).Elem()
}

func (o Ipv4PrefixListRuleArrayOutput) ToIpv4PrefixListRuleArrayOutput() Ipv4PrefixListRuleArrayOutput {
	return o
}

func (o Ipv4PrefixListRuleArrayOutput) ToIpv4PrefixListRuleArrayOutputWithContext(ctx context.Context) Ipv4PrefixListRuleArrayOutput {
	return o
}

func (o Ipv4PrefixListRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4PrefixListRule] {
	return pulumix.Output[[]*Ipv4PrefixListRule]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4PrefixListRuleArrayOutput) Index(i pulumi.IntInput) Ipv4PrefixListRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv4PrefixListRule {
		return vs[0].([]*Ipv4PrefixListRule)[vs[1].(int)]
	}).(Ipv4PrefixListRuleOutput)
}

type Ipv4PrefixListRuleMapOutput struct{ *pulumi.OutputState }

func (Ipv4PrefixListRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4PrefixListRule)(nil)).Elem()
}

func (o Ipv4PrefixListRuleMapOutput) ToIpv4PrefixListRuleMapOutput() Ipv4PrefixListRuleMapOutput {
	return o
}

func (o Ipv4PrefixListRuleMapOutput) ToIpv4PrefixListRuleMapOutputWithContext(ctx context.Context) Ipv4PrefixListRuleMapOutput {
	return o
}

func (o Ipv4PrefixListRuleMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4PrefixListRule] {
	return pulumix.Output[map[string]*Ipv4PrefixListRule]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4PrefixListRuleMapOutput) MapIndex(k pulumi.StringInput) Ipv4PrefixListRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv4PrefixListRule {
		return vs[0].(map[string]*Ipv4PrefixListRule)[vs[1].(string)]
	}).(Ipv4PrefixListRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4PrefixListRuleInput)(nil)).Elem(), &Ipv4PrefixListRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4PrefixListRuleArrayInput)(nil)).Elem(), Ipv4PrefixListRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4PrefixListRuleMapInput)(nil)).Elem(), Ipv4PrefixListRuleMap{})
	pulumi.RegisterOutputType(Ipv4PrefixListRuleOutput{})
	pulumi.RegisterOutputType(Ipv4PrefixListRuleArrayOutput{})
	pulumi.RegisterOutputType(Ipv4PrefixListRuleMapOutput{})
}
