// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage a bridge domain.
//
// - API Documentation: [l2BD](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%202/l2:BD/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewBridgeDomain(ctx, "example", &nxos.BridgeDomainArgs{
//				AccessEncap: pulumi.String("unknown"),
//				FabricEncap: pulumi.String("vlan-10"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/bridgeDomain:BridgeDomain example "sys/bd/bd-[vlan-10]"
//
// ```
type BridgeDomain struct {
	pulumi.CustomResourceState

	// Access encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	AccessEncap pulumi.StringOutput `pulumi:"accessEncap"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Fabric encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	FabricEncap pulumi.StringOutput `pulumi:"fabricEncap"`
	// Bridge domain name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewBridgeDomain registers a new resource with the given unique name, arguments, and options.
func NewBridgeDomain(ctx *pulumi.Context,
	name string, args *BridgeDomainArgs, opts ...pulumi.ResourceOption) (*BridgeDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FabricEncap == nil {
		return nil, errors.New("invalid value for required argument 'FabricEncap'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BridgeDomain
	err := ctx.RegisterResource("nxos:index/bridgeDomain:BridgeDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBridgeDomain gets an existing BridgeDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBridgeDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BridgeDomainState, opts ...pulumi.ResourceOption) (*BridgeDomain, error) {
	var resource BridgeDomain
	err := ctx.ReadResource("nxos:index/bridgeDomain:BridgeDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BridgeDomain resources.
type bridgeDomainState struct {
	// Access encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	AccessEncap *string `pulumi:"accessEncap"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Fabric encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	FabricEncap *string `pulumi:"fabricEncap"`
	// Bridge domain name.
	Name *string `pulumi:"name"`
}

type BridgeDomainState struct {
	// Access encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	AccessEncap pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Fabric encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	FabricEncap pulumi.StringPtrInput
	// Bridge domain name.
	Name pulumi.StringPtrInput
}

func (BridgeDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*bridgeDomainState)(nil)).Elem()
}

type bridgeDomainArgs struct {
	// Access encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	AccessEncap *string `pulumi:"accessEncap"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Fabric encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	FabricEncap string `pulumi:"fabricEncap"`
	// Bridge domain name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a BridgeDomain resource.
type BridgeDomainArgs struct {
	// Access encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	AccessEncap pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Fabric encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	FabricEncap pulumi.StringInput
	// Bridge domain name.
	Name pulumi.StringPtrInput
}

func (BridgeDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bridgeDomainArgs)(nil)).Elem()
}

type BridgeDomainInput interface {
	pulumi.Input

	ToBridgeDomainOutput() BridgeDomainOutput
	ToBridgeDomainOutputWithContext(ctx context.Context) BridgeDomainOutput
}

func (*BridgeDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeDomain)(nil)).Elem()
}

func (i *BridgeDomain) ToBridgeDomainOutput() BridgeDomainOutput {
	return i.ToBridgeDomainOutputWithContext(context.Background())
}

func (i *BridgeDomain) ToBridgeDomainOutputWithContext(ctx context.Context) BridgeDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeDomainOutput)
}

func (i *BridgeDomain) ToOutput(ctx context.Context) pulumix.Output[*BridgeDomain] {
	return pulumix.Output[*BridgeDomain]{
		OutputState: i.ToBridgeDomainOutputWithContext(ctx).OutputState,
	}
}

// BridgeDomainArrayInput is an input type that accepts BridgeDomainArray and BridgeDomainArrayOutput values.
// You can construct a concrete instance of `BridgeDomainArrayInput` via:
//
//	BridgeDomainArray{ BridgeDomainArgs{...} }
type BridgeDomainArrayInput interface {
	pulumi.Input

	ToBridgeDomainArrayOutput() BridgeDomainArrayOutput
	ToBridgeDomainArrayOutputWithContext(context.Context) BridgeDomainArrayOutput
}

type BridgeDomainArray []BridgeDomainInput

func (BridgeDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BridgeDomain)(nil)).Elem()
}

func (i BridgeDomainArray) ToBridgeDomainArrayOutput() BridgeDomainArrayOutput {
	return i.ToBridgeDomainArrayOutputWithContext(context.Background())
}

func (i BridgeDomainArray) ToBridgeDomainArrayOutputWithContext(ctx context.Context) BridgeDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeDomainArrayOutput)
}

func (i BridgeDomainArray) ToOutput(ctx context.Context) pulumix.Output[[]*BridgeDomain] {
	return pulumix.Output[[]*BridgeDomain]{
		OutputState: i.ToBridgeDomainArrayOutputWithContext(ctx).OutputState,
	}
}

// BridgeDomainMapInput is an input type that accepts BridgeDomainMap and BridgeDomainMapOutput values.
// You can construct a concrete instance of `BridgeDomainMapInput` via:
//
//	BridgeDomainMap{ "key": BridgeDomainArgs{...} }
type BridgeDomainMapInput interface {
	pulumi.Input

	ToBridgeDomainMapOutput() BridgeDomainMapOutput
	ToBridgeDomainMapOutputWithContext(context.Context) BridgeDomainMapOutput
}

type BridgeDomainMap map[string]BridgeDomainInput

func (BridgeDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BridgeDomain)(nil)).Elem()
}

func (i BridgeDomainMap) ToBridgeDomainMapOutput() BridgeDomainMapOutput {
	return i.ToBridgeDomainMapOutputWithContext(context.Background())
}

func (i BridgeDomainMap) ToBridgeDomainMapOutputWithContext(ctx context.Context) BridgeDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BridgeDomainMapOutput)
}

func (i BridgeDomainMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*BridgeDomain] {
	return pulumix.Output[map[string]*BridgeDomain]{
		OutputState: i.ToBridgeDomainMapOutputWithContext(ctx).OutputState,
	}
}

type BridgeDomainOutput struct{ *pulumi.OutputState }

func (BridgeDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BridgeDomain)(nil)).Elem()
}

func (o BridgeDomainOutput) ToBridgeDomainOutput() BridgeDomainOutput {
	return o
}

func (o BridgeDomainOutput) ToBridgeDomainOutputWithContext(ctx context.Context) BridgeDomainOutput {
	return o
}

func (o BridgeDomainOutput) ToOutput(ctx context.Context) pulumix.Output[*BridgeDomain] {
	return pulumix.Output[*BridgeDomain]{
		OutputState: o.OutputState,
	}
}

// Access encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
func (o BridgeDomainOutput) AccessEncap() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgeDomain) pulumi.StringOutput { return v.AccessEncap }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o BridgeDomainOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BridgeDomain) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Fabric encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
func (o BridgeDomainOutput) FabricEncap() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgeDomain) pulumi.StringOutput { return v.FabricEncap }).(pulumi.StringOutput)
}

// Bridge domain name.
func (o BridgeDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BridgeDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type BridgeDomainArrayOutput struct{ *pulumi.OutputState }

func (BridgeDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BridgeDomain)(nil)).Elem()
}

func (o BridgeDomainArrayOutput) ToBridgeDomainArrayOutput() BridgeDomainArrayOutput {
	return o
}

func (o BridgeDomainArrayOutput) ToBridgeDomainArrayOutputWithContext(ctx context.Context) BridgeDomainArrayOutput {
	return o
}

func (o BridgeDomainArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*BridgeDomain] {
	return pulumix.Output[[]*BridgeDomain]{
		OutputState: o.OutputState,
	}
}

func (o BridgeDomainArrayOutput) Index(i pulumi.IntInput) BridgeDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BridgeDomain {
		return vs[0].([]*BridgeDomain)[vs[1].(int)]
	}).(BridgeDomainOutput)
}

type BridgeDomainMapOutput struct{ *pulumi.OutputState }

func (BridgeDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BridgeDomain)(nil)).Elem()
}

func (o BridgeDomainMapOutput) ToBridgeDomainMapOutput() BridgeDomainMapOutput {
	return o
}

func (o BridgeDomainMapOutput) ToBridgeDomainMapOutputWithContext(ctx context.Context) BridgeDomainMapOutput {
	return o
}

func (o BridgeDomainMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*BridgeDomain] {
	return pulumix.Output[map[string]*BridgeDomain]{
		OutputState: o.OutputState,
	}
}

func (o BridgeDomainMapOutput) MapIndex(k pulumi.StringInput) BridgeDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BridgeDomain {
		return vs[0].(map[string]*BridgeDomain)[vs[1].(string)]
	}).(BridgeDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeDomainInput)(nil)).Elem(), &BridgeDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeDomainArrayInput)(nil)).Elem(), BridgeDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BridgeDomainMapInput)(nil)).Elem(), BridgeDomainMap{})
	pulumi.RegisterOutputType(BridgeDomainOutput{})
	pulumi.RegisterOutputType(BridgeDomainArrayOutput{})
	pulumi.RegisterOutputType(BridgeDomainMapOutput{})
}
