// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the OSPF feature configuration.
//
// - API Documentation: [fmOspf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Feature%20Management/fm:Ospf/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupFeatureOspf(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFeatureOspf(ctx *pulumi.Context, args *LookupFeatureOspfArgs, opts ...pulumi.InvokeOption) (*LookupFeatureOspfResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFeatureOspfResult
	err := ctx.Invoke("nxos:index/getFeatureOspf:getFeatureOspf", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFeatureOspf.
type LookupFeatureOspfArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// A collection of values returned by getFeatureOspf.
type LookupFeatureOspfResult struct {
	// Administrative state.
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
}

func LookupFeatureOspfOutput(ctx *pulumi.Context, args LookupFeatureOspfOutputArgs, opts ...pulumi.InvokeOption) LookupFeatureOspfResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFeatureOspfResult, error) {
			args := v.(LookupFeatureOspfArgs)
			r, err := LookupFeatureOspf(ctx, &args, opts...)
			var s LookupFeatureOspfResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupFeatureOspfResultOutput)
}

// A collection of arguments for invoking getFeatureOspf.
type LookupFeatureOspfOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (LookupFeatureOspfOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureOspfArgs)(nil)).Elem()
}

// A collection of values returned by getFeatureOspf.
type LookupFeatureOspfResultOutput struct{ *pulumi.OutputState }

func (LookupFeatureOspfResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureOspfResult)(nil)).Elem()
}

func (o LookupFeatureOspfResultOutput) ToLookupFeatureOspfResultOutput() LookupFeatureOspfResultOutput {
	return o
}

func (o LookupFeatureOspfResultOutput) ToLookupFeatureOspfResultOutputWithContext(ctx context.Context) LookupFeatureOspfResultOutput {
	return o
}

func (o LookupFeatureOspfResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupFeatureOspfResult] {
	return pulumix.Output[LookupFeatureOspfResult]{
		OutputState: o.OutputState,
	}
}

// Administrative state.
func (o LookupFeatureOspfResultOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureOspfResult) string { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupFeatureOspfResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFeatureOspfResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The distinguished name of the object.
func (o LookupFeatureOspfResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureOspfResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFeatureOspfResultOutput{})
}
