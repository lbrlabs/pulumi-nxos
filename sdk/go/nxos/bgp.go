// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the global BGP configuration.
//
// - API Documentation: [bgpEntity](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/bgp:Entity/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewBgp(ctx, "example", &nxos.BgpArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/bgp:Bgp example "sys/bgp"
//
// ```
type Bgp struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewBgp registers a new resource with the given unique name, arguments, and options.
func NewBgp(ctx *pulumi.Context,
	name string, args *BgpArgs, opts ...pulumi.ResourceOption) (*Bgp, error) {
	if args == nil {
		args = &BgpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bgp
	err := ctx.RegisterResource("nxos:index/bgp:Bgp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBgp gets an existing Bgp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBgp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BgpState, opts ...pulumi.ResourceOption) (*Bgp, error) {
	var resource Bgp
	err := ctx.ReadResource("nxos:index/bgp:Bgp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bgp resources.
type bgpState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type BgpState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (BgpState) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpState)(nil)).Elem()
}

type bgpArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a Bgp resource.
type BgpArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (BgpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpArgs)(nil)).Elem()
}

type BgpInput interface {
	pulumi.Input

	ToBgpOutput() BgpOutput
	ToBgpOutputWithContext(ctx context.Context) BgpOutput
}

func (*Bgp) ElementType() reflect.Type {
	return reflect.TypeOf((**Bgp)(nil)).Elem()
}

func (i *Bgp) ToBgpOutput() BgpOutput {
	return i.ToBgpOutputWithContext(context.Background())
}

func (i *Bgp) ToBgpOutputWithContext(ctx context.Context) BgpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpOutput)
}

func (i *Bgp) ToOutput(ctx context.Context) pulumix.Output[*Bgp] {
	return pulumix.Output[*Bgp]{
		OutputState: i.ToBgpOutputWithContext(ctx).OutputState,
	}
}

// BgpArrayInput is an input type that accepts BgpArray and BgpArrayOutput values.
// You can construct a concrete instance of `BgpArrayInput` via:
//
//	BgpArray{ BgpArgs{...} }
type BgpArrayInput interface {
	pulumi.Input

	ToBgpArrayOutput() BgpArrayOutput
	ToBgpArrayOutputWithContext(context.Context) BgpArrayOutput
}

type BgpArray []BgpInput

func (BgpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bgp)(nil)).Elem()
}

func (i BgpArray) ToBgpArrayOutput() BgpArrayOutput {
	return i.ToBgpArrayOutputWithContext(context.Background())
}

func (i BgpArray) ToBgpArrayOutputWithContext(ctx context.Context) BgpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpArrayOutput)
}

func (i BgpArray) ToOutput(ctx context.Context) pulumix.Output[[]*Bgp] {
	return pulumix.Output[[]*Bgp]{
		OutputState: i.ToBgpArrayOutputWithContext(ctx).OutputState,
	}
}

// BgpMapInput is an input type that accepts BgpMap and BgpMapOutput values.
// You can construct a concrete instance of `BgpMapInput` via:
//
//	BgpMap{ "key": BgpArgs{...} }
type BgpMapInput interface {
	pulumi.Input

	ToBgpMapOutput() BgpMapOutput
	ToBgpMapOutputWithContext(context.Context) BgpMapOutput
}

type BgpMap map[string]BgpInput

func (BgpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bgp)(nil)).Elem()
}

func (i BgpMap) ToBgpMapOutput() BgpMapOutput {
	return i.ToBgpMapOutputWithContext(context.Background())
}

func (i BgpMap) ToBgpMapOutputWithContext(ctx context.Context) BgpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpMapOutput)
}

func (i BgpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Bgp] {
	return pulumix.Output[map[string]*Bgp]{
		OutputState: i.ToBgpMapOutputWithContext(ctx).OutputState,
	}
}

type BgpOutput struct{ *pulumi.OutputState }

func (BgpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bgp)(nil)).Elem()
}

func (o BgpOutput) ToBgpOutput() BgpOutput {
	return o
}

func (o BgpOutput) ToBgpOutputWithContext(ctx context.Context) BgpOutput {
	return o
}

func (o BgpOutput) ToOutput(ctx context.Context) pulumix.Output[*Bgp] {
	return pulumix.Output[*Bgp]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o BgpOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *Bgp) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o BgpOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bgp) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type BgpArrayOutput struct{ *pulumi.OutputState }

func (BgpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bgp)(nil)).Elem()
}

func (o BgpArrayOutput) ToBgpArrayOutput() BgpArrayOutput {
	return o
}

func (o BgpArrayOutput) ToBgpArrayOutputWithContext(ctx context.Context) BgpArrayOutput {
	return o
}

func (o BgpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Bgp] {
	return pulumix.Output[[]*Bgp]{
		OutputState: o.OutputState,
	}
}

func (o BgpArrayOutput) Index(i pulumi.IntInput) BgpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bgp {
		return vs[0].([]*Bgp)[vs[1].(int)]
	}).(BgpOutput)
}

type BgpMapOutput struct{ *pulumi.OutputState }

func (BgpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bgp)(nil)).Elem()
}

func (o BgpMapOutput) ToBgpMapOutput() BgpMapOutput {
	return o
}

func (o BgpMapOutput) ToBgpMapOutputWithContext(ctx context.Context) BgpMapOutput {
	return o
}

func (o BgpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Bgp] {
	return pulumix.Output[map[string]*Bgp]{
		OutputState: o.OutputState,
	}
}

func (o BgpMapOutput) MapIndex(k pulumi.StringInput) BgpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bgp {
		return vs[0].(map[string]*Bgp)[vs[1].(string)]
	}).(BgpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BgpInput)(nil)).Elem(), &Bgp{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpArrayInput)(nil)).Elem(), BgpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpMapInput)(nil)).Elem(), BgpMap{})
	pulumi.RegisterOutputType(BgpOutput{})
	pulumi.RegisterOutputType(BgpArrayOutput{})
	pulumi.RegisterOutputType(BgpMapOutput{})
}
