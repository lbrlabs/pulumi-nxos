// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read a EVPN VNI Route Distinguisher.
//
// - API Documentation: [rtctrlBDEvi](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtctrl:BDEvi/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupEvpnVni(ctx, &nxos.LookupEvpnVniArgs{
//				Encap: "vxlan-123456",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupEvpnVni(ctx *pulumi.Context, args *LookupEvpnVniArgs, opts ...pulumi.InvokeOption) (*LookupEvpnVniResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEvpnVniResult
	err := ctx.Invoke("nxos:index/getEvpnVni:getEvpnVni", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEvpnVni.
type LookupEvpnVniArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap string `pulumi:"encap"`
}

// A collection of values returned by getEvpnVni.
type LookupEvpnVniResult struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap string `pulumi:"encap"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
	// Route Distinguisher value in NX-OS DME format.
	RouteDistinguisher string `pulumi:"routeDistinguisher"`
}

func LookupEvpnVniOutput(ctx *pulumi.Context, args LookupEvpnVniOutputArgs, opts ...pulumi.InvokeOption) LookupEvpnVniResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEvpnVniResult, error) {
			args := v.(LookupEvpnVniArgs)
			r, err := LookupEvpnVni(ctx, &args, opts...)
			var s LookupEvpnVniResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEvpnVniResultOutput)
}

// A collection of arguments for invoking getEvpnVni.
type LookupEvpnVniOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap pulumi.StringInput `pulumi:"encap"`
}

func (LookupEvpnVniOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEvpnVniArgs)(nil)).Elem()
}

// A collection of values returned by getEvpnVni.
type LookupEvpnVniResultOutput struct{ *pulumi.OutputState }

func (LookupEvpnVniResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEvpnVniResult)(nil)).Elem()
}

func (o LookupEvpnVniResultOutput) ToLookupEvpnVniResultOutput() LookupEvpnVniResultOutput {
	return o
}

func (o LookupEvpnVniResultOutput) ToLookupEvpnVniResultOutputWithContext(ctx context.Context) LookupEvpnVniResultOutput {
	return o
}

func (o LookupEvpnVniResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupEvpnVniResult] {
	return pulumix.Output[LookupEvpnVniResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupEvpnVniResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupEvpnVniResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
func (o LookupEvpnVniResultOutput) Encap() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvpnVniResult) string { return v.Encap }).(pulumi.StringOutput)
}

// The distinguished name of the object.
func (o LookupEvpnVniResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvpnVniResult) string { return v.Id }).(pulumi.StringOutput)
}

// Route Distinguisher value in NX-OS DME format.
func (o LookupEvpnVniResultOutput) RouteDistinguisher() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEvpnVniResult) string { return v.RouteDistinguisher }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEvpnVniResultOutput{})
}
