// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VrfRouteTargetDirection struct {
	pulumi.CustomResourceState

	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily pulumi.StringOutput `pulumi:"addressFamily"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Route Target direction. - Choices: `import`, `export`
	Direction pulumi.StringOutput `pulumi:"direction"`
	// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
	RouteTargetAddressFamily pulumi.StringOutput `pulumi:"routeTargetAddressFamily"`
	// VRF name.
	Vrf pulumi.StringOutput `pulumi:"vrf"`
}

// NewVrfRouteTargetDirection registers a new resource with the given unique name, arguments, and options.
func NewVrfRouteTargetDirection(ctx *pulumi.Context,
	name string, args *VrfRouteTargetDirectionArgs, opts ...pulumi.ResourceOption) (*VrfRouteTargetDirection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressFamily == nil {
		return nil, errors.New("invalid value for required argument 'AddressFamily'")
	}
	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.RouteTargetAddressFamily == nil {
		return nil, errors.New("invalid value for required argument 'RouteTargetAddressFamily'")
	}
	if args.Vrf == nil {
		return nil, errors.New("invalid value for required argument 'Vrf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VrfRouteTargetDirection
	err := ctx.RegisterResource("nxos:nxos/vrfRouteTargetDirection:VrfRouteTargetDirection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrfRouteTargetDirection gets an existing VrfRouteTargetDirection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrfRouteTargetDirection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrfRouteTargetDirectionState, opts ...pulumi.ResourceOption) (*VrfRouteTargetDirection, error) {
	var resource VrfRouteTargetDirection
	err := ctx.ReadResource("nxos:nxos/vrfRouteTargetDirection:VrfRouteTargetDirection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrfRouteTargetDirection resources.
type vrfRouteTargetDirectionState struct {
	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily *string `pulumi:"addressFamily"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route Target direction. - Choices: `import`, `export`
	Direction *string `pulumi:"direction"`
	// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
	RouteTargetAddressFamily *string `pulumi:"routeTargetAddressFamily"`
	// VRF name.
	Vrf *string `pulumi:"vrf"`
}

type VrfRouteTargetDirectionState struct {
	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route Target direction. - Choices: `import`, `export`
	Direction pulumi.StringPtrInput
	// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
	RouteTargetAddressFamily pulumi.StringPtrInput
	// VRF name.
	Vrf pulumi.StringPtrInput
}

func (VrfRouteTargetDirectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrfRouteTargetDirectionState)(nil)).Elem()
}

type vrfRouteTargetDirectionArgs struct {
	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily string `pulumi:"addressFamily"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route Target direction. - Choices: `import`, `export`
	Direction string `pulumi:"direction"`
	// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
	RouteTargetAddressFamily string `pulumi:"routeTargetAddressFamily"`
	// VRF name.
	Vrf string `pulumi:"vrf"`
}

// The set of arguments for constructing a VrfRouteTargetDirection resource.
type VrfRouteTargetDirectionArgs struct {
	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route Target direction. - Choices: `import`, `export`
	Direction pulumi.StringInput
	// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
	RouteTargetAddressFamily pulumi.StringInput
	// VRF name.
	Vrf pulumi.StringInput
}

func (VrfRouteTargetDirectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrfRouteTargetDirectionArgs)(nil)).Elem()
}

type VrfRouteTargetDirectionInput interface {
	pulumi.Input

	ToVrfRouteTargetDirectionOutput() VrfRouteTargetDirectionOutput
	ToVrfRouteTargetDirectionOutputWithContext(ctx context.Context) VrfRouteTargetDirectionOutput
}

func (*VrfRouteTargetDirection) ElementType() reflect.Type {
	return reflect.TypeOf((**VrfRouteTargetDirection)(nil)).Elem()
}

func (i *VrfRouteTargetDirection) ToVrfRouteTargetDirectionOutput() VrfRouteTargetDirectionOutput {
	return i.ToVrfRouteTargetDirectionOutputWithContext(context.Background())
}

func (i *VrfRouteTargetDirection) ToVrfRouteTargetDirectionOutputWithContext(ctx context.Context) VrfRouteTargetDirectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRouteTargetDirectionOutput)
}

func (i *VrfRouteTargetDirection) ToOutput(ctx context.Context) pulumix.Output[*VrfRouteTargetDirection] {
	return pulumix.Output[*VrfRouteTargetDirection]{
		OutputState: i.ToVrfRouteTargetDirectionOutputWithContext(ctx).OutputState,
	}
}

// VrfRouteTargetDirectionArrayInput is an input type that accepts VrfRouteTargetDirectionArray and VrfRouteTargetDirectionArrayOutput values.
// You can construct a concrete instance of `VrfRouteTargetDirectionArrayInput` via:
//
//	VrfRouteTargetDirectionArray{ VrfRouteTargetDirectionArgs{...} }
type VrfRouteTargetDirectionArrayInput interface {
	pulumi.Input

	ToVrfRouteTargetDirectionArrayOutput() VrfRouteTargetDirectionArrayOutput
	ToVrfRouteTargetDirectionArrayOutputWithContext(context.Context) VrfRouteTargetDirectionArrayOutput
}

type VrfRouteTargetDirectionArray []VrfRouteTargetDirectionInput

func (VrfRouteTargetDirectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrfRouteTargetDirection)(nil)).Elem()
}

func (i VrfRouteTargetDirectionArray) ToVrfRouteTargetDirectionArrayOutput() VrfRouteTargetDirectionArrayOutput {
	return i.ToVrfRouteTargetDirectionArrayOutputWithContext(context.Background())
}

func (i VrfRouteTargetDirectionArray) ToVrfRouteTargetDirectionArrayOutputWithContext(ctx context.Context) VrfRouteTargetDirectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRouteTargetDirectionArrayOutput)
}

func (i VrfRouteTargetDirectionArray) ToOutput(ctx context.Context) pulumix.Output[[]*VrfRouteTargetDirection] {
	return pulumix.Output[[]*VrfRouteTargetDirection]{
		OutputState: i.ToVrfRouteTargetDirectionArrayOutputWithContext(ctx).OutputState,
	}
}

// VrfRouteTargetDirectionMapInput is an input type that accepts VrfRouteTargetDirectionMap and VrfRouteTargetDirectionMapOutput values.
// You can construct a concrete instance of `VrfRouteTargetDirectionMapInput` via:
//
//	VrfRouteTargetDirectionMap{ "key": VrfRouteTargetDirectionArgs{...} }
type VrfRouteTargetDirectionMapInput interface {
	pulumi.Input

	ToVrfRouteTargetDirectionMapOutput() VrfRouteTargetDirectionMapOutput
	ToVrfRouteTargetDirectionMapOutputWithContext(context.Context) VrfRouteTargetDirectionMapOutput
}

type VrfRouteTargetDirectionMap map[string]VrfRouteTargetDirectionInput

func (VrfRouteTargetDirectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrfRouteTargetDirection)(nil)).Elem()
}

func (i VrfRouteTargetDirectionMap) ToVrfRouteTargetDirectionMapOutput() VrfRouteTargetDirectionMapOutput {
	return i.ToVrfRouteTargetDirectionMapOutputWithContext(context.Background())
}

func (i VrfRouteTargetDirectionMap) ToVrfRouteTargetDirectionMapOutputWithContext(ctx context.Context) VrfRouteTargetDirectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRouteTargetDirectionMapOutput)
}

func (i VrfRouteTargetDirectionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VrfRouteTargetDirection] {
	return pulumix.Output[map[string]*VrfRouteTargetDirection]{
		OutputState: i.ToVrfRouteTargetDirectionMapOutputWithContext(ctx).OutputState,
	}
}

type VrfRouteTargetDirectionOutput struct{ *pulumi.OutputState }

func (VrfRouteTargetDirectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrfRouteTargetDirection)(nil)).Elem()
}

func (o VrfRouteTargetDirectionOutput) ToVrfRouteTargetDirectionOutput() VrfRouteTargetDirectionOutput {
	return o
}

func (o VrfRouteTargetDirectionOutput) ToVrfRouteTargetDirectionOutputWithContext(ctx context.Context) VrfRouteTargetDirectionOutput {
	return o
}

func (o VrfRouteTargetDirectionOutput) ToOutput(ctx context.Context) pulumix.Output[*VrfRouteTargetDirection] {
	return pulumix.Output[*VrfRouteTargetDirection]{
		OutputState: o.OutputState,
	}
}

// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
func (o VrfRouteTargetDirectionOutput) AddressFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *VrfRouteTargetDirection) pulumi.StringOutput { return v.AddressFamily }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o VrfRouteTargetDirectionOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VrfRouteTargetDirection) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Route Target direction. - Choices: `import`, `export`
func (o VrfRouteTargetDirectionOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *VrfRouteTargetDirection) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
func (o VrfRouteTargetDirectionOutput) RouteTargetAddressFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *VrfRouteTargetDirection) pulumi.StringOutput { return v.RouteTargetAddressFamily }).(pulumi.StringOutput)
}

// VRF name.
func (o VrfRouteTargetDirectionOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v *VrfRouteTargetDirection) pulumi.StringOutput { return v.Vrf }).(pulumi.StringOutput)
}

type VrfRouteTargetDirectionArrayOutput struct{ *pulumi.OutputState }

func (VrfRouteTargetDirectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrfRouteTargetDirection)(nil)).Elem()
}

func (o VrfRouteTargetDirectionArrayOutput) ToVrfRouteTargetDirectionArrayOutput() VrfRouteTargetDirectionArrayOutput {
	return o
}

func (o VrfRouteTargetDirectionArrayOutput) ToVrfRouteTargetDirectionArrayOutputWithContext(ctx context.Context) VrfRouteTargetDirectionArrayOutput {
	return o
}

func (o VrfRouteTargetDirectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VrfRouteTargetDirection] {
	return pulumix.Output[[]*VrfRouteTargetDirection]{
		OutputState: o.OutputState,
	}
}

func (o VrfRouteTargetDirectionArrayOutput) Index(i pulumi.IntInput) VrfRouteTargetDirectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VrfRouteTargetDirection {
		return vs[0].([]*VrfRouteTargetDirection)[vs[1].(int)]
	}).(VrfRouteTargetDirectionOutput)
}

type VrfRouteTargetDirectionMapOutput struct{ *pulumi.OutputState }

func (VrfRouteTargetDirectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrfRouteTargetDirection)(nil)).Elem()
}

func (o VrfRouteTargetDirectionMapOutput) ToVrfRouteTargetDirectionMapOutput() VrfRouteTargetDirectionMapOutput {
	return o
}

func (o VrfRouteTargetDirectionMapOutput) ToVrfRouteTargetDirectionMapOutputWithContext(ctx context.Context) VrfRouteTargetDirectionMapOutput {
	return o
}

func (o VrfRouteTargetDirectionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VrfRouteTargetDirection] {
	return pulumix.Output[map[string]*VrfRouteTargetDirection]{
		OutputState: o.OutputState,
	}
}

func (o VrfRouteTargetDirectionMapOutput) MapIndex(k pulumi.StringInput) VrfRouteTargetDirectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VrfRouteTargetDirection {
		return vs[0].(map[string]*VrfRouteTargetDirection)[vs[1].(string)]
	}).(VrfRouteTargetDirectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRouteTargetDirectionInput)(nil)).Elem(), &VrfRouteTargetDirection{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRouteTargetDirectionArrayInput)(nil)).Elem(), VrfRouteTargetDirectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRouteTargetDirectionMapInput)(nil)).Elem(), VrfRouteTargetDirectionMap{})
	pulumi.RegisterOutputType(VrfRouteTargetDirectionOutput{})
	pulumi.RegisterOutputType(VrfRouteTargetDirectionArrayOutput{})
	pulumi.RegisterOutputType(VrfRouteTargetDirectionMapOutput{})
}
