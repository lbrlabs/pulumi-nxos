// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FeatureNvOverlay struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureNvOverlay registers a new resource with the given unique name, arguments, and options.
func NewFeatureNvOverlay(ctx *pulumi.Context,
	name string, args *FeatureNvOverlayArgs, opts ...pulumi.ResourceOption) (*FeatureNvOverlay, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureNvOverlay
	err := ctx.RegisterResource("nxos:nxos/featureNvOverlay:FeatureNvOverlay", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureNvOverlay gets an existing FeatureNvOverlay resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureNvOverlay(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureNvOverlayState, opts ...pulumi.ResourceOption) (*FeatureNvOverlay, error) {
	var resource FeatureNvOverlay
	err := ctx.ReadResource("nxos:nxos/featureNvOverlay:FeatureNvOverlay", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureNvOverlay resources.
type featureNvOverlayState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureNvOverlayState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureNvOverlayState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureNvOverlayState)(nil)).Elem()
}

type featureNvOverlayArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureNvOverlay resource.
type FeatureNvOverlayArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureNvOverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureNvOverlayArgs)(nil)).Elem()
}

type FeatureNvOverlayInput interface {
	pulumi.Input

	ToFeatureNvOverlayOutput() FeatureNvOverlayOutput
	ToFeatureNvOverlayOutputWithContext(ctx context.Context) FeatureNvOverlayOutput
}

func (*FeatureNvOverlay) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureNvOverlay)(nil)).Elem()
}

func (i *FeatureNvOverlay) ToFeatureNvOverlayOutput() FeatureNvOverlayOutput {
	return i.ToFeatureNvOverlayOutputWithContext(context.Background())
}

func (i *FeatureNvOverlay) ToFeatureNvOverlayOutputWithContext(ctx context.Context) FeatureNvOverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureNvOverlayOutput)
}

func (i *FeatureNvOverlay) ToOutput(ctx context.Context) pulumix.Output[*FeatureNvOverlay] {
	return pulumix.Output[*FeatureNvOverlay]{
		OutputState: i.ToFeatureNvOverlayOutputWithContext(ctx).OutputState,
	}
}

// FeatureNvOverlayArrayInput is an input type that accepts FeatureNvOverlayArray and FeatureNvOverlayArrayOutput values.
// You can construct a concrete instance of `FeatureNvOverlayArrayInput` via:
//
//	FeatureNvOverlayArray{ FeatureNvOverlayArgs{...} }
type FeatureNvOverlayArrayInput interface {
	pulumi.Input

	ToFeatureNvOverlayArrayOutput() FeatureNvOverlayArrayOutput
	ToFeatureNvOverlayArrayOutputWithContext(context.Context) FeatureNvOverlayArrayOutput
}

type FeatureNvOverlayArray []FeatureNvOverlayInput

func (FeatureNvOverlayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureNvOverlay)(nil)).Elem()
}

func (i FeatureNvOverlayArray) ToFeatureNvOverlayArrayOutput() FeatureNvOverlayArrayOutput {
	return i.ToFeatureNvOverlayArrayOutputWithContext(context.Background())
}

func (i FeatureNvOverlayArray) ToFeatureNvOverlayArrayOutputWithContext(ctx context.Context) FeatureNvOverlayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureNvOverlayArrayOutput)
}

func (i FeatureNvOverlayArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureNvOverlay] {
	return pulumix.Output[[]*FeatureNvOverlay]{
		OutputState: i.ToFeatureNvOverlayArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureNvOverlayMapInput is an input type that accepts FeatureNvOverlayMap and FeatureNvOverlayMapOutput values.
// You can construct a concrete instance of `FeatureNvOverlayMapInput` via:
//
//	FeatureNvOverlayMap{ "key": FeatureNvOverlayArgs{...} }
type FeatureNvOverlayMapInput interface {
	pulumi.Input

	ToFeatureNvOverlayMapOutput() FeatureNvOverlayMapOutput
	ToFeatureNvOverlayMapOutputWithContext(context.Context) FeatureNvOverlayMapOutput
}

type FeatureNvOverlayMap map[string]FeatureNvOverlayInput

func (FeatureNvOverlayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureNvOverlay)(nil)).Elem()
}

func (i FeatureNvOverlayMap) ToFeatureNvOverlayMapOutput() FeatureNvOverlayMapOutput {
	return i.ToFeatureNvOverlayMapOutputWithContext(context.Background())
}

func (i FeatureNvOverlayMap) ToFeatureNvOverlayMapOutputWithContext(ctx context.Context) FeatureNvOverlayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureNvOverlayMapOutput)
}

func (i FeatureNvOverlayMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureNvOverlay] {
	return pulumix.Output[map[string]*FeatureNvOverlay]{
		OutputState: i.ToFeatureNvOverlayMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureNvOverlayOutput struct{ *pulumi.OutputState }

func (FeatureNvOverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureNvOverlay)(nil)).Elem()
}

func (o FeatureNvOverlayOutput) ToFeatureNvOverlayOutput() FeatureNvOverlayOutput {
	return o
}

func (o FeatureNvOverlayOutput) ToFeatureNvOverlayOutputWithContext(ctx context.Context) FeatureNvOverlayOutput {
	return o
}

func (o FeatureNvOverlayOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureNvOverlay] {
	return pulumix.Output[*FeatureNvOverlay]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureNvOverlayOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureNvOverlay) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureNvOverlayOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureNvOverlay) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureNvOverlayArrayOutput struct{ *pulumi.OutputState }

func (FeatureNvOverlayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureNvOverlay)(nil)).Elem()
}

func (o FeatureNvOverlayArrayOutput) ToFeatureNvOverlayArrayOutput() FeatureNvOverlayArrayOutput {
	return o
}

func (o FeatureNvOverlayArrayOutput) ToFeatureNvOverlayArrayOutputWithContext(ctx context.Context) FeatureNvOverlayArrayOutput {
	return o
}

func (o FeatureNvOverlayArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureNvOverlay] {
	return pulumix.Output[[]*FeatureNvOverlay]{
		OutputState: o.OutputState,
	}
}

func (o FeatureNvOverlayArrayOutput) Index(i pulumi.IntInput) FeatureNvOverlayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureNvOverlay {
		return vs[0].([]*FeatureNvOverlay)[vs[1].(int)]
	}).(FeatureNvOverlayOutput)
}

type FeatureNvOverlayMapOutput struct{ *pulumi.OutputState }

func (FeatureNvOverlayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureNvOverlay)(nil)).Elem()
}

func (o FeatureNvOverlayMapOutput) ToFeatureNvOverlayMapOutput() FeatureNvOverlayMapOutput {
	return o
}

func (o FeatureNvOverlayMapOutput) ToFeatureNvOverlayMapOutputWithContext(ctx context.Context) FeatureNvOverlayMapOutput {
	return o
}

func (o FeatureNvOverlayMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureNvOverlay] {
	return pulumix.Output[map[string]*FeatureNvOverlay]{
		OutputState: o.OutputState,
	}
}

func (o FeatureNvOverlayMapOutput) MapIndex(k pulumi.StringInput) FeatureNvOverlayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureNvOverlay {
		return vs[0].(map[string]*FeatureNvOverlay)[vs[1].(string)]
	}).(FeatureNvOverlayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureNvOverlayInput)(nil)).Elem(), &FeatureNvOverlay{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureNvOverlayArrayInput)(nil)).Elem(), FeatureNvOverlayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureNvOverlayMapInput)(nil)).Elem(), FeatureNvOverlayMap{})
	pulumi.RegisterOutputType(FeatureNvOverlayOutput{})
	pulumi.RegisterOutputType(FeatureNvOverlayArrayOutput{})
	pulumi.RegisterOutputType(FeatureNvOverlayMapOutput{})
}
