// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FeatureSsh struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureSsh registers a new resource with the given unique name, arguments, and options.
func NewFeatureSsh(ctx *pulumi.Context,
	name string, args *FeatureSshArgs, opts ...pulumi.ResourceOption) (*FeatureSsh, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureSsh
	err := ctx.RegisterResource("nxos:nxos/featureSsh:FeatureSsh", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureSsh gets an existing FeatureSsh resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureSsh(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureSshState, opts ...pulumi.ResourceOption) (*FeatureSsh, error) {
	var resource FeatureSsh
	err := ctx.ReadResource("nxos:nxos/featureSsh:FeatureSsh", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureSsh resources.
type featureSshState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureSshState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureSshState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureSshState)(nil)).Elem()
}

type featureSshArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureSsh resource.
type FeatureSshArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureSshArgs)(nil)).Elem()
}

type FeatureSshInput interface {
	pulumi.Input

	ToFeatureSshOutput() FeatureSshOutput
	ToFeatureSshOutputWithContext(ctx context.Context) FeatureSshOutput
}

func (*FeatureSsh) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureSsh)(nil)).Elem()
}

func (i *FeatureSsh) ToFeatureSshOutput() FeatureSshOutput {
	return i.ToFeatureSshOutputWithContext(context.Background())
}

func (i *FeatureSsh) ToFeatureSshOutputWithContext(ctx context.Context) FeatureSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureSshOutput)
}

func (i *FeatureSsh) ToOutput(ctx context.Context) pulumix.Output[*FeatureSsh] {
	return pulumix.Output[*FeatureSsh]{
		OutputState: i.ToFeatureSshOutputWithContext(ctx).OutputState,
	}
}

// FeatureSshArrayInput is an input type that accepts FeatureSshArray and FeatureSshArrayOutput values.
// You can construct a concrete instance of `FeatureSshArrayInput` via:
//
//	FeatureSshArray{ FeatureSshArgs{...} }
type FeatureSshArrayInput interface {
	pulumi.Input

	ToFeatureSshArrayOutput() FeatureSshArrayOutput
	ToFeatureSshArrayOutputWithContext(context.Context) FeatureSshArrayOutput
}

type FeatureSshArray []FeatureSshInput

func (FeatureSshArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureSsh)(nil)).Elem()
}

func (i FeatureSshArray) ToFeatureSshArrayOutput() FeatureSshArrayOutput {
	return i.ToFeatureSshArrayOutputWithContext(context.Background())
}

func (i FeatureSshArray) ToFeatureSshArrayOutputWithContext(ctx context.Context) FeatureSshArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureSshArrayOutput)
}

func (i FeatureSshArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureSsh] {
	return pulumix.Output[[]*FeatureSsh]{
		OutputState: i.ToFeatureSshArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureSshMapInput is an input type that accepts FeatureSshMap and FeatureSshMapOutput values.
// You can construct a concrete instance of `FeatureSshMapInput` via:
//
//	FeatureSshMap{ "key": FeatureSshArgs{...} }
type FeatureSshMapInput interface {
	pulumi.Input

	ToFeatureSshMapOutput() FeatureSshMapOutput
	ToFeatureSshMapOutputWithContext(context.Context) FeatureSshMapOutput
}

type FeatureSshMap map[string]FeatureSshInput

func (FeatureSshMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureSsh)(nil)).Elem()
}

func (i FeatureSshMap) ToFeatureSshMapOutput() FeatureSshMapOutput {
	return i.ToFeatureSshMapOutputWithContext(context.Background())
}

func (i FeatureSshMap) ToFeatureSshMapOutputWithContext(ctx context.Context) FeatureSshMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureSshMapOutput)
}

func (i FeatureSshMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureSsh] {
	return pulumix.Output[map[string]*FeatureSsh]{
		OutputState: i.ToFeatureSshMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureSshOutput struct{ *pulumi.OutputState }

func (FeatureSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureSsh)(nil)).Elem()
}

func (o FeatureSshOutput) ToFeatureSshOutput() FeatureSshOutput {
	return o
}

func (o FeatureSshOutput) ToFeatureSshOutputWithContext(ctx context.Context) FeatureSshOutput {
	return o
}

func (o FeatureSshOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureSsh] {
	return pulumix.Output[*FeatureSsh]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureSshOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureSsh) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureSshOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureSsh) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureSshArrayOutput struct{ *pulumi.OutputState }

func (FeatureSshArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureSsh)(nil)).Elem()
}

func (o FeatureSshArrayOutput) ToFeatureSshArrayOutput() FeatureSshArrayOutput {
	return o
}

func (o FeatureSshArrayOutput) ToFeatureSshArrayOutputWithContext(ctx context.Context) FeatureSshArrayOutput {
	return o
}

func (o FeatureSshArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureSsh] {
	return pulumix.Output[[]*FeatureSsh]{
		OutputState: o.OutputState,
	}
}

func (o FeatureSshArrayOutput) Index(i pulumi.IntInput) FeatureSshOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureSsh {
		return vs[0].([]*FeatureSsh)[vs[1].(int)]
	}).(FeatureSshOutput)
}

type FeatureSshMapOutput struct{ *pulumi.OutputState }

func (FeatureSshMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureSsh)(nil)).Elem()
}

func (o FeatureSshMapOutput) ToFeatureSshMapOutput() FeatureSshMapOutput {
	return o
}

func (o FeatureSshMapOutput) ToFeatureSshMapOutputWithContext(ctx context.Context) FeatureSshMapOutput {
	return o
}

func (o FeatureSshMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureSsh] {
	return pulumix.Output[map[string]*FeatureSsh]{
		OutputState: o.OutputState,
	}
}

func (o FeatureSshMapOutput) MapIndex(k pulumi.StringInput) FeatureSshOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureSsh {
		return vs[0].(map[string]*FeatureSsh)[vs[1].(string)]
	}).(FeatureSshOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureSshInput)(nil)).Elem(), &FeatureSsh{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureSshArrayInput)(nil)).Elem(), FeatureSshArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureSshMapInput)(nil)).Elem(), FeatureSshMap{})
	pulumi.RegisterOutputType(FeatureSshOutput{})
	pulumi.RegisterOutputType(FeatureSshArrayOutput{})
	pulumi.RegisterOutputType(FeatureSshMapOutput{})
}
