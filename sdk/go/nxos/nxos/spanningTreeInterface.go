// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SpanningTreeInterface struct {
	pulumi.CustomResourceState

	// The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
	BpduFilter pulumi.StringOutput `pulumi:"bpduFilter"`
	// BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
	BpduGuard pulumi.StringOutput `pulumi:"bpduGuard"`
	// Port path cost. - Range: `0`-`200000000` - Default value: `0`
	Cost pulumi.IntOutput `pulumi:"cost"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
	Guard pulumi.StringOutput `pulumi:"guard"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
	LinkType pulumi.StringOutput `pulumi:"linkType"`
	// Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Port priority. - Range: `0`-`224` - Default value: `128`
	Priority pulumi.IntOutput `pulumi:"priority"`
}

// NewSpanningTreeInterface registers a new resource with the given unique name, arguments, and options.
func NewSpanningTreeInterface(ctx *pulumi.Context,
	name string, args *SpanningTreeInterfaceArgs, opts ...pulumi.ResourceOption) (*SpanningTreeInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpanningTreeInterface
	err := ctx.RegisterResource("nxos:nxos/spanningTreeInterface:SpanningTreeInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpanningTreeInterface gets an existing SpanningTreeInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpanningTreeInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpanningTreeInterfaceState, opts ...pulumi.ResourceOption) (*SpanningTreeInterface, error) {
	var resource SpanningTreeInterface
	err := ctx.ReadResource("nxos:nxos/spanningTreeInterface:SpanningTreeInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpanningTreeInterface resources.
type spanningTreeInterfaceState struct {
	// The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
	BpduFilter *string `pulumi:"bpduFilter"`
	// BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
	BpduGuard *string `pulumi:"bpduGuard"`
	// Port path cost. - Range: `0`-`200000000` - Default value: `0`
	Cost *int `pulumi:"cost"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
	Guard *string `pulumi:"guard"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId *string `pulumi:"interfaceId"`
	// Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
	LinkType *string `pulumi:"linkType"`
	// Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
	Mode *string `pulumi:"mode"`
	// Port priority. - Range: `0`-`224` - Default value: `128`
	Priority *int `pulumi:"priority"`
}

type SpanningTreeInterfaceState struct {
	// The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
	BpduFilter pulumi.StringPtrInput
	// BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
	BpduGuard pulumi.StringPtrInput
	// Port path cost. - Range: `0`-`200000000` - Default value: `0`
	Cost pulumi.IntPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
	Guard pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringPtrInput
	// Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
	LinkType pulumi.StringPtrInput
	// Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
	Mode pulumi.StringPtrInput
	// Port priority. - Range: `0`-`224` - Default value: `128`
	Priority pulumi.IntPtrInput
}

func (SpanningTreeInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*spanningTreeInterfaceState)(nil)).Elem()
}

type spanningTreeInterfaceArgs struct {
	// The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
	BpduFilter *string `pulumi:"bpduFilter"`
	// BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
	BpduGuard *string `pulumi:"bpduGuard"`
	// Port path cost. - Range: `0`-`200000000` - Default value: `0`
	Cost *int `pulumi:"cost"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
	Guard *string `pulumi:"guard"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
	// Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
	LinkType *string `pulumi:"linkType"`
	// Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
	Mode *string `pulumi:"mode"`
	// Port priority. - Range: `0`-`224` - Default value: `128`
	Priority *int `pulumi:"priority"`
}

// The set of arguments for constructing a SpanningTreeInterface resource.
type SpanningTreeInterfaceArgs struct {
	// The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
	BpduFilter pulumi.StringPtrInput
	// BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
	BpduGuard pulumi.StringPtrInput
	// Port path cost. - Range: `0`-`200000000` - Default value: `0`
	Cost pulumi.IntPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
	Guard pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringInput
	// Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
	LinkType pulumi.StringPtrInput
	// Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
	Mode pulumi.StringPtrInput
	// Port priority. - Range: `0`-`224` - Default value: `128`
	Priority pulumi.IntPtrInput
}

func (SpanningTreeInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spanningTreeInterfaceArgs)(nil)).Elem()
}

type SpanningTreeInterfaceInput interface {
	pulumi.Input

	ToSpanningTreeInterfaceOutput() SpanningTreeInterfaceOutput
	ToSpanningTreeInterfaceOutputWithContext(ctx context.Context) SpanningTreeInterfaceOutput
}

func (*SpanningTreeInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**SpanningTreeInterface)(nil)).Elem()
}

func (i *SpanningTreeInterface) ToSpanningTreeInterfaceOutput() SpanningTreeInterfaceOutput {
	return i.ToSpanningTreeInterfaceOutputWithContext(context.Background())
}

func (i *SpanningTreeInterface) ToSpanningTreeInterfaceOutputWithContext(ctx context.Context) SpanningTreeInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpanningTreeInterfaceOutput)
}

func (i *SpanningTreeInterface) ToOutput(ctx context.Context) pulumix.Output[*SpanningTreeInterface] {
	return pulumix.Output[*SpanningTreeInterface]{
		OutputState: i.ToSpanningTreeInterfaceOutputWithContext(ctx).OutputState,
	}
}

// SpanningTreeInterfaceArrayInput is an input type that accepts SpanningTreeInterfaceArray and SpanningTreeInterfaceArrayOutput values.
// You can construct a concrete instance of `SpanningTreeInterfaceArrayInput` via:
//
//	SpanningTreeInterfaceArray{ SpanningTreeInterfaceArgs{...} }
type SpanningTreeInterfaceArrayInput interface {
	pulumi.Input

	ToSpanningTreeInterfaceArrayOutput() SpanningTreeInterfaceArrayOutput
	ToSpanningTreeInterfaceArrayOutputWithContext(context.Context) SpanningTreeInterfaceArrayOutput
}

type SpanningTreeInterfaceArray []SpanningTreeInterfaceInput

func (SpanningTreeInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpanningTreeInterface)(nil)).Elem()
}

func (i SpanningTreeInterfaceArray) ToSpanningTreeInterfaceArrayOutput() SpanningTreeInterfaceArrayOutput {
	return i.ToSpanningTreeInterfaceArrayOutputWithContext(context.Background())
}

func (i SpanningTreeInterfaceArray) ToSpanningTreeInterfaceArrayOutputWithContext(ctx context.Context) SpanningTreeInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpanningTreeInterfaceArrayOutput)
}

func (i SpanningTreeInterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*SpanningTreeInterface] {
	return pulumix.Output[[]*SpanningTreeInterface]{
		OutputState: i.ToSpanningTreeInterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// SpanningTreeInterfaceMapInput is an input type that accepts SpanningTreeInterfaceMap and SpanningTreeInterfaceMapOutput values.
// You can construct a concrete instance of `SpanningTreeInterfaceMapInput` via:
//
//	SpanningTreeInterfaceMap{ "key": SpanningTreeInterfaceArgs{...} }
type SpanningTreeInterfaceMapInput interface {
	pulumi.Input

	ToSpanningTreeInterfaceMapOutput() SpanningTreeInterfaceMapOutput
	ToSpanningTreeInterfaceMapOutputWithContext(context.Context) SpanningTreeInterfaceMapOutput
}

type SpanningTreeInterfaceMap map[string]SpanningTreeInterfaceInput

func (SpanningTreeInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpanningTreeInterface)(nil)).Elem()
}

func (i SpanningTreeInterfaceMap) ToSpanningTreeInterfaceMapOutput() SpanningTreeInterfaceMapOutput {
	return i.ToSpanningTreeInterfaceMapOutputWithContext(context.Background())
}

func (i SpanningTreeInterfaceMap) ToSpanningTreeInterfaceMapOutputWithContext(ctx context.Context) SpanningTreeInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpanningTreeInterfaceMapOutput)
}

func (i SpanningTreeInterfaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SpanningTreeInterface] {
	return pulumix.Output[map[string]*SpanningTreeInterface]{
		OutputState: i.ToSpanningTreeInterfaceMapOutputWithContext(ctx).OutputState,
	}
}

type SpanningTreeInterfaceOutput struct{ *pulumi.OutputState }

func (SpanningTreeInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpanningTreeInterface)(nil)).Elem()
}

func (o SpanningTreeInterfaceOutput) ToSpanningTreeInterfaceOutput() SpanningTreeInterfaceOutput {
	return o
}

func (o SpanningTreeInterfaceOutput) ToSpanningTreeInterfaceOutputWithContext(ctx context.Context) SpanningTreeInterfaceOutput {
	return o
}

func (o SpanningTreeInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[*SpanningTreeInterface] {
	return pulumix.Output[*SpanningTreeInterface]{
		OutputState: o.OutputState,
	}
}

// The administrative state of the object or policy. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o SpanningTreeInterfaceOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *SpanningTreeInterface) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// BPDU filter mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
func (o SpanningTreeInterfaceOutput) BpduFilter() pulumi.StringOutput {
	return o.ApplyT(func(v *SpanningTreeInterface) pulumi.StringOutput { return v.BpduFilter }).(pulumi.StringOutput)
}

// BPDU guard mode. - Choices: `default`, `enable`, `disable` - Default value: `default`
func (o SpanningTreeInterfaceOutput) BpduGuard() pulumi.StringOutput {
	return o.ApplyT(func(v *SpanningTreeInterface) pulumi.StringOutput { return v.BpduGuard }).(pulumi.StringOutput)
}

// Port path cost. - Range: `0`-`200000000` - Default value: `0`
func (o SpanningTreeInterfaceOutput) Cost() pulumi.IntOutput {
	return o.ApplyT(func(v *SpanningTreeInterface) pulumi.IntOutput { return v.Cost }).(pulumi.IntOutput)
}

// A device name from the provider configuration.
func (o SpanningTreeInterfaceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpanningTreeInterface) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Guard mode. - Choices: `default`, `root`, `loop`, `none` - Default value: `default`
func (o SpanningTreeInterfaceOutput) Guard() pulumi.StringOutput {
	return o.ApplyT(func(v *SpanningTreeInterface) pulumi.StringOutput { return v.Guard }).(pulumi.StringOutput)
}

// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
func (o SpanningTreeInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpanningTreeInterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// Link type. - Choices: `auto`, `p2p`, `shared` - Default value: `auto`
func (o SpanningTreeInterfaceOutput) LinkType() pulumi.StringOutput {
	return o.ApplyT(func(v *SpanningTreeInterface) pulumi.StringOutput { return v.LinkType }).(pulumi.StringOutput)
}

// Port mode. - Choices: `default`, `edge`, `network`, `normal`, `trunk` - Default value: `default`
func (o SpanningTreeInterfaceOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SpanningTreeInterface) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Port priority. - Range: `0`-`224` - Default value: `128`
func (o SpanningTreeInterfaceOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *SpanningTreeInterface) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

type SpanningTreeInterfaceArrayOutput struct{ *pulumi.OutputState }

func (SpanningTreeInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpanningTreeInterface)(nil)).Elem()
}

func (o SpanningTreeInterfaceArrayOutput) ToSpanningTreeInterfaceArrayOutput() SpanningTreeInterfaceArrayOutput {
	return o
}

func (o SpanningTreeInterfaceArrayOutput) ToSpanningTreeInterfaceArrayOutputWithContext(ctx context.Context) SpanningTreeInterfaceArrayOutput {
	return o
}

func (o SpanningTreeInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SpanningTreeInterface] {
	return pulumix.Output[[]*SpanningTreeInterface]{
		OutputState: o.OutputState,
	}
}

func (o SpanningTreeInterfaceArrayOutput) Index(i pulumi.IntInput) SpanningTreeInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpanningTreeInterface {
		return vs[0].([]*SpanningTreeInterface)[vs[1].(int)]
	}).(SpanningTreeInterfaceOutput)
}

type SpanningTreeInterfaceMapOutput struct{ *pulumi.OutputState }

func (SpanningTreeInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpanningTreeInterface)(nil)).Elem()
}

func (o SpanningTreeInterfaceMapOutput) ToSpanningTreeInterfaceMapOutput() SpanningTreeInterfaceMapOutput {
	return o
}

func (o SpanningTreeInterfaceMapOutput) ToSpanningTreeInterfaceMapOutputWithContext(ctx context.Context) SpanningTreeInterfaceMapOutput {
	return o
}

func (o SpanningTreeInterfaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SpanningTreeInterface] {
	return pulumix.Output[map[string]*SpanningTreeInterface]{
		OutputState: o.OutputState,
	}
}

func (o SpanningTreeInterfaceMapOutput) MapIndex(k pulumi.StringInput) SpanningTreeInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpanningTreeInterface {
		return vs[0].(map[string]*SpanningTreeInterface)[vs[1].(string)]
	}).(SpanningTreeInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpanningTreeInterfaceInput)(nil)).Elem(), &SpanningTreeInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpanningTreeInterfaceArrayInput)(nil)).Elem(), SpanningTreeInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpanningTreeInterfaceMapInput)(nil)).Elem(), SpanningTreeInterfaceMap{})
	pulumi.RegisterOutputType(SpanningTreeInterfaceOutput{})
	pulumi.RegisterOutputType(SpanningTreeInterfaceArrayOutput{})
	pulumi.RegisterOutputType(SpanningTreeInterfaceMapOutput{})
}
