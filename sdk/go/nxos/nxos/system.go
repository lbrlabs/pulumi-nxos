// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type System struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// The system name (hostname).
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewSystem registers a new resource with the given unique name, arguments, and options.
func NewSystem(ctx *pulumi.Context,
	name string, args *SystemArgs, opts ...pulumi.ResourceOption) (*System, error) {
	if args == nil {
		args = &SystemArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource System
	err := ctx.RegisterResource("nxos:nxos/system:System", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystem gets an existing System resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemState, opts ...pulumi.ResourceOption) (*System, error) {
	var resource System
	err := ctx.ReadResource("nxos:nxos/system:System", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering System resources.
type systemState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The system name (hostname).
	Name *string `pulumi:"name"`
}

type SystemState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// The system name (hostname).
	Name pulumi.StringPtrInput
}

func (SystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemState)(nil)).Elem()
}

type systemArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The system name (hostname).
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a System resource.
type SystemArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// The system name (hostname).
	Name pulumi.StringPtrInput
}

func (SystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemArgs)(nil)).Elem()
}

type SystemInput interface {
	pulumi.Input

	ToSystemOutput() SystemOutput
	ToSystemOutputWithContext(ctx context.Context) SystemOutput
}

func (*System) ElementType() reflect.Type {
	return reflect.TypeOf((**System)(nil)).Elem()
}

func (i *System) ToSystemOutput() SystemOutput {
	return i.ToSystemOutputWithContext(context.Background())
}

func (i *System) ToSystemOutputWithContext(ctx context.Context) SystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemOutput)
}

func (i *System) ToOutput(ctx context.Context) pulumix.Output[*System] {
	return pulumix.Output[*System]{
		OutputState: i.ToSystemOutputWithContext(ctx).OutputState,
	}
}

// SystemArrayInput is an input type that accepts SystemArray and SystemArrayOutput values.
// You can construct a concrete instance of `SystemArrayInput` via:
//
//	SystemArray{ SystemArgs{...} }
type SystemArrayInput interface {
	pulumi.Input

	ToSystemArrayOutput() SystemArrayOutput
	ToSystemArrayOutputWithContext(context.Context) SystemArrayOutput
}

type SystemArray []SystemInput

func (SystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*System)(nil)).Elem()
}

func (i SystemArray) ToSystemArrayOutput() SystemArrayOutput {
	return i.ToSystemArrayOutputWithContext(context.Background())
}

func (i SystemArray) ToSystemArrayOutputWithContext(ctx context.Context) SystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemArrayOutput)
}

func (i SystemArray) ToOutput(ctx context.Context) pulumix.Output[[]*System] {
	return pulumix.Output[[]*System]{
		OutputState: i.ToSystemArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemMapInput is an input type that accepts SystemMap and SystemMapOutput values.
// You can construct a concrete instance of `SystemMapInput` via:
//
//	SystemMap{ "key": SystemArgs{...} }
type SystemMapInput interface {
	pulumi.Input

	ToSystemMapOutput() SystemMapOutput
	ToSystemMapOutputWithContext(context.Context) SystemMapOutput
}

type SystemMap map[string]SystemInput

func (SystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*System)(nil)).Elem()
}

func (i SystemMap) ToSystemMapOutput() SystemMapOutput {
	return i.ToSystemMapOutputWithContext(context.Background())
}

func (i SystemMap) ToSystemMapOutputWithContext(ctx context.Context) SystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemMapOutput)
}

func (i SystemMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*System] {
	return pulumix.Output[map[string]*System]{
		OutputState: i.ToSystemMapOutputWithContext(ctx).OutputState,
	}
}

type SystemOutput struct{ *pulumi.OutputState }

func (SystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**System)(nil)).Elem()
}

func (o SystemOutput) ToSystemOutput() SystemOutput {
	return o
}

func (o SystemOutput) ToSystemOutputWithContext(ctx context.Context) SystemOutput {
	return o
}

func (o SystemOutput) ToOutput(ctx context.Context) pulumix.Output[*System] {
	return pulumix.Output[*System]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o SystemOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *System) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// The system name (hostname).
func (o SystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *System) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type SystemArrayOutput struct{ *pulumi.OutputState }

func (SystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*System)(nil)).Elem()
}

func (o SystemArrayOutput) ToSystemArrayOutput() SystemArrayOutput {
	return o
}

func (o SystemArrayOutput) ToSystemArrayOutputWithContext(ctx context.Context) SystemArrayOutput {
	return o
}

func (o SystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*System] {
	return pulumix.Output[[]*System]{
		OutputState: o.OutputState,
	}
}

func (o SystemArrayOutput) Index(i pulumi.IntInput) SystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *System {
		return vs[0].([]*System)[vs[1].(int)]
	}).(SystemOutput)
}

type SystemMapOutput struct{ *pulumi.OutputState }

func (SystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*System)(nil)).Elem()
}

func (o SystemMapOutput) ToSystemMapOutput() SystemMapOutput {
	return o
}

func (o SystemMapOutput) ToSystemMapOutputWithContext(ctx context.Context) SystemMapOutput {
	return o
}

func (o SystemMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*System] {
	return pulumix.Output[map[string]*System]{
		OutputState: o.OutputState,
	}
}

func (o SystemMapOutput) MapIndex(k pulumi.StringInput) SystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *System {
		return vs[0].(map[string]*System)[vs[1].(string)]
	}).(SystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemInput)(nil)).Elem(), &System{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemArrayInput)(nil)).Elem(), SystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemMapInput)(nil)).Elem(), SystemMap{})
	pulumi.RegisterOutputType(SystemOutput{})
	pulumi.RegisterOutputType(SystemArrayOutput{})
	pulumi.RegisterOutputType(SystemMapOutput{})
}
