// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Hmm struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewHmm registers a new resource with the given unique name, arguments, and options.
func NewHmm(ctx *pulumi.Context,
	name string, args *HmmArgs, opts ...pulumi.ResourceOption) (*Hmm, error) {
	if args == nil {
		args = &HmmArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hmm
	err := ctx.RegisterResource("nxos:nxos/hmm:Hmm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHmm gets an existing Hmm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHmm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HmmState, opts ...pulumi.ResourceOption) (*Hmm, error) {
	var resource Hmm
	err := ctx.ReadResource("nxos:nxos/hmm:Hmm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hmm resources.
type hmmState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type HmmState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (HmmState) ElementType() reflect.Type {
	return reflect.TypeOf((*hmmState)(nil)).Elem()
}

type hmmArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a Hmm resource.
type HmmArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (HmmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hmmArgs)(nil)).Elem()
}

type HmmInput interface {
	pulumi.Input

	ToHmmOutput() HmmOutput
	ToHmmOutputWithContext(ctx context.Context) HmmOutput
}

func (*Hmm) ElementType() reflect.Type {
	return reflect.TypeOf((**Hmm)(nil)).Elem()
}

func (i *Hmm) ToHmmOutput() HmmOutput {
	return i.ToHmmOutputWithContext(context.Background())
}

func (i *Hmm) ToHmmOutputWithContext(ctx context.Context) HmmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HmmOutput)
}

func (i *Hmm) ToOutput(ctx context.Context) pulumix.Output[*Hmm] {
	return pulumix.Output[*Hmm]{
		OutputState: i.ToHmmOutputWithContext(ctx).OutputState,
	}
}

// HmmArrayInput is an input type that accepts HmmArray and HmmArrayOutput values.
// You can construct a concrete instance of `HmmArrayInput` via:
//
//	HmmArray{ HmmArgs{...} }
type HmmArrayInput interface {
	pulumi.Input

	ToHmmArrayOutput() HmmArrayOutput
	ToHmmArrayOutputWithContext(context.Context) HmmArrayOutput
}

type HmmArray []HmmInput

func (HmmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hmm)(nil)).Elem()
}

func (i HmmArray) ToHmmArrayOutput() HmmArrayOutput {
	return i.ToHmmArrayOutputWithContext(context.Background())
}

func (i HmmArray) ToHmmArrayOutputWithContext(ctx context.Context) HmmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HmmArrayOutput)
}

func (i HmmArray) ToOutput(ctx context.Context) pulumix.Output[[]*Hmm] {
	return pulumix.Output[[]*Hmm]{
		OutputState: i.ToHmmArrayOutputWithContext(ctx).OutputState,
	}
}

// HmmMapInput is an input type that accepts HmmMap and HmmMapOutput values.
// You can construct a concrete instance of `HmmMapInput` via:
//
//	HmmMap{ "key": HmmArgs{...} }
type HmmMapInput interface {
	pulumi.Input

	ToHmmMapOutput() HmmMapOutput
	ToHmmMapOutputWithContext(context.Context) HmmMapOutput
}

type HmmMap map[string]HmmInput

func (HmmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hmm)(nil)).Elem()
}

func (i HmmMap) ToHmmMapOutput() HmmMapOutput {
	return i.ToHmmMapOutputWithContext(context.Background())
}

func (i HmmMap) ToHmmMapOutputWithContext(ctx context.Context) HmmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HmmMapOutput)
}

func (i HmmMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Hmm] {
	return pulumix.Output[map[string]*Hmm]{
		OutputState: i.ToHmmMapOutputWithContext(ctx).OutputState,
	}
}

type HmmOutput struct{ *pulumi.OutputState }

func (HmmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hmm)(nil)).Elem()
}

func (o HmmOutput) ToHmmOutput() HmmOutput {
	return o
}

func (o HmmOutput) ToHmmOutputWithContext(ctx context.Context) HmmOutput {
	return o
}

func (o HmmOutput) ToOutput(ctx context.Context) pulumix.Output[*Hmm] {
	return pulumix.Output[*Hmm]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o HmmOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *Hmm) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o HmmOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hmm) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type HmmArrayOutput struct{ *pulumi.OutputState }

func (HmmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hmm)(nil)).Elem()
}

func (o HmmArrayOutput) ToHmmArrayOutput() HmmArrayOutput {
	return o
}

func (o HmmArrayOutput) ToHmmArrayOutputWithContext(ctx context.Context) HmmArrayOutput {
	return o
}

func (o HmmArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Hmm] {
	return pulumix.Output[[]*Hmm]{
		OutputState: o.OutputState,
	}
}

func (o HmmArrayOutput) Index(i pulumi.IntInput) HmmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hmm {
		return vs[0].([]*Hmm)[vs[1].(int)]
	}).(HmmOutput)
}

type HmmMapOutput struct{ *pulumi.OutputState }

func (HmmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hmm)(nil)).Elem()
}

func (o HmmMapOutput) ToHmmMapOutput() HmmMapOutput {
	return o
}

func (o HmmMapOutput) ToHmmMapOutputWithContext(ctx context.Context) HmmMapOutput {
	return o
}

func (o HmmMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Hmm] {
	return pulumix.Output[map[string]*Hmm]{
		OutputState: o.OutputState,
	}
}

func (o HmmMapOutput) MapIndex(k pulumi.StringInput) HmmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hmm {
		return vs[0].(map[string]*Hmm)[vs[1].(string)]
	}).(HmmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HmmInput)(nil)).Elem(), &Hmm{})
	pulumi.RegisterInputType(reflect.TypeOf((*HmmArrayInput)(nil)).Elem(), HmmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HmmMapInput)(nil)).Elem(), HmmMap{})
	pulumi.RegisterOutputType(HmmOutput{})
	pulumi.RegisterOutputType(HmmArrayOutput{})
	pulumi.RegisterOutputType(HmmMapOutput{})
}
