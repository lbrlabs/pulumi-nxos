// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Ipv4AccessList struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Access list name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIpv4AccessList registers a new resource with the given unique name, arguments, and options.
func NewIpv4AccessList(ctx *pulumi.Context,
	name string, args *Ipv4AccessListArgs, opts ...pulumi.ResourceOption) (*Ipv4AccessList, error) {
	if args == nil {
		args = &Ipv4AccessListArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipv4AccessList
	err := ctx.RegisterResource("nxos:nxos/ipv4AccessList:Ipv4AccessList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv4AccessList gets an existing Ipv4AccessList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv4AccessList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv4AccessListState, opts ...pulumi.ResourceOption) (*Ipv4AccessList, error) {
	var resource Ipv4AccessList
	err := ctx.ReadResource("nxos:nxos/ipv4AccessList:Ipv4AccessList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv4AccessList resources.
type ipv4AccessListState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Access list name.
	Name *string `pulumi:"name"`
}

type Ipv4AccessListState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Access list name.
	Name pulumi.StringPtrInput
}

func (Ipv4AccessListState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4AccessListState)(nil)).Elem()
}

type ipv4AccessListArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Access list name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Ipv4AccessList resource.
type Ipv4AccessListArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Access list name.
	Name pulumi.StringPtrInput
}

func (Ipv4AccessListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4AccessListArgs)(nil)).Elem()
}

type Ipv4AccessListInput interface {
	pulumi.Input

	ToIpv4AccessListOutput() Ipv4AccessListOutput
	ToIpv4AccessListOutputWithContext(ctx context.Context) Ipv4AccessListOutput
}

func (*Ipv4AccessList) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4AccessList)(nil)).Elem()
}

func (i *Ipv4AccessList) ToIpv4AccessListOutput() Ipv4AccessListOutput {
	return i.ToIpv4AccessListOutputWithContext(context.Background())
}

func (i *Ipv4AccessList) ToIpv4AccessListOutputWithContext(ctx context.Context) Ipv4AccessListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AccessListOutput)
}

func (i *Ipv4AccessList) ToOutput(ctx context.Context) pulumix.Output[*Ipv4AccessList] {
	return pulumix.Output[*Ipv4AccessList]{
		OutputState: i.ToIpv4AccessListOutputWithContext(ctx).OutputState,
	}
}

// Ipv4AccessListArrayInput is an input type that accepts Ipv4AccessListArray and Ipv4AccessListArrayOutput values.
// You can construct a concrete instance of `Ipv4AccessListArrayInput` via:
//
//	Ipv4AccessListArray{ Ipv4AccessListArgs{...} }
type Ipv4AccessListArrayInput interface {
	pulumi.Input

	ToIpv4AccessListArrayOutput() Ipv4AccessListArrayOutput
	ToIpv4AccessListArrayOutputWithContext(context.Context) Ipv4AccessListArrayOutput
}

type Ipv4AccessListArray []Ipv4AccessListInput

func (Ipv4AccessListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4AccessList)(nil)).Elem()
}

func (i Ipv4AccessListArray) ToIpv4AccessListArrayOutput() Ipv4AccessListArrayOutput {
	return i.ToIpv4AccessListArrayOutputWithContext(context.Background())
}

func (i Ipv4AccessListArray) ToIpv4AccessListArrayOutputWithContext(ctx context.Context) Ipv4AccessListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AccessListArrayOutput)
}

func (i Ipv4AccessListArray) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4AccessList] {
	return pulumix.Output[[]*Ipv4AccessList]{
		OutputState: i.ToIpv4AccessListArrayOutputWithContext(ctx).OutputState,
	}
}

// Ipv4AccessListMapInput is an input type that accepts Ipv4AccessListMap and Ipv4AccessListMapOutput values.
// You can construct a concrete instance of `Ipv4AccessListMapInput` via:
//
//	Ipv4AccessListMap{ "key": Ipv4AccessListArgs{...} }
type Ipv4AccessListMapInput interface {
	pulumi.Input

	ToIpv4AccessListMapOutput() Ipv4AccessListMapOutput
	ToIpv4AccessListMapOutputWithContext(context.Context) Ipv4AccessListMapOutput
}

type Ipv4AccessListMap map[string]Ipv4AccessListInput

func (Ipv4AccessListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4AccessList)(nil)).Elem()
}

func (i Ipv4AccessListMap) ToIpv4AccessListMapOutput() Ipv4AccessListMapOutput {
	return i.ToIpv4AccessListMapOutputWithContext(context.Background())
}

func (i Ipv4AccessListMap) ToIpv4AccessListMapOutputWithContext(ctx context.Context) Ipv4AccessListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AccessListMapOutput)
}

func (i Ipv4AccessListMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4AccessList] {
	return pulumix.Output[map[string]*Ipv4AccessList]{
		OutputState: i.ToIpv4AccessListMapOutputWithContext(ctx).OutputState,
	}
}

type Ipv4AccessListOutput struct{ *pulumi.OutputState }

func (Ipv4AccessListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4AccessList)(nil)).Elem()
}

func (o Ipv4AccessListOutput) ToIpv4AccessListOutput() Ipv4AccessListOutput {
	return o
}

func (o Ipv4AccessListOutput) ToIpv4AccessListOutputWithContext(ctx context.Context) Ipv4AccessListOutput {
	return o
}

func (o Ipv4AccessListOutput) ToOutput(ctx context.Context) pulumix.Output[*Ipv4AccessList] {
	return pulumix.Output[*Ipv4AccessList]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o Ipv4AccessListOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessList) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Access list name.
func (o Ipv4AccessListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type Ipv4AccessListArrayOutput struct{ *pulumi.OutputState }

func (Ipv4AccessListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4AccessList)(nil)).Elem()
}

func (o Ipv4AccessListArrayOutput) ToIpv4AccessListArrayOutput() Ipv4AccessListArrayOutput {
	return o
}

func (o Ipv4AccessListArrayOutput) ToIpv4AccessListArrayOutputWithContext(ctx context.Context) Ipv4AccessListArrayOutput {
	return o
}

func (o Ipv4AccessListArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4AccessList] {
	return pulumix.Output[[]*Ipv4AccessList]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4AccessListArrayOutput) Index(i pulumi.IntInput) Ipv4AccessListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv4AccessList {
		return vs[0].([]*Ipv4AccessList)[vs[1].(int)]
	}).(Ipv4AccessListOutput)
}

type Ipv4AccessListMapOutput struct{ *pulumi.OutputState }

func (Ipv4AccessListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4AccessList)(nil)).Elem()
}

func (o Ipv4AccessListMapOutput) ToIpv4AccessListMapOutput() Ipv4AccessListMapOutput {
	return o
}

func (o Ipv4AccessListMapOutput) ToIpv4AccessListMapOutputWithContext(ctx context.Context) Ipv4AccessListMapOutput {
	return o
}

func (o Ipv4AccessListMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4AccessList] {
	return pulumix.Output[map[string]*Ipv4AccessList]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4AccessListMapOutput) MapIndex(k pulumi.StringInput) Ipv4AccessListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv4AccessList {
		return vs[0].(map[string]*Ipv4AccessList)[vs[1].(string)]
	}).(Ipv4AccessListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AccessListInput)(nil)).Elem(), &Ipv4AccessList{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AccessListArrayInput)(nil)).Elem(), Ipv4AccessListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AccessListMapInput)(nil)).Elem(), Ipv4AccessListMap{})
	pulumi.RegisterOutputType(Ipv4AccessListOutput{})
	pulumi.RegisterOutputType(Ipv4AccessListArrayOutput{})
	pulumi.RegisterOutputType(Ipv4AccessListMapOutput{})
}
