// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VpcInterface struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Port-channel interface DN.
	PortChannelInterfaceDn pulumi.StringPtrOutput `pulumi:"portChannelInterfaceDn"`
	// The vPC interface identifier. - Range: `1`-`16384`
	VpcInterfaceId pulumi.IntOutput `pulumi:"vpcInterfaceId"`
}

// NewVpcInterface registers a new resource with the given unique name, arguments, and options.
func NewVpcInterface(ctx *pulumi.Context,
	name string, args *VpcInterfaceArgs, opts ...pulumi.ResourceOption) (*VpcInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'VpcInterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcInterface
	err := ctx.RegisterResource("nxos:nxos/vpcInterface:VpcInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcInterface gets an existing VpcInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcInterfaceState, opts ...pulumi.ResourceOption) (*VpcInterface, error) {
	var resource VpcInterface
	err := ctx.ReadResource("nxos:nxos/vpcInterface:VpcInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcInterface resources.
type vpcInterfaceState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Port-channel interface DN.
	PortChannelInterfaceDn *string `pulumi:"portChannelInterfaceDn"`
	// The vPC interface identifier. - Range: `1`-`16384`
	VpcInterfaceId *int `pulumi:"vpcInterfaceId"`
}

type VpcInterfaceState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Port-channel interface DN.
	PortChannelInterfaceDn pulumi.StringPtrInput
	// The vPC interface identifier. - Range: `1`-`16384`
	VpcInterfaceId pulumi.IntPtrInput
}

func (VpcInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcInterfaceState)(nil)).Elem()
}

type vpcInterfaceArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Port-channel interface DN.
	PortChannelInterfaceDn *string `pulumi:"portChannelInterfaceDn"`
	// The vPC interface identifier. - Range: `1`-`16384`
	VpcInterfaceId int `pulumi:"vpcInterfaceId"`
}

// The set of arguments for constructing a VpcInterface resource.
type VpcInterfaceArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Port-channel interface DN.
	PortChannelInterfaceDn pulumi.StringPtrInput
	// The vPC interface identifier. - Range: `1`-`16384`
	VpcInterfaceId pulumi.IntInput
}

func (VpcInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcInterfaceArgs)(nil)).Elem()
}

type VpcInterfaceInput interface {
	pulumi.Input

	ToVpcInterfaceOutput() VpcInterfaceOutput
	ToVpcInterfaceOutputWithContext(ctx context.Context) VpcInterfaceOutput
}

func (*VpcInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcInterface)(nil)).Elem()
}

func (i *VpcInterface) ToVpcInterfaceOutput() VpcInterfaceOutput {
	return i.ToVpcInterfaceOutputWithContext(context.Background())
}

func (i *VpcInterface) ToVpcInterfaceOutputWithContext(ctx context.Context) VpcInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcInterfaceOutput)
}

func (i *VpcInterface) ToOutput(ctx context.Context) pulumix.Output[*VpcInterface] {
	return pulumix.Output[*VpcInterface]{
		OutputState: i.ToVpcInterfaceOutputWithContext(ctx).OutputState,
	}
}

// VpcInterfaceArrayInput is an input type that accepts VpcInterfaceArray and VpcInterfaceArrayOutput values.
// You can construct a concrete instance of `VpcInterfaceArrayInput` via:
//
//	VpcInterfaceArray{ VpcInterfaceArgs{...} }
type VpcInterfaceArrayInput interface {
	pulumi.Input

	ToVpcInterfaceArrayOutput() VpcInterfaceArrayOutput
	ToVpcInterfaceArrayOutputWithContext(context.Context) VpcInterfaceArrayOutput
}

type VpcInterfaceArray []VpcInterfaceInput

func (VpcInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcInterface)(nil)).Elem()
}

func (i VpcInterfaceArray) ToVpcInterfaceArrayOutput() VpcInterfaceArrayOutput {
	return i.ToVpcInterfaceArrayOutputWithContext(context.Background())
}

func (i VpcInterfaceArray) ToVpcInterfaceArrayOutputWithContext(ctx context.Context) VpcInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcInterfaceArrayOutput)
}

func (i VpcInterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*VpcInterface] {
	return pulumix.Output[[]*VpcInterface]{
		OutputState: i.ToVpcInterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// VpcInterfaceMapInput is an input type that accepts VpcInterfaceMap and VpcInterfaceMapOutput values.
// You can construct a concrete instance of `VpcInterfaceMapInput` via:
//
//	VpcInterfaceMap{ "key": VpcInterfaceArgs{...} }
type VpcInterfaceMapInput interface {
	pulumi.Input

	ToVpcInterfaceMapOutput() VpcInterfaceMapOutput
	ToVpcInterfaceMapOutputWithContext(context.Context) VpcInterfaceMapOutput
}

type VpcInterfaceMap map[string]VpcInterfaceInput

func (VpcInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcInterface)(nil)).Elem()
}

func (i VpcInterfaceMap) ToVpcInterfaceMapOutput() VpcInterfaceMapOutput {
	return i.ToVpcInterfaceMapOutputWithContext(context.Background())
}

func (i VpcInterfaceMap) ToVpcInterfaceMapOutputWithContext(ctx context.Context) VpcInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcInterfaceMapOutput)
}

func (i VpcInterfaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpcInterface] {
	return pulumix.Output[map[string]*VpcInterface]{
		OutputState: i.ToVpcInterfaceMapOutputWithContext(ctx).OutputState,
	}
}

type VpcInterfaceOutput struct{ *pulumi.OutputState }

func (VpcInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcInterface)(nil)).Elem()
}

func (o VpcInterfaceOutput) ToVpcInterfaceOutput() VpcInterfaceOutput {
	return o
}

func (o VpcInterfaceOutput) ToVpcInterfaceOutputWithContext(ctx context.Context) VpcInterfaceOutput {
	return o
}

func (o VpcInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[*VpcInterface] {
	return pulumix.Output[*VpcInterface]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o VpcInterfaceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcInterface) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Port-channel interface DN.
func (o VpcInterfaceOutput) PortChannelInterfaceDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcInterface) pulumi.StringPtrOutput { return v.PortChannelInterfaceDn }).(pulumi.StringPtrOutput)
}

// The vPC interface identifier. - Range: `1`-`16384`
func (o VpcInterfaceOutput) VpcInterfaceId() pulumi.IntOutput {
	return o.ApplyT(func(v *VpcInterface) pulumi.IntOutput { return v.VpcInterfaceId }).(pulumi.IntOutput)
}

type VpcInterfaceArrayOutput struct{ *pulumi.OutputState }

func (VpcInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcInterface)(nil)).Elem()
}

func (o VpcInterfaceArrayOutput) ToVpcInterfaceArrayOutput() VpcInterfaceArrayOutput {
	return o
}

func (o VpcInterfaceArrayOutput) ToVpcInterfaceArrayOutputWithContext(ctx context.Context) VpcInterfaceArrayOutput {
	return o
}

func (o VpcInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VpcInterface] {
	return pulumix.Output[[]*VpcInterface]{
		OutputState: o.OutputState,
	}
}

func (o VpcInterfaceArrayOutput) Index(i pulumi.IntInput) VpcInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcInterface {
		return vs[0].([]*VpcInterface)[vs[1].(int)]
	}).(VpcInterfaceOutput)
}

type VpcInterfaceMapOutput struct{ *pulumi.OutputState }

func (VpcInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcInterface)(nil)).Elem()
}

func (o VpcInterfaceMapOutput) ToVpcInterfaceMapOutput() VpcInterfaceMapOutput {
	return o
}

func (o VpcInterfaceMapOutput) ToVpcInterfaceMapOutputWithContext(ctx context.Context) VpcInterfaceMapOutput {
	return o
}

func (o VpcInterfaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpcInterface] {
	return pulumix.Output[map[string]*VpcInterface]{
		OutputState: o.OutputState,
	}
}

func (o VpcInterfaceMapOutput) MapIndex(k pulumi.StringInput) VpcInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcInterface {
		return vs[0].(map[string]*VpcInterface)[vs[1].(string)]
	}).(VpcInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInterfaceInput)(nil)).Elem(), &VpcInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInterfaceArrayInput)(nil)).Elem(), VpcInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInterfaceMapInput)(nil)).Elem(), VpcInterfaceMap{})
	pulumi.RegisterOutputType(VpcInterfaceOutput{})
	pulumi.RegisterOutputType(VpcInterfaceArrayOutput{})
	pulumi.RegisterOutputType(VpcInterfaceMapOutput{})
}
