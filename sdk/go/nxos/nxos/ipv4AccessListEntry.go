// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Ipv4AccessListEntry struct {
	pulumi.CustomResourceState

	// Match TCP ACK flag.
	Ack pulumi.BoolPtrOutput `pulumi:"ack"`
	// Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
	Action pulumi.StringOutput `pulumi:"action"`
	// Destination address group.
	DestinationAddressGroup pulumi.StringPtrOutput `pulumi:"destinationAddressGroup"`
	// First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPort1 pulumi.StringPtrOutput `pulumi:"destinationPort1"`
	// Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPort2 pulumi.StringPtrOutput `pulumi:"destinationPort2"`
	// Destination port group.
	DestinationPortGroup pulumi.StringPtrOutput `pulumi:"destinationPortGroup"`
	// Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPortMask pulumi.StringPtrOutput `pulumi:"destinationPortMask"`
	// Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	DestinationPortOperator pulumi.StringOutput `pulumi:"destinationPortOperator"`
	// Destination prefix.
	DestinationPrefix pulumi.StringPtrOutput `pulumi:"destinationPrefix"`
	// Destination prefix length.
	DestinationPrefixLength pulumi.StringPtrOutput `pulumi:"destinationPrefixLength"`
	// Destination prefix mask.
	DestinationPrefixMask pulumi.StringPtrOutput `pulumi:"destinationPrefixMask"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Match DSCP. - Range: `0`-`63`
	Dscp pulumi.IntPtrOutput `pulumi:"dscp"`
	// Match TCP EST flag.
	Est pulumi.BoolPtrOutput `pulumi:"est"`
	// Match TCP FIN flag.
	Fin pulumi.BoolPtrOutput `pulumi:"fin"`
	// Match non-initial fragment.
	Fragment pulumi.BoolPtrOutput `pulumi:"fragment"`
	// HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
	// `invalid`
	HttpOptionType pulumi.StringOutput `pulumi:"httpOptionType"`
	// ICMP code. - Range: `0`-`256` - Default value: `256`
	IcmpCode pulumi.IntOutput `pulumi:"icmpCode"`
	// ICMP type. - Range: `0`-`256` - Default value: `256`
	IcmpType pulumi.IntOutput `pulumi:"icmpType"`
	// Log matches against ACL entry. - Default value: `false`
	Logging pulumi.BoolOutput `pulumi:"logging"`
	// Access list name.
	Name pulumi.StringOutput `pulumi:"name"`
	// First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
	PacketLength1 pulumi.StringOutput `pulumi:"packetLength1"`
	// Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
	PacketLength2 pulumi.StringOutput `pulumi:"packetLength2"`
	// Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	PacketLengthOperator pulumi.StringOutput `pulumi:"packetLengthOperator"`
	// Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
	Precedence pulumi.StringOutput `pulumi:"precedence"`
	// Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
	// `pim`, `pcp`, `udf`
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
	// `nos`, `pim`, `pcp`, `udf`
	ProtocolMask pulumi.StringPtrOutput `pulumi:"protocolMask"`
	// Match TCP PSH flag.
	Psh pulumi.BoolPtrOutput `pulumi:"psh"`
	// Redirect action.
	Redirect pulumi.StringPtrOutput `pulumi:"redirect"`
	// ACL comment.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// Match TCP REV flag.
	Rev pulumi.BoolPtrOutput `pulumi:"rev"`
	// Match TCP RST flag.
	Rst pulumi.BoolPtrOutput `pulumi:"rst"`
	// Sequence number.
	SequenceNumber pulumi.IntOutput `pulumi:"sequenceNumber"`
	// Source address group.
	SourceAddressGroup pulumi.StringPtrOutput `pulumi:"sourceAddressGroup"`
	// First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePort1 pulumi.StringPtrOutput `pulumi:"sourcePort1"`
	// Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePort2 pulumi.StringPtrOutput `pulumi:"sourcePort2"`
	// Source port group.
	SourcePortGroup pulumi.StringPtrOutput `pulumi:"sourcePortGroup"`
	// Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePortMask pulumi.StringPtrOutput `pulumi:"sourcePortMask"`
	// Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	SourcePortOperator pulumi.StringOutput `pulumi:"sourcePortOperator"`
	// Source prefix.
	SourcePrefix pulumi.StringPtrOutput `pulumi:"sourcePrefix"`
	// Source prefix length.
	SourcePrefixLength pulumi.StringPtrOutput `pulumi:"sourcePrefixLength"`
	// Source prefix mask.
	SourcePrefixMask pulumi.StringPtrOutput `pulumi:"sourcePrefixMask"`
	// Match TCP SYN flag.
	Syn pulumi.BoolPtrOutput `pulumi:"syn"`
	// Time range name.
	TimeRange pulumi.StringPtrOutput `pulumi:"timeRange"`
	// TTL. - Range: `0`-`255` - Default value: `0`
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// Match TCP URG flag.
	Urg pulumi.BoolPtrOutput `pulumi:"urg"`
	// VLAN ID. - Range: `0`-`4095` - Default value: `4095`
	Vlan pulumi.IntOutput `pulumi:"vlan"`
	// NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
	Vni pulumi.StringOutput `pulumi:"vni"`
}

// NewIpv4AccessListEntry registers a new resource with the given unique name, arguments, and options.
func NewIpv4AccessListEntry(ctx *pulumi.Context,
	name string, args *Ipv4AccessListEntryArgs, opts ...pulumi.ResourceOption) (*Ipv4AccessListEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SequenceNumber == nil {
		return nil, errors.New("invalid value for required argument 'SequenceNumber'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipv4AccessListEntry
	err := ctx.RegisterResource("nxos:nxos/ipv4AccessListEntry:Ipv4AccessListEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv4AccessListEntry gets an existing Ipv4AccessListEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv4AccessListEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv4AccessListEntryState, opts ...pulumi.ResourceOption) (*Ipv4AccessListEntry, error) {
	var resource Ipv4AccessListEntry
	err := ctx.ReadResource("nxos:nxos/ipv4AccessListEntry:Ipv4AccessListEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv4AccessListEntry resources.
type ipv4AccessListEntryState struct {
	// Match TCP ACK flag.
	Ack *bool `pulumi:"ack"`
	// Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
	Action *string `pulumi:"action"`
	// Destination address group.
	DestinationAddressGroup *string `pulumi:"destinationAddressGroup"`
	// First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPort1 *string `pulumi:"destinationPort1"`
	// Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPort2 *string `pulumi:"destinationPort2"`
	// Destination port group.
	DestinationPortGroup *string `pulumi:"destinationPortGroup"`
	// Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPortMask *string `pulumi:"destinationPortMask"`
	// Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	DestinationPortOperator *string `pulumi:"destinationPortOperator"`
	// Destination prefix.
	DestinationPrefix *string `pulumi:"destinationPrefix"`
	// Destination prefix length.
	DestinationPrefixLength *string `pulumi:"destinationPrefixLength"`
	// Destination prefix mask.
	DestinationPrefixMask *string `pulumi:"destinationPrefixMask"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Match DSCP. - Range: `0`-`63`
	Dscp *int `pulumi:"dscp"`
	// Match TCP EST flag.
	Est *bool `pulumi:"est"`
	// Match TCP FIN flag.
	Fin *bool `pulumi:"fin"`
	// Match non-initial fragment.
	Fragment *bool `pulumi:"fragment"`
	// HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
	// `invalid`
	HttpOptionType *string `pulumi:"httpOptionType"`
	// ICMP code. - Range: `0`-`256` - Default value: `256`
	IcmpCode *int `pulumi:"icmpCode"`
	// ICMP type. - Range: `0`-`256` - Default value: `256`
	IcmpType *int `pulumi:"icmpType"`
	// Log matches against ACL entry. - Default value: `false`
	Logging *bool `pulumi:"logging"`
	// Access list name.
	Name *string `pulumi:"name"`
	// First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
	PacketLength1 *string `pulumi:"packetLength1"`
	// Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
	PacketLength2 *string `pulumi:"packetLength2"`
	// Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	PacketLengthOperator *string `pulumi:"packetLengthOperator"`
	// Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
	Precedence *string `pulumi:"precedence"`
	// Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
	// `pim`, `pcp`, `udf`
	Protocol *string `pulumi:"protocol"`
	// Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
	// `nos`, `pim`, `pcp`, `udf`
	ProtocolMask *string `pulumi:"protocolMask"`
	// Match TCP PSH flag.
	Psh *bool `pulumi:"psh"`
	// Redirect action.
	Redirect *string `pulumi:"redirect"`
	// ACL comment.
	Remark *string `pulumi:"remark"`
	// Match TCP REV flag.
	Rev *bool `pulumi:"rev"`
	// Match TCP RST flag.
	Rst *bool `pulumi:"rst"`
	// Sequence number.
	SequenceNumber *int `pulumi:"sequenceNumber"`
	// Source address group.
	SourceAddressGroup *string `pulumi:"sourceAddressGroup"`
	// First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePort1 *string `pulumi:"sourcePort1"`
	// Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePort2 *string `pulumi:"sourcePort2"`
	// Source port group.
	SourcePortGroup *string `pulumi:"sourcePortGroup"`
	// Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePortMask *string `pulumi:"sourcePortMask"`
	// Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	SourcePortOperator *string `pulumi:"sourcePortOperator"`
	// Source prefix.
	SourcePrefix *string `pulumi:"sourcePrefix"`
	// Source prefix length.
	SourcePrefixLength *string `pulumi:"sourcePrefixLength"`
	// Source prefix mask.
	SourcePrefixMask *string `pulumi:"sourcePrefixMask"`
	// Match TCP SYN flag.
	Syn *bool `pulumi:"syn"`
	// Time range name.
	TimeRange *string `pulumi:"timeRange"`
	// TTL. - Range: `0`-`255` - Default value: `0`
	Ttl *int `pulumi:"ttl"`
	// Match TCP URG flag.
	Urg *bool `pulumi:"urg"`
	// VLAN ID. - Range: `0`-`4095` - Default value: `4095`
	Vlan *int `pulumi:"vlan"`
	// NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
	Vni *string `pulumi:"vni"`
}

type Ipv4AccessListEntryState struct {
	// Match TCP ACK flag.
	Ack pulumi.BoolPtrInput
	// Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
	Action pulumi.StringPtrInput
	// Destination address group.
	DestinationAddressGroup pulumi.StringPtrInput
	// First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPort1 pulumi.StringPtrInput
	// Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPort2 pulumi.StringPtrInput
	// Destination port group.
	DestinationPortGroup pulumi.StringPtrInput
	// Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPortMask pulumi.StringPtrInput
	// Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	DestinationPortOperator pulumi.StringPtrInput
	// Destination prefix.
	DestinationPrefix pulumi.StringPtrInput
	// Destination prefix length.
	DestinationPrefixLength pulumi.StringPtrInput
	// Destination prefix mask.
	DestinationPrefixMask pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Match DSCP. - Range: `0`-`63`
	Dscp pulumi.IntPtrInput
	// Match TCP EST flag.
	Est pulumi.BoolPtrInput
	// Match TCP FIN flag.
	Fin pulumi.BoolPtrInput
	// Match non-initial fragment.
	Fragment pulumi.BoolPtrInput
	// HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
	// `invalid`
	HttpOptionType pulumi.StringPtrInput
	// ICMP code. - Range: `0`-`256` - Default value: `256`
	IcmpCode pulumi.IntPtrInput
	// ICMP type. - Range: `0`-`256` - Default value: `256`
	IcmpType pulumi.IntPtrInput
	// Log matches against ACL entry. - Default value: `false`
	Logging pulumi.BoolPtrInput
	// Access list name.
	Name pulumi.StringPtrInput
	// First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
	PacketLength1 pulumi.StringPtrInput
	// Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
	PacketLength2 pulumi.StringPtrInput
	// Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	PacketLengthOperator pulumi.StringPtrInput
	// Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
	Precedence pulumi.StringPtrInput
	// Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
	// `pim`, `pcp`, `udf`
	Protocol pulumi.StringPtrInput
	// Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
	// `nos`, `pim`, `pcp`, `udf`
	ProtocolMask pulumi.StringPtrInput
	// Match TCP PSH flag.
	Psh pulumi.BoolPtrInput
	// Redirect action.
	Redirect pulumi.StringPtrInput
	// ACL comment.
	Remark pulumi.StringPtrInput
	// Match TCP REV flag.
	Rev pulumi.BoolPtrInput
	// Match TCP RST flag.
	Rst pulumi.BoolPtrInput
	// Sequence number.
	SequenceNumber pulumi.IntPtrInput
	// Source address group.
	SourceAddressGroup pulumi.StringPtrInput
	// First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePort1 pulumi.StringPtrInput
	// Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePort2 pulumi.StringPtrInput
	// Source port group.
	SourcePortGroup pulumi.StringPtrInput
	// Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePortMask pulumi.StringPtrInput
	// Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	SourcePortOperator pulumi.StringPtrInput
	// Source prefix.
	SourcePrefix pulumi.StringPtrInput
	// Source prefix length.
	SourcePrefixLength pulumi.StringPtrInput
	// Source prefix mask.
	SourcePrefixMask pulumi.StringPtrInput
	// Match TCP SYN flag.
	Syn pulumi.BoolPtrInput
	// Time range name.
	TimeRange pulumi.StringPtrInput
	// TTL. - Range: `0`-`255` - Default value: `0`
	Ttl pulumi.IntPtrInput
	// Match TCP URG flag.
	Urg pulumi.BoolPtrInput
	// VLAN ID. - Range: `0`-`4095` - Default value: `4095`
	Vlan pulumi.IntPtrInput
	// NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
	Vni pulumi.StringPtrInput
}

func (Ipv4AccessListEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4AccessListEntryState)(nil)).Elem()
}

type ipv4AccessListEntryArgs struct {
	// Match TCP ACK flag.
	Ack *bool `pulumi:"ack"`
	// Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
	Action *string `pulumi:"action"`
	// Destination address group.
	DestinationAddressGroup *string `pulumi:"destinationAddressGroup"`
	// First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPort1 *string `pulumi:"destinationPort1"`
	// Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPort2 *string `pulumi:"destinationPort2"`
	// Destination port group.
	DestinationPortGroup *string `pulumi:"destinationPortGroup"`
	// Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPortMask *string `pulumi:"destinationPortMask"`
	// Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	DestinationPortOperator *string `pulumi:"destinationPortOperator"`
	// Destination prefix.
	DestinationPrefix *string `pulumi:"destinationPrefix"`
	// Destination prefix length.
	DestinationPrefixLength *string `pulumi:"destinationPrefixLength"`
	// Destination prefix mask.
	DestinationPrefixMask *string `pulumi:"destinationPrefixMask"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Match DSCP. - Range: `0`-`63`
	Dscp *int `pulumi:"dscp"`
	// Match TCP EST flag.
	Est *bool `pulumi:"est"`
	// Match TCP FIN flag.
	Fin *bool `pulumi:"fin"`
	// Match non-initial fragment.
	Fragment *bool `pulumi:"fragment"`
	// HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
	// `invalid`
	HttpOptionType *string `pulumi:"httpOptionType"`
	// ICMP code. - Range: `0`-`256` - Default value: `256`
	IcmpCode *int `pulumi:"icmpCode"`
	// ICMP type. - Range: `0`-`256` - Default value: `256`
	IcmpType *int `pulumi:"icmpType"`
	// Log matches against ACL entry. - Default value: `false`
	Logging *bool `pulumi:"logging"`
	// Access list name.
	Name *string `pulumi:"name"`
	// First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
	PacketLength1 *string `pulumi:"packetLength1"`
	// Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
	PacketLength2 *string `pulumi:"packetLength2"`
	// Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	PacketLengthOperator *string `pulumi:"packetLengthOperator"`
	// Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
	Precedence *string `pulumi:"precedence"`
	// Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
	// `pim`, `pcp`, `udf`
	Protocol *string `pulumi:"protocol"`
	// Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
	// `nos`, `pim`, `pcp`, `udf`
	ProtocolMask *string `pulumi:"protocolMask"`
	// Match TCP PSH flag.
	Psh *bool `pulumi:"psh"`
	// Redirect action.
	Redirect *string `pulumi:"redirect"`
	// ACL comment.
	Remark *string `pulumi:"remark"`
	// Match TCP REV flag.
	Rev *bool `pulumi:"rev"`
	// Match TCP RST flag.
	Rst *bool `pulumi:"rst"`
	// Sequence number.
	SequenceNumber int `pulumi:"sequenceNumber"`
	// Source address group.
	SourceAddressGroup *string `pulumi:"sourceAddressGroup"`
	// First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePort1 *string `pulumi:"sourcePort1"`
	// Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePort2 *string `pulumi:"sourcePort2"`
	// Source port group.
	SourcePortGroup *string `pulumi:"sourcePortGroup"`
	// Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePortMask *string `pulumi:"sourcePortMask"`
	// Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	SourcePortOperator *string `pulumi:"sourcePortOperator"`
	// Source prefix.
	SourcePrefix *string `pulumi:"sourcePrefix"`
	// Source prefix length.
	SourcePrefixLength *string `pulumi:"sourcePrefixLength"`
	// Source prefix mask.
	SourcePrefixMask *string `pulumi:"sourcePrefixMask"`
	// Match TCP SYN flag.
	Syn *bool `pulumi:"syn"`
	// Time range name.
	TimeRange *string `pulumi:"timeRange"`
	// TTL. - Range: `0`-`255` - Default value: `0`
	Ttl *int `pulumi:"ttl"`
	// Match TCP URG flag.
	Urg *bool `pulumi:"urg"`
	// VLAN ID. - Range: `0`-`4095` - Default value: `4095`
	Vlan *int `pulumi:"vlan"`
	// NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
	Vni *string `pulumi:"vni"`
}

// The set of arguments for constructing a Ipv4AccessListEntry resource.
type Ipv4AccessListEntryArgs struct {
	// Match TCP ACK flag.
	Ack pulumi.BoolPtrInput
	// Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
	Action pulumi.StringPtrInput
	// Destination address group.
	DestinationAddressGroup pulumi.StringPtrInput
	// First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPort1 pulumi.StringPtrInput
	// Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPort2 pulumi.StringPtrInput
	// Destination port group.
	DestinationPortGroup pulumi.StringPtrInput
	// Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	DestinationPortMask pulumi.StringPtrInput
	// Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	DestinationPortOperator pulumi.StringPtrInput
	// Destination prefix.
	DestinationPrefix pulumi.StringPtrInput
	// Destination prefix length.
	DestinationPrefixLength pulumi.StringPtrInput
	// Destination prefix mask.
	DestinationPrefixMask pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Match DSCP. - Range: `0`-`63`
	Dscp pulumi.IntPtrInput
	// Match TCP EST flag.
	Est pulumi.BoolPtrInput
	// Match TCP FIN flag.
	Fin pulumi.BoolPtrInput
	// Match non-initial fragment.
	Fragment pulumi.BoolPtrInput
	// HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
	// `invalid`
	HttpOptionType pulumi.StringPtrInput
	// ICMP code. - Range: `0`-`256` - Default value: `256`
	IcmpCode pulumi.IntPtrInput
	// ICMP type. - Range: `0`-`256` - Default value: `256`
	IcmpType pulumi.IntPtrInput
	// Log matches against ACL entry. - Default value: `false`
	Logging pulumi.BoolPtrInput
	// Access list name.
	Name pulumi.StringPtrInput
	// First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
	PacketLength1 pulumi.StringPtrInput
	// Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
	PacketLength2 pulumi.StringPtrInput
	// Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	PacketLengthOperator pulumi.StringPtrInput
	// Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
	Precedence pulumi.StringPtrInput
	// Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
	// `pim`, `pcp`, `udf`
	Protocol pulumi.StringPtrInput
	// Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
	// `nos`, `pim`, `pcp`, `udf`
	ProtocolMask pulumi.StringPtrInput
	// Match TCP PSH flag.
	Psh pulumi.BoolPtrInput
	// Redirect action.
	Redirect pulumi.StringPtrInput
	// ACL comment.
	Remark pulumi.StringPtrInput
	// Match TCP REV flag.
	Rev pulumi.BoolPtrInput
	// Match TCP RST flag.
	Rst pulumi.BoolPtrInput
	// Sequence number.
	SequenceNumber pulumi.IntInput
	// Source address group.
	SourceAddressGroup pulumi.StringPtrInput
	// First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePort1 pulumi.StringPtrInput
	// Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePort2 pulumi.StringPtrInput
	// Source port group.
	SourcePortGroup pulumi.StringPtrInput
	// Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
	// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
	// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
	// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
	// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
	SourcePortMask pulumi.StringPtrInput
	// Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
	SourcePortOperator pulumi.StringPtrInput
	// Source prefix.
	SourcePrefix pulumi.StringPtrInput
	// Source prefix length.
	SourcePrefixLength pulumi.StringPtrInput
	// Source prefix mask.
	SourcePrefixMask pulumi.StringPtrInput
	// Match TCP SYN flag.
	Syn pulumi.BoolPtrInput
	// Time range name.
	TimeRange pulumi.StringPtrInput
	// TTL. - Range: `0`-`255` - Default value: `0`
	Ttl pulumi.IntPtrInput
	// Match TCP URG flag.
	Urg pulumi.BoolPtrInput
	// VLAN ID. - Range: `0`-`4095` - Default value: `4095`
	Vlan pulumi.IntPtrInput
	// NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
	Vni pulumi.StringPtrInput
}

func (Ipv4AccessListEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4AccessListEntryArgs)(nil)).Elem()
}

type Ipv4AccessListEntryInput interface {
	pulumi.Input

	ToIpv4AccessListEntryOutput() Ipv4AccessListEntryOutput
	ToIpv4AccessListEntryOutputWithContext(ctx context.Context) Ipv4AccessListEntryOutput
}

func (*Ipv4AccessListEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4AccessListEntry)(nil)).Elem()
}

func (i *Ipv4AccessListEntry) ToIpv4AccessListEntryOutput() Ipv4AccessListEntryOutput {
	return i.ToIpv4AccessListEntryOutputWithContext(context.Background())
}

func (i *Ipv4AccessListEntry) ToIpv4AccessListEntryOutputWithContext(ctx context.Context) Ipv4AccessListEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AccessListEntryOutput)
}

func (i *Ipv4AccessListEntry) ToOutput(ctx context.Context) pulumix.Output[*Ipv4AccessListEntry] {
	return pulumix.Output[*Ipv4AccessListEntry]{
		OutputState: i.ToIpv4AccessListEntryOutputWithContext(ctx).OutputState,
	}
}

// Ipv4AccessListEntryArrayInput is an input type that accepts Ipv4AccessListEntryArray and Ipv4AccessListEntryArrayOutput values.
// You can construct a concrete instance of `Ipv4AccessListEntryArrayInput` via:
//
//	Ipv4AccessListEntryArray{ Ipv4AccessListEntryArgs{...} }
type Ipv4AccessListEntryArrayInput interface {
	pulumi.Input

	ToIpv4AccessListEntryArrayOutput() Ipv4AccessListEntryArrayOutput
	ToIpv4AccessListEntryArrayOutputWithContext(context.Context) Ipv4AccessListEntryArrayOutput
}

type Ipv4AccessListEntryArray []Ipv4AccessListEntryInput

func (Ipv4AccessListEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4AccessListEntry)(nil)).Elem()
}

func (i Ipv4AccessListEntryArray) ToIpv4AccessListEntryArrayOutput() Ipv4AccessListEntryArrayOutput {
	return i.ToIpv4AccessListEntryArrayOutputWithContext(context.Background())
}

func (i Ipv4AccessListEntryArray) ToIpv4AccessListEntryArrayOutputWithContext(ctx context.Context) Ipv4AccessListEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AccessListEntryArrayOutput)
}

func (i Ipv4AccessListEntryArray) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4AccessListEntry] {
	return pulumix.Output[[]*Ipv4AccessListEntry]{
		OutputState: i.ToIpv4AccessListEntryArrayOutputWithContext(ctx).OutputState,
	}
}

// Ipv4AccessListEntryMapInput is an input type that accepts Ipv4AccessListEntryMap and Ipv4AccessListEntryMapOutput values.
// You can construct a concrete instance of `Ipv4AccessListEntryMapInput` via:
//
//	Ipv4AccessListEntryMap{ "key": Ipv4AccessListEntryArgs{...} }
type Ipv4AccessListEntryMapInput interface {
	pulumi.Input

	ToIpv4AccessListEntryMapOutput() Ipv4AccessListEntryMapOutput
	ToIpv4AccessListEntryMapOutputWithContext(context.Context) Ipv4AccessListEntryMapOutput
}

type Ipv4AccessListEntryMap map[string]Ipv4AccessListEntryInput

func (Ipv4AccessListEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4AccessListEntry)(nil)).Elem()
}

func (i Ipv4AccessListEntryMap) ToIpv4AccessListEntryMapOutput() Ipv4AccessListEntryMapOutput {
	return i.ToIpv4AccessListEntryMapOutputWithContext(context.Background())
}

func (i Ipv4AccessListEntryMap) ToIpv4AccessListEntryMapOutputWithContext(ctx context.Context) Ipv4AccessListEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AccessListEntryMapOutput)
}

func (i Ipv4AccessListEntryMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4AccessListEntry] {
	return pulumix.Output[map[string]*Ipv4AccessListEntry]{
		OutputState: i.ToIpv4AccessListEntryMapOutputWithContext(ctx).OutputState,
	}
}

type Ipv4AccessListEntryOutput struct{ *pulumi.OutputState }

func (Ipv4AccessListEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4AccessListEntry)(nil)).Elem()
}

func (o Ipv4AccessListEntryOutput) ToIpv4AccessListEntryOutput() Ipv4AccessListEntryOutput {
	return o
}

func (o Ipv4AccessListEntryOutput) ToIpv4AccessListEntryOutputWithContext(ctx context.Context) Ipv4AccessListEntryOutput {
	return o
}

func (o Ipv4AccessListEntryOutput) ToOutput(ctx context.Context) pulumix.Output[*Ipv4AccessListEntry] {
	return pulumix.Output[*Ipv4AccessListEntry]{
		OutputState: o.OutputState,
	}
}

// Match TCP ACK flag.
func (o Ipv4AccessListEntryOutput) Ack() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.BoolPtrOutput { return v.Ack }).(pulumi.BoolPtrOutput)
}

// Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
func (o Ipv4AccessListEntryOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Destination address group.
func (o Ipv4AccessListEntryOutput) DestinationAddressGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.DestinationAddressGroup }).(pulumi.StringPtrOutput)
}

// First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
func (o Ipv4AccessListEntryOutput) DestinationPort1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.DestinationPort1 }).(pulumi.StringPtrOutput)
}

// Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
func (o Ipv4AccessListEntryOutput) DestinationPort2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.DestinationPort2 }).(pulumi.StringPtrOutput)
}

// Destination port group.
func (o Ipv4AccessListEntryOutput) DestinationPortGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.DestinationPortGroup }).(pulumi.StringPtrOutput)
}

// Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
func (o Ipv4AccessListEntryOutput) DestinationPortMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.DestinationPortMask }).(pulumi.StringPtrOutput)
}

// Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
func (o Ipv4AccessListEntryOutput) DestinationPortOperator() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringOutput { return v.DestinationPortOperator }).(pulumi.StringOutput)
}

// Destination prefix.
func (o Ipv4AccessListEntryOutput) DestinationPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.DestinationPrefix }).(pulumi.StringPtrOutput)
}

// Destination prefix length.
func (o Ipv4AccessListEntryOutput) DestinationPrefixLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.DestinationPrefixLength }).(pulumi.StringPtrOutput)
}

// Destination prefix mask.
func (o Ipv4AccessListEntryOutput) DestinationPrefixMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.DestinationPrefixMask }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o Ipv4AccessListEntryOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Match DSCP. - Range: `0`-`63`
func (o Ipv4AccessListEntryOutput) Dscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.IntPtrOutput { return v.Dscp }).(pulumi.IntPtrOutput)
}

// Match TCP EST flag.
func (o Ipv4AccessListEntryOutput) Est() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.BoolPtrOutput { return v.Est }).(pulumi.BoolPtrOutput)
}

// Match TCP FIN flag.
func (o Ipv4AccessListEntryOutput) Fin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.BoolPtrOutput { return v.Fin }).(pulumi.BoolPtrOutput)
}

// Match non-initial fragment.
func (o Ipv4AccessListEntryOutput) Fragment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.BoolPtrOutput { return v.Fragment }).(pulumi.BoolPtrOutput)
}

// HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
// `invalid`
func (o Ipv4AccessListEntryOutput) HttpOptionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringOutput { return v.HttpOptionType }).(pulumi.StringOutput)
}

// ICMP code. - Range: `0`-`256` - Default value: `256`
func (o Ipv4AccessListEntryOutput) IcmpCode() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.IntOutput { return v.IcmpCode }).(pulumi.IntOutput)
}

// ICMP type. - Range: `0`-`256` - Default value: `256`
func (o Ipv4AccessListEntryOutput) IcmpType() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.IntOutput { return v.IcmpType }).(pulumi.IntOutput)
}

// Log matches against ACL entry. - Default value: `false`
func (o Ipv4AccessListEntryOutput) Logging() pulumi.BoolOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.BoolOutput { return v.Logging }).(pulumi.BoolOutput)
}

// Access list name.
func (o Ipv4AccessListEntryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
func (o Ipv4AccessListEntryOutput) PacketLength1() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringOutput { return v.PacketLength1 }).(pulumi.StringOutput)
}

// Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
func (o Ipv4AccessListEntryOutput) PacketLength2() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringOutput { return v.PacketLength2 }).(pulumi.StringOutput)
}

// Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
func (o Ipv4AccessListEntryOutput) PacketLengthOperator() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringOutput { return v.PacketLengthOperator }).(pulumi.StringOutput)
}

// Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
func (o Ipv4AccessListEntryOutput) Precedence() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringOutput { return v.Precedence }).(pulumi.StringOutput)
}

// Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
// `pim`, `pcp`, `udf`
func (o Ipv4AccessListEntryOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
// `nos`, `pim`, `pcp`, `udf`
func (o Ipv4AccessListEntryOutput) ProtocolMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.ProtocolMask }).(pulumi.StringPtrOutput)
}

// Match TCP PSH flag.
func (o Ipv4AccessListEntryOutput) Psh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.BoolPtrOutput { return v.Psh }).(pulumi.BoolPtrOutput)
}

// Redirect action.
func (o Ipv4AccessListEntryOutput) Redirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.Redirect }).(pulumi.StringPtrOutput)
}

// ACL comment.
func (o Ipv4AccessListEntryOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// Match TCP REV flag.
func (o Ipv4AccessListEntryOutput) Rev() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.BoolPtrOutput { return v.Rev }).(pulumi.BoolPtrOutput)
}

// Match TCP RST flag.
func (o Ipv4AccessListEntryOutput) Rst() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.BoolPtrOutput { return v.Rst }).(pulumi.BoolPtrOutput)
}

// Sequence number.
func (o Ipv4AccessListEntryOutput) SequenceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.IntOutput { return v.SequenceNumber }).(pulumi.IntOutput)
}

// Source address group.
func (o Ipv4AccessListEntryOutput) SourceAddressGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.SourceAddressGroup }).(pulumi.StringPtrOutput)
}

// First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
func (o Ipv4AccessListEntryOutput) SourcePort1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.SourcePort1 }).(pulumi.StringPtrOutput)
}

// Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
func (o Ipv4AccessListEntryOutput) SourcePort2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.SourcePort2 }).(pulumi.StringPtrOutput)
}

// Source port group.
func (o Ipv4AccessListEntryOutput) SourcePortGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.SourcePortGroup }).(pulumi.StringPtrOutput)
}

// Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
func (o Ipv4AccessListEntryOutput) SourcePortMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.SourcePortMask }).(pulumi.StringPtrOutput)
}

// Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
func (o Ipv4AccessListEntryOutput) SourcePortOperator() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringOutput { return v.SourcePortOperator }).(pulumi.StringOutput)
}

// Source prefix.
func (o Ipv4AccessListEntryOutput) SourcePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.SourcePrefix }).(pulumi.StringPtrOutput)
}

// Source prefix length.
func (o Ipv4AccessListEntryOutput) SourcePrefixLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.SourcePrefixLength }).(pulumi.StringPtrOutput)
}

// Source prefix mask.
func (o Ipv4AccessListEntryOutput) SourcePrefixMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.SourcePrefixMask }).(pulumi.StringPtrOutput)
}

// Match TCP SYN flag.
func (o Ipv4AccessListEntryOutput) Syn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.BoolPtrOutput { return v.Syn }).(pulumi.BoolPtrOutput)
}

// Time range name.
func (o Ipv4AccessListEntryOutput) TimeRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringPtrOutput { return v.TimeRange }).(pulumi.StringPtrOutput)
}

// TTL. - Range: `0`-`255` - Default value: `0`
func (o Ipv4AccessListEntryOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// Match TCP URG flag.
func (o Ipv4AccessListEntryOutput) Urg() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.BoolPtrOutput { return v.Urg }).(pulumi.BoolPtrOutput)
}

// VLAN ID. - Range: `0`-`4095` - Default value: `4095`
func (o Ipv4AccessListEntryOutput) Vlan() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.IntOutput { return v.Vlan }).(pulumi.IntOutput)
}

// NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
func (o Ipv4AccessListEntryOutput) Vni() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessListEntry) pulumi.StringOutput { return v.Vni }).(pulumi.StringOutput)
}

type Ipv4AccessListEntryArrayOutput struct{ *pulumi.OutputState }

func (Ipv4AccessListEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4AccessListEntry)(nil)).Elem()
}

func (o Ipv4AccessListEntryArrayOutput) ToIpv4AccessListEntryArrayOutput() Ipv4AccessListEntryArrayOutput {
	return o
}

func (o Ipv4AccessListEntryArrayOutput) ToIpv4AccessListEntryArrayOutputWithContext(ctx context.Context) Ipv4AccessListEntryArrayOutput {
	return o
}

func (o Ipv4AccessListEntryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4AccessListEntry] {
	return pulumix.Output[[]*Ipv4AccessListEntry]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4AccessListEntryArrayOutput) Index(i pulumi.IntInput) Ipv4AccessListEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv4AccessListEntry {
		return vs[0].([]*Ipv4AccessListEntry)[vs[1].(int)]
	}).(Ipv4AccessListEntryOutput)
}

type Ipv4AccessListEntryMapOutput struct{ *pulumi.OutputState }

func (Ipv4AccessListEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4AccessListEntry)(nil)).Elem()
}

func (o Ipv4AccessListEntryMapOutput) ToIpv4AccessListEntryMapOutput() Ipv4AccessListEntryMapOutput {
	return o
}

func (o Ipv4AccessListEntryMapOutput) ToIpv4AccessListEntryMapOutputWithContext(ctx context.Context) Ipv4AccessListEntryMapOutput {
	return o
}

func (o Ipv4AccessListEntryMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4AccessListEntry] {
	return pulumix.Output[map[string]*Ipv4AccessListEntry]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4AccessListEntryMapOutput) MapIndex(k pulumi.StringInput) Ipv4AccessListEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv4AccessListEntry {
		return vs[0].(map[string]*Ipv4AccessListEntry)[vs[1].(string)]
	}).(Ipv4AccessListEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AccessListEntryInput)(nil)).Elem(), &Ipv4AccessListEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AccessListEntryArrayInput)(nil)).Elem(), Ipv4AccessListEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AccessListEntryMapInput)(nil)).Elem(), Ipv4AccessListEntryMap{})
	pulumi.RegisterOutputType(Ipv4AccessListEntryOutput{})
	pulumi.RegisterOutputType(Ipv4AccessListEntryArrayOutput{})
	pulumi.RegisterOutputType(Ipv4AccessListEntryMapOutput{})
}
