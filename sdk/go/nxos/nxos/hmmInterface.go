// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type HmmInterface struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `vlan10`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// HMM Fabric Forwarding mode information for the interface. - Choices: `standard`, `anycastGW`, `proxyGW` - Default value:
	// `standard`
	Mode pulumi.StringOutput `pulumi:"mode"`
}

// NewHmmInterface registers a new resource with the given unique name, arguments, and options.
func NewHmmInterface(ctx *pulumi.Context,
	name string, args *HmmInterfaceArgs, opts ...pulumi.ResourceOption) (*HmmInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HmmInterface
	err := ctx.RegisterResource("nxos:nxos/hmmInterface:HmmInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHmmInterface gets an existing HmmInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHmmInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HmmInterfaceState, opts ...pulumi.ResourceOption) (*HmmInterface, error) {
	var resource HmmInterface
	err := ctx.ReadResource("nxos:nxos/hmmInterface:HmmInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HmmInterface resources.
type hmmInterfaceState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `vlan10`.
	InterfaceId *string `pulumi:"interfaceId"`
	// HMM Fabric Forwarding mode information for the interface. - Choices: `standard`, `anycastGW`, `proxyGW` - Default value:
	// `standard`
	Mode *string `pulumi:"mode"`
}

type HmmInterfaceState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `vlan10`.
	InterfaceId pulumi.StringPtrInput
	// HMM Fabric Forwarding mode information for the interface. - Choices: `standard`, `anycastGW`, `proxyGW` - Default value:
	// `standard`
	Mode pulumi.StringPtrInput
}

func (HmmInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*hmmInterfaceState)(nil)).Elem()
}

type hmmInterfaceArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `vlan10`.
	InterfaceId string `pulumi:"interfaceId"`
	// HMM Fabric Forwarding mode information for the interface. - Choices: `standard`, `anycastGW`, `proxyGW` - Default value:
	// `standard`
	Mode *string `pulumi:"mode"`
}

// The set of arguments for constructing a HmmInterface resource.
type HmmInterfaceArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `vlan10`.
	InterfaceId pulumi.StringInput
	// HMM Fabric Forwarding mode information for the interface. - Choices: `standard`, `anycastGW`, `proxyGW` - Default value:
	// `standard`
	Mode pulumi.StringPtrInput
}

func (HmmInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hmmInterfaceArgs)(nil)).Elem()
}

type HmmInterfaceInput interface {
	pulumi.Input

	ToHmmInterfaceOutput() HmmInterfaceOutput
	ToHmmInterfaceOutputWithContext(ctx context.Context) HmmInterfaceOutput
}

func (*HmmInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**HmmInterface)(nil)).Elem()
}

func (i *HmmInterface) ToHmmInterfaceOutput() HmmInterfaceOutput {
	return i.ToHmmInterfaceOutputWithContext(context.Background())
}

func (i *HmmInterface) ToHmmInterfaceOutputWithContext(ctx context.Context) HmmInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HmmInterfaceOutput)
}

func (i *HmmInterface) ToOutput(ctx context.Context) pulumix.Output[*HmmInterface] {
	return pulumix.Output[*HmmInterface]{
		OutputState: i.ToHmmInterfaceOutputWithContext(ctx).OutputState,
	}
}

// HmmInterfaceArrayInput is an input type that accepts HmmInterfaceArray and HmmInterfaceArrayOutput values.
// You can construct a concrete instance of `HmmInterfaceArrayInput` via:
//
//	HmmInterfaceArray{ HmmInterfaceArgs{...} }
type HmmInterfaceArrayInput interface {
	pulumi.Input

	ToHmmInterfaceArrayOutput() HmmInterfaceArrayOutput
	ToHmmInterfaceArrayOutputWithContext(context.Context) HmmInterfaceArrayOutput
}

type HmmInterfaceArray []HmmInterfaceInput

func (HmmInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HmmInterface)(nil)).Elem()
}

func (i HmmInterfaceArray) ToHmmInterfaceArrayOutput() HmmInterfaceArrayOutput {
	return i.ToHmmInterfaceArrayOutputWithContext(context.Background())
}

func (i HmmInterfaceArray) ToHmmInterfaceArrayOutputWithContext(ctx context.Context) HmmInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HmmInterfaceArrayOutput)
}

func (i HmmInterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*HmmInterface] {
	return pulumix.Output[[]*HmmInterface]{
		OutputState: i.ToHmmInterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// HmmInterfaceMapInput is an input type that accepts HmmInterfaceMap and HmmInterfaceMapOutput values.
// You can construct a concrete instance of `HmmInterfaceMapInput` via:
//
//	HmmInterfaceMap{ "key": HmmInterfaceArgs{...} }
type HmmInterfaceMapInput interface {
	pulumi.Input

	ToHmmInterfaceMapOutput() HmmInterfaceMapOutput
	ToHmmInterfaceMapOutputWithContext(context.Context) HmmInterfaceMapOutput
}

type HmmInterfaceMap map[string]HmmInterfaceInput

func (HmmInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HmmInterface)(nil)).Elem()
}

func (i HmmInterfaceMap) ToHmmInterfaceMapOutput() HmmInterfaceMapOutput {
	return i.ToHmmInterfaceMapOutputWithContext(context.Background())
}

func (i HmmInterfaceMap) ToHmmInterfaceMapOutputWithContext(ctx context.Context) HmmInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HmmInterfaceMapOutput)
}

func (i HmmInterfaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*HmmInterface] {
	return pulumix.Output[map[string]*HmmInterface]{
		OutputState: i.ToHmmInterfaceMapOutputWithContext(ctx).OutputState,
	}
}

type HmmInterfaceOutput struct{ *pulumi.OutputState }

func (HmmInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HmmInterface)(nil)).Elem()
}

func (o HmmInterfaceOutput) ToHmmInterfaceOutput() HmmInterfaceOutput {
	return o
}

func (o HmmInterfaceOutput) ToHmmInterfaceOutputWithContext(ctx context.Context) HmmInterfaceOutput {
	return o
}

func (o HmmInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[*HmmInterface] {
	return pulumix.Output[*HmmInterface]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o HmmInterfaceOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *HmmInterface) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o HmmInterfaceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HmmInterface) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Must match first field in the output of `show intf brief`. Example: `vlan10`.
func (o HmmInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *HmmInterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// HMM Fabric Forwarding mode information for the interface. - Choices: `standard`, `anycastGW`, `proxyGW` - Default value:
// `standard`
func (o HmmInterfaceOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *HmmInterface) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

type HmmInterfaceArrayOutput struct{ *pulumi.OutputState }

func (HmmInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HmmInterface)(nil)).Elem()
}

func (o HmmInterfaceArrayOutput) ToHmmInterfaceArrayOutput() HmmInterfaceArrayOutput {
	return o
}

func (o HmmInterfaceArrayOutput) ToHmmInterfaceArrayOutputWithContext(ctx context.Context) HmmInterfaceArrayOutput {
	return o
}

func (o HmmInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*HmmInterface] {
	return pulumix.Output[[]*HmmInterface]{
		OutputState: o.OutputState,
	}
}

func (o HmmInterfaceArrayOutput) Index(i pulumi.IntInput) HmmInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HmmInterface {
		return vs[0].([]*HmmInterface)[vs[1].(int)]
	}).(HmmInterfaceOutput)
}

type HmmInterfaceMapOutput struct{ *pulumi.OutputState }

func (HmmInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HmmInterface)(nil)).Elem()
}

func (o HmmInterfaceMapOutput) ToHmmInterfaceMapOutput() HmmInterfaceMapOutput {
	return o
}

func (o HmmInterfaceMapOutput) ToHmmInterfaceMapOutputWithContext(ctx context.Context) HmmInterfaceMapOutput {
	return o
}

func (o HmmInterfaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*HmmInterface] {
	return pulumix.Output[map[string]*HmmInterface]{
		OutputState: o.OutputState,
	}
}

func (o HmmInterfaceMapOutput) MapIndex(k pulumi.StringInput) HmmInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HmmInterface {
		return vs[0].(map[string]*HmmInterface)[vs[1].(string)]
	}).(HmmInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HmmInterfaceInput)(nil)).Elem(), &HmmInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*HmmInterfaceArrayInput)(nil)).Elem(), HmmInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HmmInterfaceMapInput)(nil)).Elem(), HmmInterfaceMap{})
	pulumi.RegisterOutputType(HmmInterfaceOutput{})
	pulumi.RegisterOutputType(HmmInterfaceArrayOutput{})
	pulumi.RegisterOutputType(HmmInterfaceMapOutput{})
}
