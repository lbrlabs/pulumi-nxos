// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FeatureDhcp struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureDhcp registers a new resource with the given unique name, arguments, and options.
func NewFeatureDhcp(ctx *pulumi.Context,
	name string, args *FeatureDhcpArgs, opts ...pulumi.ResourceOption) (*FeatureDhcp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureDhcp
	err := ctx.RegisterResource("nxos:nxos/featureDhcp:FeatureDhcp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureDhcp gets an existing FeatureDhcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureDhcp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureDhcpState, opts ...pulumi.ResourceOption) (*FeatureDhcp, error) {
	var resource FeatureDhcp
	err := ctx.ReadResource("nxos:nxos/featureDhcp:FeatureDhcp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureDhcp resources.
type featureDhcpState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureDhcpState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureDhcpState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureDhcpState)(nil)).Elem()
}

type featureDhcpArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureDhcp resource.
type FeatureDhcpArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureDhcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureDhcpArgs)(nil)).Elem()
}

type FeatureDhcpInput interface {
	pulumi.Input

	ToFeatureDhcpOutput() FeatureDhcpOutput
	ToFeatureDhcpOutputWithContext(ctx context.Context) FeatureDhcpOutput
}

func (*FeatureDhcp) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureDhcp)(nil)).Elem()
}

func (i *FeatureDhcp) ToFeatureDhcpOutput() FeatureDhcpOutput {
	return i.ToFeatureDhcpOutputWithContext(context.Background())
}

func (i *FeatureDhcp) ToFeatureDhcpOutputWithContext(ctx context.Context) FeatureDhcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureDhcpOutput)
}

func (i *FeatureDhcp) ToOutput(ctx context.Context) pulumix.Output[*FeatureDhcp] {
	return pulumix.Output[*FeatureDhcp]{
		OutputState: i.ToFeatureDhcpOutputWithContext(ctx).OutputState,
	}
}

// FeatureDhcpArrayInput is an input type that accepts FeatureDhcpArray and FeatureDhcpArrayOutput values.
// You can construct a concrete instance of `FeatureDhcpArrayInput` via:
//
//	FeatureDhcpArray{ FeatureDhcpArgs{...} }
type FeatureDhcpArrayInput interface {
	pulumi.Input

	ToFeatureDhcpArrayOutput() FeatureDhcpArrayOutput
	ToFeatureDhcpArrayOutputWithContext(context.Context) FeatureDhcpArrayOutput
}

type FeatureDhcpArray []FeatureDhcpInput

func (FeatureDhcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureDhcp)(nil)).Elem()
}

func (i FeatureDhcpArray) ToFeatureDhcpArrayOutput() FeatureDhcpArrayOutput {
	return i.ToFeatureDhcpArrayOutputWithContext(context.Background())
}

func (i FeatureDhcpArray) ToFeatureDhcpArrayOutputWithContext(ctx context.Context) FeatureDhcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureDhcpArrayOutput)
}

func (i FeatureDhcpArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureDhcp] {
	return pulumix.Output[[]*FeatureDhcp]{
		OutputState: i.ToFeatureDhcpArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureDhcpMapInput is an input type that accepts FeatureDhcpMap and FeatureDhcpMapOutput values.
// You can construct a concrete instance of `FeatureDhcpMapInput` via:
//
//	FeatureDhcpMap{ "key": FeatureDhcpArgs{...} }
type FeatureDhcpMapInput interface {
	pulumi.Input

	ToFeatureDhcpMapOutput() FeatureDhcpMapOutput
	ToFeatureDhcpMapOutputWithContext(context.Context) FeatureDhcpMapOutput
}

type FeatureDhcpMap map[string]FeatureDhcpInput

func (FeatureDhcpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureDhcp)(nil)).Elem()
}

func (i FeatureDhcpMap) ToFeatureDhcpMapOutput() FeatureDhcpMapOutput {
	return i.ToFeatureDhcpMapOutputWithContext(context.Background())
}

func (i FeatureDhcpMap) ToFeatureDhcpMapOutputWithContext(ctx context.Context) FeatureDhcpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureDhcpMapOutput)
}

func (i FeatureDhcpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureDhcp] {
	return pulumix.Output[map[string]*FeatureDhcp]{
		OutputState: i.ToFeatureDhcpMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureDhcpOutput struct{ *pulumi.OutputState }

func (FeatureDhcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureDhcp)(nil)).Elem()
}

func (o FeatureDhcpOutput) ToFeatureDhcpOutput() FeatureDhcpOutput {
	return o
}

func (o FeatureDhcpOutput) ToFeatureDhcpOutputWithContext(ctx context.Context) FeatureDhcpOutput {
	return o
}

func (o FeatureDhcpOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureDhcp] {
	return pulumix.Output[*FeatureDhcp]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureDhcpOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureDhcp) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureDhcpOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureDhcp) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureDhcpArrayOutput struct{ *pulumi.OutputState }

func (FeatureDhcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureDhcp)(nil)).Elem()
}

func (o FeatureDhcpArrayOutput) ToFeatureDhcpArrayOutput() FeatureDhcpArrayOutput {
	return o
}

func (o FeatureDhcpArrayOutput) ToFeatureDhcpArrayOutputWithContext(ctx context.Context) FeatureDhcpArrayOutput {
	return o
}

func (o FeatureDhcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureDhcp] {
	return pulumix.Output[[]*FeatureDhcp]{
		OutputState: o.OutputState,
	}
}

func (o FeatureDhcpArrayOutput) Index(i pulumi.IntInput) FeatureDhcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureDhcp {
		return vs[0].([]*FeatureDhcp)[vs[1].(int)]
	}).(FeatureDhcpOutput)
}

type FeatureDhcpMapOutput struct{ *pulumi.OutputState }

func (FeatureDhcpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureDhcp)(nil)).Elem()
}

func (o FeatureDhcpMapOutput) ToFeatureDhcpMapOutput() FeatureDhcpMapOutput {
	return o
}

func (o FeatureDhcpMapOutput) ToFeatureDhcpMapOutputWithContext(ctx context.Context) FeatureDhcpMapOutput {
	return o
}

func (o FeatureDhcpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureDhcp] {
	return pulumix.Output[map[string]*FeatureDhcp]{
		OutputState: o.OutputState,
	}
}

func (o FeatureDhcpMapOutput) MapIndex(k pulumi.StringInput) FeatureDhcpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureDhcp {
		return vs[0].(map[string]*FeatureDhcp)[vs[1].(string)]
	}).(FeatureDhcpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureDhcpInput)(nil)).Elem(), &FeatureDhcp{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureDhcpArrayInput)(nil)).Elem(), FeatureDhcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureDhcpMapInput)(nil)).Elem(), FeatureDhcpMap{})
	pulumi.RegisterOutputType(FeatureDhcpOutput{})
	pulumi.RegisterOutputType(FeatureDhcpArrayOutput{})
	pulumi.RegisterOutputType(FeatureDhcpMapOutput{})
}
