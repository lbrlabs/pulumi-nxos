// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FeatureIsis struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureIsis registers a new resource with the given unique name, arguments, and options.
func NewFeatureIsis(ctx *pulumi.Context,
	name string, args *FeatureIsisArgs, opts ...pulumi.ResourceOption) (*FeatureIsis, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureIsis
	err := ctx.RegisterResource("nxos:nxos/featureIsis:FeatureIsis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureIsis gets an existing FeatureIsis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureIsis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureIsisState, opts ...pulumi.ResourceOption) (*FeatureIsis, error) {
	var resource FeatureIsis
	err := ctx.ReadResource("nxos:nxos/featureIsis:FeatureIsis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureIsis resources.
type featureIsisState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureIsisState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureIsisState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureIsisState)(nil)).Elem()
}

type featureIsisArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureIsis resource.
type FeatureIsisArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureIsisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureIsisArgs)(nil)).Elem()
}

type FeatureIsisInput interface {
	pulumi.Input

	ToFeatureIsisOutput() FeatureIsisOutput
	ToFeatureIsisOutputWithContext(ctx context.Context) FeatureIsisOutput
}

func (*FeatureIsis) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureIsis)(nil)).Elem()
}

func (i *FeatureIsis) ToFeatureIsisOutput() FeatureIsisOutput {
	return i.ToFeatureIsisOutputWithContext(context.Background())
}

func (i *FeatureIsis) ToFeatureIsisOutputWithContext(ctx context.Context) FeatureIsisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureIsisOutput)
}

func (i *FeatureIsis) ToOutput(ctx context.Context) pulumix.Output[*FeatureIsis] {
	return pulumix.Output[*FeatureIsis]{
		OutputState: i.ToFeatureIsisOutputWithContext(ctx).OutputState,
	}
}

// FeatureIsisArrayInput is an input type that accepts FeatureIsisArray and FeatureIsisArrayOutput values.
// You can construct a concrete instance of `FeatureIsisArrayInput` via:
//
//	FeatureIsisArray{ FeatureIsisArgs{...} }
type FeatureIsisArrayInput interface {
	pulumi.Input

	ToFeatureIsisArrayOutput() FeatureIsisArrayOutput
	ToFeatureIsisArrayOutputWithContext(context.Context) FeatureIsisArrayOutput
}

type FeatureIsisArray []FeatureIsisInput

func (FeatureIsisArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureIsis)(nil)).Elem()
}

func (i FeatureIsisArray) ToFeatureIsisArrayOutput() FeatureIsisArrayOutput {
	return i.ToFeatureIsisArrayOutputWithContext(context.Background())
}

func (i FeatureIsisArray) ToFeatureIsisArrayOutputWithContext(ctx context.Context) FeatureIsisArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureIsisArrayOutput)
}

func (i FeatureIsisArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureIsis] {
	return pulumix.Output[[]*FeatureIsis]{
		OutputState: i.ToFeatureIsisArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureIsisMapInput is an input type that accepts FeatureIsisMap and FeatureIsisMapOutput values.
// You can construct a concrete instance of `FeatureIsisMapInput` via:
//
//	FeatureIsisMap{ "key": FeatureIsisArgs{...} }
type FeatureIsisMapInput interface {
	pulumi.Input

	ToFeatureIsisMapOutput() FeatureIsisMapOutput
	ToFeatureIsisMapOutputWithContext(context.Context) FeatureIsisMapOutput
}

type FeatureIsisMap map[string]FeatureIsisInput

func (FeatureIsisMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureIsis)(nil)).Elem()
}

func (i FeatureIsisMap) ToFeatureIsisMapOutput() FeatureIsisMapOutput {
	return i.ToFeatureIsisMapOutputWithContext(context.Background())
}

func (i FeatureIsisMap) ToFeatureIsisMapOutputWithContext(ctx context.Context) FeatureIsisMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureIsisMapOutput)
}

func (i FeatureIsisMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureIsis] {
	return pulumix.Output[map[string]*FeatureIsis]{
		OutputState: i.ToFeatureIsisMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureIsisOutput struct{ *pulumi.OutputState }

func (FeatureIsisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureIsis)(nil)).Elem()
}

func (o FeatureIsisOutput) ToFeatureIsisOutput() FeatureIsisOutput {
	return o
}

func (o FeatureIsisOutput) ToFeatureIsisOutputWithContext(ctx context.Context) FeatureIsisOutput {
	return o
}

func (o FeatureIsisOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureIsis] {
	return pulumix.Output[*FeatureIsis]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureIsisOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureIsis) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureIsisOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureIsis) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureIsisArrayOutput struct{ *pulumi.OutputState }

func (FeatureIsisArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureIsis)(nil)).Elem()
}

func (o FeatureIsisArrayOutput) ToFeatureIsisArrayOutput() FeatureIsisArrayOutput {
	return o
}

func (o FeatureIsisArrayOutput) ToFeatureIsisArrayOutputWithContext(ctx context.Context) FeatureIsisArrayOutput {
	return o
}

func (o FeatureIsisArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureIsis] {
	return pulumix.Output[[]*FeatureIsis]{
		OutputState: o.OutputState,
	}
}

func (o FeatureIsisArrayOutput) Index(i pulumi.IntInput) FeatureIsisOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureIsis {
		return vs[0].([]*FeatureIsis)[vs[1].(int)]
	}).(FeatureIsisOutput)
}

type FeatureIsisMapOutput struct{ *pulumi.OutputState }

func (FeatureIsisMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureIsis)(nil)).Elem()
}

func (o FeatureIsisMapOutput) ToFeatureIsisMapOutput() FeatureIsisMapOutput {
	return o
}

func (o FeatureIsisMapOutput) ToFeatureIsisMapOutputWithContext(ctx context.Context) FeatureIsisMapOutput {
	return o
}

func (o FeatureIsisMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureIsis] {
	return pulumix.Output[map[string]*FeatureIsis]{
		OutputState: o.OutputState,
	}
}

func (o FeatureIsisMapOutput) MapIndex(k pulumi.StringInput) FeatureIsisOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureIsis {
		return vs[0].(map[string]*FeatureIsis)[vs[1].(string)]
	}).(FeatureIsisOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureIsisInput)(nil)).Elem(), &FeatureIsis{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureIsisArrayInput)(nil)).Elem(), FeatureIsisArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureIsisMapInput)(nil)).Elem(), FeatureIsisMap{})
	pulumi.RegisterOutputType(FeatureIsisOutput{})
	pulumi.RegisterOutputType(FeatureIsisArrayOutput{})
	pulumi.RegisterOutputType(FeatureIsisMapOutput{})
}
