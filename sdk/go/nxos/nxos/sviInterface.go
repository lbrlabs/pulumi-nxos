// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SviInterface struct {
	pulumi.CustomResourceState

	// Administrative port state. - Choices: `up`, `down` - Default value: `up`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
	Delay pulumi.IntOutput `pulumi:"delay"`
	// Interface description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
	Medium pulumi.StringOutput `pulumi:"medium"`
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu pulumi.IntOutput `pulumi:"mtu"`
}

// NewSviInterface registers a new resource with the given unique name, arguments, and options.
func NewSviInterface(ctx *pulumi.Context,
	name string, args *SviInterfaceArgs, opts ...pulumi.ResourceOption) (*SviInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SviInterface
	err := ctx.RegisterResource("nxos:nxos/sviInterface:SviInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSviInterface gets an existing SviInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSviInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SviInterfaceState, opts ...pulumi.ResourceOption) (*SviInterface, error) {
	var resource SviInterface
	err := ctx.ReadResource("nxos:nxos/sviInterface:SviInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SviInterface resources.
type sviInterfaceState struct {
	// Administrative port state. - Choices: `up`, `down` - Default value: `up`
	AdminState *string `pulumi:"adminState"`
	// Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
	Bandwidth *int `pulumi:"bandwidth"`
	// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
	Delay *int `pulumi:"delay"`
	// Interface description.
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId *string `pulumi:"interfaceId"`
	// The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
	Medium *string `pulumi:"medium"`
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu *int `pulumi:"mtu"`
}

type SviInterfaceState struct {
	// Administrative port state. - Choices: `up`, `down` - Default value: `up`
	AdminState pulumi.StringPtrInput
	// Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
	Bandwidth pulumi.IntPtrInput
	// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
	Delay pulumi.IntPtrInput
	// Interface description.
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId pulumi.StringPtrInput
	// The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
	Medium pulumi.StringPtrInput
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu pulumi.IntPtrInput
}

func (SviInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sviInterfaceState)(nil)).Elem()
}

type sviInterfaceArgs struct {
	// Administrative port state. - Choices: `up`, `down` - Default value: `up`
	AdminState *string `pulumi:"adminState"`
	// Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
	Bandwidth *int `pulumi:"bandwidth"`
	// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
	Delay *int `pulumi:"delay"`
	// Interface description.
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId string `pulumi:"interfaceId"`
	// The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
	Medium *string `pulumi:"medium"`
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu *int `pulumi:"mtu"`
}

// The set of arguments for constructing a SviInterface resource.
type SviInterfaceArgs struct {
	// Administrative port state. - Choices: `up`, `down` - Default value: `up`
	AdminState pulumi.StringPtrInput
	// Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
	Bandwidth pulumi.IntPtrInput
	// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
	Delay pulumi.IntPtrInput
	// Interface description.
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `vlan100`.
	InterfaceId pulumi.StringInput
	// The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
	Medium pulumi.StringPtrInput
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu pulumi.IntPtrInput
}

func (SviInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sviInterfaceArgs)(nil)).Elem()
}

type SviInterfaceInput interface {
	pulumi.Input

	ToSviInterfaceOutput() SviInterfaceOutput
	ToSviInterfaceOutputWithContext(ctx context.Context) SviInterfaceOutput
}

func (*SviInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**SviInterface)(nil)).Elem()
}

func (i *SviInterface) ToSviInterfaceOutput() SviInterfaceOutput {
	return i.ToSviInterfaceOutputWithContext(context.Background())
}

func (i *SviInterface) ToSviInterfaceOutputWithContext(ctx context.Context) SviInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SviInterfaceOutput)
}

func (i *SviInterface) ToOutput(ctx context.Context) pulumix.Output[*SviInterface] {
	return pulumix.Output[*SviInterface]{
		OutputState: i.ToSviInterfaceOutputWithContext(ctx).OutputState,
	}
}

// SviInterfaceArrayInput is an input type that accepts SviInterfaceArray and SviInterfaceArrayOutput values.
// You can construct a concrete instance of `SviInterfaceArrayInput` via:
//
//	SviInterfaceArray{ SviInterfaceArgs{...} }
type SviInterfaceArrayInput interface {
	pulumi.Input

	ToSviInterfaceArrayOutput() SviInterfaceArrayOutput
	ToSviInterfaceArrayOutputWithContext(context.Context) SviInterfaceArrayOutput
}

type SviInterfaceArray []SviInterfaceInput

func (SviInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SviInterface)(nil)).Elem()
}

func (i SviInterfaceArray) ToSviInterfaceArrayOutput() SviInterfaceArrayOutput {
	return i.ToSviInterfaceArrayOutputWithContext(context.Background())
}

func (i SviInterfaceArray) ToSviInterfaceArrayOutputWithContext(ctx context.Context) SviInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SviInterfaceArrayOutput)
}

func (i SviInterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*SviInterface] {
	return pulumix.Output[[]*SviInterface]{
		OutputState: i.ToSviInterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// SviInterfaceMapInput is an input type that accepts SviInterfaceMap and SviInterfaceMapOutput values.
// You can construct a concrete instance of `SviInterfaceMapInput` via:
//
//	SviInterfaceMap{ "key": SviInterfaceArgs{...} }
type SviInterfaceMapInput interface {
	pulumi.Input

	ToSviInterfaceMapOutput() SviInterfaceMapOutput
	ToSviInterfaceMapOutputWithContext(context.Context) SviInterfaceMapOutput
}

type SviInterfaceMap map[string]SviInterfaceInput

func (SviInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SviInterface)(nil)).Elem()
}

func (i SviInterfaceMap) ToSviInterfaceMapOutput() SviInterfaceMapOutput {
	return i.ToSviInterfaceMapOutputWithContext(context.Background())
}

func (i SviInterfaceMap) ToSviInterfaceMapOutputWithContext(ctx context.Context) SviInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SviInterfaceMapOutput)
}

func (i SviInterfaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SviInterface] {
	return pulumix.Output[map[string]*SviInterface]{
		OutputState: i.ToSviInterfaceMapOutputWithContext(ctx).OutputState,
	}
}

type SviInterfaceOutput struct{ *pulumi.OutputState }

func (SviInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SviInterface)(nil)).Elem()
}

func (o SviInterfaceOutput) ToSviInterfaceOutput() SviInterfaceOutput {
	return o
}

func (o SviInterfaceOutput) ToSviInterfaceOutputWithContext(ctx context.Context) SviInterfaceOutput {
	return o
}

func (o SviInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[*SviInterface] {
	return pulumix.Output[*SviInterface]{
		OutputState: o.OutputState,
	}
}

// Administrative port state. - Choices: `up`, `down` - Default value: `up`
func (o SviInterfaceOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *SviInterface) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
func (o SviInterfaceOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *SviInterface) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
func (o SviInterfaceOutput) Delay() pulumi.IntOutput {
	return o.ApplyT(func(v *SviInterface) pulumi.IntOutput { return v.Delay }).(pulumi.IntOutput)
}

// Interface description.
func (o SviInterfaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SviInterface) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o SviInterfaceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SviInterface) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Must match first field in the output of `show intf brief`. Example: `vlan100`.
func (o SviInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SviInterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
func (o SviInterfaceOutput) Medium() pulumi.StringOutput {
	return o.ApplyT(func(v *SviInterface) pulumi.StringOutput { return v.Medium }).(pulumi.StringOutput)
}

// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
func (o SviInterfaceOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v *SviInterface) pulumi.IntOutput { return v.Mtu }).(pulumi.IntOutput)
}

type SviInterfaceArrayOutput struct{ *pulumi.OutputState }

func (SviInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SviInterface)(nil)).Elem()
}

func (o SviInterfaceArrayOutput) ToSviInterfaceArrayOutput() SviInterfaceArrayOutput {
	return o
}

func (o SviInterfaceArrayOutput) ToSviInterfaceArrayOutputWithContext(ctx context.Context) SviInterfaceArrayOutput {
	return o
}

func (o SviInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SviInterface] {
	return pulumix.Output[[]*SviInterface]{
		OutputState: o.OutputState,
	}
}

func (o SviInterfaceArrayOutput) Index(i pulumi.IntInput) SviInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SviInterface {
		return vs[0].([]*SviInterface)[vs[1].(int)]
	}).(SviInterfaceOutput)
}

type SviInterfaceMapOutput struct{ *pulumi.OutputState }

func (SviInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SviInterface)(nil)).Elem()
}

func (o SviInterfaceMapOutput) ToSviInterfaceMapOutput() SviInterfaceMapOutput {
	return o
}

func (o SviInterfaceMapOutput) ToSviInterfaceMapOutputWithContext(ctx context.Context) SviInterfaceMapOutput {
	return o
}

func (o SviInterfaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SviInterface] {
	return pulumix.Output[map[string]*SviInterface]{
		OutputState: o.OutputState,
	}
}

func (o SviInterfaceMapOutput) MapIndex(k pulumi.StringInput) SviInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SviInterface {
		return vs[0].(map[string]*SviInterface)[vs[1].(string)]
	}).(SviInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SviInterfaceInput)(nil)).Elem(), &SviInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*SviInterfaceArrayInput)(nil)).Elem(), SviInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SviInterfaceMapInput)(nil)).Elem(), SviInterfaceMap{})
	pulumi.RegisterOutputType(SviInterfaceOutput{})
	pulumi.RegisterOutputType(SviInterfaceArrayOutput{})
	pulumi.RegisterOutputType(SviInterfaceMapOutput{})
}
