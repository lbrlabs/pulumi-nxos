// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type NveVniIngressReplication struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Configure VxLAN Ingress Replication mode. - Choices: `bgp`, `unknown`, `static` - Default value: `unknown`
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Virtual Network ID. - Range: `1`-`16777214`
	Vni pulumi.IntOutput `pulumi:"vni"`
}

// NewNveVniIngressReplication registers a new resource with the given unique name, arguments, and options.
func NewNveVniIngressReplication(ctx *pulumi.Context,
	name string, args *NveVniIngressReplicationArgs, opts ...pulumi.ResourceOption) (*NveVniIngressReplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Vni == nil {
		return nil, errors.New("invalid value for required argument 'Vni'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NveVniIngressReplication
	err := ctx.RegisterResource("nxos:nxos/nveVniIngressReplication:NveVniIngressReplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNveVniIngressReplication gets an existing NveVniIngressReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNveVniIngressReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NveVniIngressReplicationState, opts ...pulumi.ResourceOption) (*NveVniIngressReplication, error) {
	var resource NveVniIngressReplication
	err := ctx.ReadResource("nxos:nxos/nveVniIngressReplication:NveVniIngressReplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NveVniIngressReplication resources.
type nveVniIngressReplicationState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Configure VxLAN Ingress Replication mode. - Choices: `bgp`, `unknown`, `static` - Default value: `unknown`
	Protocol *string `pulumi:"protocol"`
	// Virtual Network ID. - Range: `1`-`16777214`
	Vni *int `pulumi:"vni"`
}

type NveVniIngressReplicationState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Configure VxLAN Ingress Replication mode. - Choices: `bgp`, `unknown`, `static` - Default value: `unknown`
	Protocol pulumi.StringPtrInput
	// Virtual Network ID. - Range: `1`-`16777214`
	Vni pulumi.IntPtrInput
}

func (NveVniIngressReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*nveVniIngressReplicationState)(nil)).Elem()
}

type nveVniIngressReplicationArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Configure VxLAN Ingress Replication mode. - Choices: `bgp`, `unknown`, `static` - Default value: `unknown`
	Protocol *string `pulumi:"protocol"`
	// Virtual Network ID. - Range: `1`-`16777214`
	Vni int `pulumi:"vni"`
}

// The set of arguments for constructing a NveVniIngressReplication resource.
type NveVniIngressReplicationArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Configure VxLAN Ingress Replication mode. - Choices: `bgp`, `unknown`, `static` - Default value: `unknown`
	Protocol pulumi.StringPtrInput
	// Virtual Network ID. - Range: `1`-`16777214`
	Vni pulumi.IntInput
}

func (NveVniIngressReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nveVniIngressReplicationArgs)(nil)).Elem()
}

type NveVniIngressReplicationInput interface {
	pulumi.Input

	ToNveVniIngressReplicationOutput() NveVniIngressReplicationOutput
	ToNveVniIngressReplicationOutputWithContext(ctx context.Context) NveVniIngressReplicationOutput
}

func (*NveVniIngressReplication) ElementType() reflect.Type {
	return reflect.TypeOf((**NveVniIngressReplication)(nil)).Elem()
}

func (i *NveVniIngressReplication) ToNveVniIngressReplicationOutput() NveVniIngressReplicationOutput {
	return i.ToNveVniIngressReplicationOutputWithContext(context.Background())
}

func (i *NveVniIngressReplication) ToNveVniIngressReplicationOutputWithContext(ctx context.Context) NveVniIngressReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NveVniIngressReplicationOutput)
}

func (i *NveVniIngressReplication) ToOutput(ctx context.Context) pulumix.Output[*NveVniIngressReplication] {
	return pulumix.Output[*NveVniIngressReplication]{
		OutputState: i.ToNveVniIngressReplicationOutputWithContext(ctx).OutputState,
	}
}

// NveVniIngressReplicationArrayInput is an input type that accepts NveVniIngressReplicationArray and NveVniIngressReplicationArrayOutput values.
// You can construct a concrete instance of `NveVniIngressReplicationArrayInput` via:
//
//	NveVniIngressReplicationArray{ NveVniIngressReplicationArgs{...} }
type NveVniIngressReplicationArrayInput interface {
	pulumi.Input

	ToNveVniIngressReplicationArrayOutput() NveVniIngressReplicationArrayOutput
	ToNveVniIngressReplicationArrayOutputWithContext(context.Context) NveVniIngressReplicationArrayOutput
}

type NveVniIngressReplicationArray []NveVniIngressReplicationInput

func (NveVniIngressReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NveVniIngressReplication)(nil)).Elem()
}

func (i NveVniIngressReplicationArray) ToNveVniIngressReplicationArrayOutput() NveVniIngressReplicationArrayOutput {
	return i.ToNveVniIngressReplicationArrayOutputWithContext(context.Background())
}

func (i NveVniIngressReplicationArray) ToNveVniIngressReplicationArrayOutputWithContext(ctx context.Context) NveVniIngressReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NveVniIngressReplicationArrayOutput)
}

func (i NveVniIngressReplicationArray) ToOutput(ctx context.Context) pulumix.Output[[]*NveVniIngressReplication] {
	return pulumix.Output[[]*NveVniIngressReplication]{
		OutputState: i.ToNveVniIngressReplicationArrayOutputWithContext(ctx).OutputState,
	}
}

// NveVniIngressReplicationMapInput is an input type that accepts NveVniIngressReplicationMap and NveVniIngressReplicationMapOutput values.
// You can construct a concrete instance of `NveVniIngressReplicationMapInput` via:
//
//	NveVniIngressReplicationMap{ "key": NveVniIngressReplicationArgs{...} }
type NveVniIngressReplicationMapInput interface {
	pulumi.Input

	ToNveVniIngressReplicationMapOutput() NveVniIngressReplicationMapOutput
	ToNveVniIngressReplicationMapOutputWithContext(context.Context) NveVniIngressReplicationMapOutput
}

type NveVniIngressReplicationMap map[string]NveVniIngressReplicationInput

func (NveVniIngressReplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NveVniIngressReplication)(nil)).Elem()
}

func (i NveVniIngressReplicationMap) ToNveVniIngressReplicationMapOutput() NveVniIngressReplicationMapOutput {
	return i.ToNveVniIngressReplicationMapOutputWithContext(context.Background())
}

func (i NveVniIngressReplicationMap) ToNveVniIngressReplicationMapOutputWithContext(ctx context.Context) NveVniIngressReplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NveVniIngressReplicationMapOutput)
}

func (i NveVniIngressReplicationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NveVniIngressReplication] {
	return pulumix.Output[map[string]*NveVniIngressReplication]{
		OutputState: i.ToNveVniIngressReplicationMapOutputWithContext(ctx).OutputState,
	}
}

type NveVniIngressReplicationOutput struct{ *pulumi.OutputState }

func (NveVniIngressReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NveVniIngressReplication)(nil)).Elem()
}

func (o NveVniIngressReplicationOutput) ToNveVniIngressReplicationOutput() NveVniIngressReplicationOutput {
	return o
}

func (o NveVniIngressReplicationOutput) ToNveVniIngressReplicationOutputWithContext(ctx context.Context) NveVniIngressReplicationOutput {
	return o
}

func (o NveVniIngressReplicationOutput) ToOutput(ctx context.Context) pulumix.Output[*NveVniIngressReplication] {
	return pulumix.Output[*NveVniIngressReplication]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o NveVniIngressReplicationOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NveVniIngressReplication) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Configure VxLAN Ingress Replication mode. - Choices: `bgp`, `unknown`, `static` - Default value: `unknown`
func (o NveVniIngressReplicationOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NveVniIngressReplication) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Virtual Network ID. - Range: `1`-`16777214`
func (o NveVniIngressReplicationOutput) Vni() pulumi.IntOutput {
	return o.ApplyT(func(v *NveVniIngressReplication) pulumi.IntOutput { return v.Vni }).(pulumi.IntOutput)
}

type NveVniIngressReplicationArrayOutput struct{ *pulumi.OutputState }

func (NveVniIngressReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NveVniIngressReplication)(nil)).Elem()
}

func (o NveVniIngressReplicationArrayOutput) ToNveVniIngressReplicationArrayOutput() NveVniIngressReplicationArrayOutput {
	return o
}

func (o NveVniIngressReplicationArrayOutput) ToNveVniIngressReplicationArrayOutputWithContext(ctx context.Context) NveVniIngressReplicationArrayOutput {
	return o
}

func (o NveVniIngressReplicationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NveVniIngressReplication] {
	return pulumix.Output[[]*NveVniIngressReplication]{
		OutputState: o.OutputState,
	}
}

func (o NveVniIngressReplicationArrayOutput) Index(i pulumi.IntInput) NveVniIngressReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NveVniIngressReplication {
		return vs[0].([]*NveVniIngressReplication)[vs[1].(int)]
	}).(NveVniIngressReplicationOutput)
}

type NveVniIngressReplicationMapOutput struct{ *pulumi.OutputState }

func (NveVniIngressReplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NveVniIngressReplication)(nil)).Elem()
}

func (o NveVniIngressReplicationMapOutput) ToNveVniIngressReplicationMapOutput() NveVniIngressReplicationMapOutput {
	return o
}

func (o NveVniIngressReplicationMapOutput) ToNveVniIngressReplicationMapOutputWithContext(ctx context.Context) NveVniIngressReplicationMapOutput {
	return o
}

func (o NveVniIngressReplicationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NveVniIngressReplication] {
	return pulumix.Output[map[string]*NveVniIngressReplication]{
		OutputState: o.OutputState,
	}
}

func (o NveVniIngressReplicationMapOutput) MapIndex(k pulumi.StringInput) NveVniIngressReplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NveVniIngressReplication {
		return vs[0].(map[string]*NveVniIngressReplication)[vs[1].(string)]
	}).(NveVniIngressReplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NveVniIngressReplicationInput)(nil)).Elem(), &NveVniIngressReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*NveVniIngressReplicationArrayInput)(nil)).Elem(), NveVniIngressReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NveVniIngressReplicationMapInput)(nil)).Elem(), NveVniIngressReplicationMap{})
	pulumi.RegisterOutputType(NveVniIngressReplicationOutput{})
	pulumi.RegisterOutputType(NveVniIngressReplicationArrayOutput{})
	pulumi.RegisterOutputType(NveVniIngressReplicationMapOutput{})
}
