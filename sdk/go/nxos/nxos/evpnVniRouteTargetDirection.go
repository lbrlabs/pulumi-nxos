// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type EvpnVniRouteTargetDirection struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Route Target direction. - Choices: `import`, `export`
	Direction pulumi.StringOutput `pulumi:"direction"`
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap pulumi.StringOutput `pulumi:"encap"`
}

// NewEvpnVniRouteTargetDirection registers a new resource with the given unique name, arguments, and options.
func NewEvpnVniRouteTargetDirection(ctx *pulumi.Context,
	name string, args *EvpnVniRouteTargetDirectionArgs, opts ...pulumi.ResourceOption) (*EvpnVniRouteTargetDirection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.Encap == nil {
		return nil, errors.New("invalid value for required argument 'Encap'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EvpnVniRouteTargetDirection
	err := ctx.RegisterResource("nxos:nxos/evpnVniRouteTargetDirection:EvpnVniRouteTargetDirection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEvpnVniRouteTargetDirection gets an existing EvpnVniRouteTargetDirection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEvpnVniRouteTargetDirection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EvpnVniRouteTargetDirectionState, opts ...pulumi.ResourceOption) (*EvpnVniRouteTargetDirection, error) {
	var resource EvpnVniRouteTargetDirection
	err := ctx.ReadResource("nxos:nxos/evpnVniRouteTargetDirection:EvpnVniRouteTargetDirection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EvpnVniRouteTargetDirection resources.
type evpnVniRouteTargetDirectionState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route Target direction. - Choices: `import`, `export`
	Direction *string `pulumi:"direction"`
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap *string `pulumi:"encap"`
}

type EvpnVniRouteTargetDirectionState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route Target direction. - Choices: `import`, `export`
	Direction pulumi.StringPtrInput
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap pulumi.StringPtrInput
}

func (EvpnVniRouteTargetDirectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*evpnVniRouteTargetDirectionState)(nil)).Elem()
}

type evpnVniRouteTargetDirectionArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route Target direction. - Choices: `import`, `export`
	Direction string `pulumi:"direction"`
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap string `pulumi:"encap"`
}

// The set of arguments for constructing a EvpnVniRouteTargetDirection resource.
type EvpnVniRouteTargetDirectionArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route Target direction. - Choices: `import`, `export`
	Direction pulumi.StringInput
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap pulumi.StringInput
}

func (EvpnVniRouteTargetDirectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*evpnVniRouteTargetDirectionArgs)(nil)).Elem()
}

type EvpnVniRouteTargetDirectionInput interface {
	pulumi.Input

	ToEvpnVniRouteTargetDirectionOutput() EvpnVniRouteTargetDirectionOutput
	ToEvpnVniRouteTargetDirectionOutputWithContext(ctx context.Context) EvpnVniRouteTargetDirectionOutput
}

func (*EvpnVniRouteTargetDirection) ElementType() reflect.Type {
	return reflect.TypeOf((**EvpnVniRouteTargetDirection)(nil)).Elem()
}

func (i *EvpnVniRouteTargetDirection) ToEvpnVniRouteTargetDirectionOutput() EvpnVniRouteTargetDirectionOutput {
	return i.ToEvpnVniRouteTargetDirectionOutputWithContext(context.Background())
}

func (i *EvpnVniRouteTargetDirection) ToEvpnVniRouteTargetDirectionOutputWithContext(ctx context.Context) EvpnVniRouteTargetDirectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnVniRouteTargetDirectionOutput)
}

func (i *EvpnVniRouteTargetDirection) ToOutput(ctx context.Context) pulumix.Output[*EvpnVniRouteTargetDirection] {
	return pulumix.Output[*EvpnVniRouteTargetDirection]{
		OutputState: i.ToEvpnVniRouteTargetDirectionOutputWithContext(ctx).OutputState,
	}
}

// EvpnVniRouteTargetDirectionArrayInput is an input type that accepts EvpnVniRouteTargetDirectionArray and EvpnVniRouteTargetDirectionArrayOutput values.
// You can construct a concrete instance of `EvpnVniRouteTargetDirectionArrayInput` via:
//
//	EvpnVniRouteTargetDirectionArray{ EvpnVniRouteTargetDirectionArgs{...} }
type EvpnVniRouteTargetDirectionArrayInput interface {
	pulumi.Input

	ToEvpnVniRouteTargetDirectionArrayOutput() EvpnVniRouteTargetDirectionArrayOutput
	ToEvpnVniRouteTargetDirectionArrayOutputWithContext(context.Context) EvpnVniRouteTargetDirectionArrayOutput
}

type EvpnVniRouteTargetDirectionArray []EvpnVniRouteTargetDirectionInput

func (EvpnVniRouteTargetDirectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EvpnVniRouteTargetDirection)(nil)).Elem()
}

func (i EvpnVniRouteTargetDirectionArray) ToEvpnVniRouteTargetDirectionArrayOutput() EvpnVniRouteTargetDirectionArrayOutput {
	return i.ToEvpnVniRouteTargetDirectionArrayOutputWithContext(context.Background())
}

func (i EvpnVniRouteTargetDirectionArray) ToEvpnVniRouteTargetDirectionArrayOutputWithContext(ctx context.Context) EvpnVniRouteTargetDirectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnVniRouteTargetDirectionArrayOutput)
}

func (i EvpnVniRouteTargetDirectionArray) ToOutput(ctx context.Context) pulumix.Output[[]*EvpnVniRouteTargetDirection] {
	return pulumix.Output[[]*EvpnVniRouteTargetDirection]{
		OutputState: i.ToEvpnVniRouteTargetDirectionArrayOutputWithContext(ctx).OutputState,
	}
}

// EvpnVniRouteTargetDirectionMapInput is an input type that accepts EvpnVniRouteTargetDirectionMap and EvpnVniRouteTargetDirectionMapOutput values.
// You can construct a concrete instance of `EvpnVniRouteTargetDirectionMapInput` via:
//
//	EvpnVniRouteTargetDirectionMap{ "key": EvpnVniRouteTargetDirectionArgs{...} }
type EvpnVniRouteTargetDirectionMapInput interface {
	pulumi.Input

	ToEvpnVniRouteTargetDirectionMapOutput() EvpnVniRouteTargetDirectionMapOutput
	ToEvpnVniRouteTargetDirectionMapOutputWithContext(context.Context) EvpnVniRouteTargetDirectionMapOutput
}

type EvpnVniRouteTargetDirectionMap map[string]EvpnVniRouteTargetDirectionInput

func (EvpnVniRouteTargetDirectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EvpnVniRouteTargetDirection)(nil)).Elem()
}

func (i EvpnVniRouteTargetDirectionMap) ToEvpnVniRouteTargetDirectionMapOutput() EvpnVniRouteTargetDirectionMapOutput {
	return i.ToEvpnVniRouteTargetDirectionMapOutputWithContext(context.Background())
}

func (i EvpnVniRouteTargetDirectionMap) ToEvpnVniRouteTargetDirectionMapOutputWithContext(ctx context.Context) EvpnVniRouteTargetDirectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnVniRouteTargetDirectionMapOutput)
}

func (i EvpnVniRouteTargetDirectionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EvpnVniRouteTargetDirection] {
	return pulumix.Output[map[string]*EvpnVniRouteTargetDirection]{
		OutputState: i.ToEvpnVniRouteTargetDirectionMapOutputWithContext(ctx).OutputState,
	}
}

type EvpnVniRouteTargetDirectionOutput struct{ *pulumi.OutputState }

func (EvpnVniRouteTargetDirectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EvpnVniRouteTargetDirection)(nil)).Elem()
}

func (o EvpnVniRouteTargetDirectionOutput) ToEvpnVniRouteTargetDirectionOutput() EvpnVniRouteTargetDirectionOutput {
	return o
}

func (o EvpnVniRouteTargetDirectionOutput) ToEvpnVniRouteTargetDirectionOutputWithContext(ctx context.Context) EvpnVniRouteTargetDirectionOutput {
	return o
}

func (o EvpnVniRouteTargetDirectionOutput) ToOutput(ctx context.Context) pulumix.Output[*EvpnVniRouteTargetDirection] {
	return pulumix.Output[*EvpnVniRouteTargetDirection]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o EvpnVniRouteTargetDirectionOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EvpnVniRouteTargetDirection) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Route Target direction. - Choices: `import`, `export`
func (o EvpnVniRouteTargetDirectionOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *EvpnVniRouteTargetDirection) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
func (o EvpnVniRouteTargetDirectionOutput) Encap() pulumi.StringOutput {
	return o.ApplyT(func(v *EvpnVniRouteTargetDirection) pulumi.StringOutput { return v.Encap }).(pulumi.StringOutput)
}

type EvpnVniRouteTargetDirectionArrayOutput struct{ *pulumi.OutputState }

func (EvpnVniRouteTargetDirectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EvpnVniRouteTargetDirection)(nil)).Elem()
}

func (o EvpnVniRouteTargetDirectionArrayOutput) ToEvpnVniRouteTargetDirectionArrayOutput() EvpnVniRouteTargetDirectionArrayOutput {
	return o
}

func (o EvpnVniRouteTargetDirectionArrayOutput) ToEvpnVniRouteTargetDirectionArrayOutputWithContext(ctx context.Context) EvpnVniRouteTargetDirectionArrayOutput {
	return o
}

func (o EvpnVniRouteTargetDirectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EvpnVniRouteTargetDirection] {
	return pulumix.Output[[]*EvpnVniRouteTargetDirection]{
		OutputState: o.OutputState,
	}
}

func (o EvpnVniRouteTargetDirectionArrayOutput) Index(i pulumi.IntInput) EvpnVniRouteTargetDirectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EvpnVniRouteTargetDirection {
		return vs[0].([]*EvpnVniRouteTargetDirection)[vs[1].(int)]
	}).(EvpnVniRouteTargetDirectionOutput)
}

type EvpnVniRouteTargetDirectionMapOutput struct{ *pulumi.OutputState }

func (EvpnVniRouteTargetDirectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EvpnVniRouteTargetDirection)(nil)).Elem()
}

func (o EvpnVniRouteTargetDirectionMapOutput) ToEvpnVniRouteTargetDirectionMapOutput() EvpnVniRouteTargetDirectionMapOutput {
	return o
}

func (o EvpnVniRouteTargetDirectionMapOutput) ToEvpnVniRouteTargetDirectionMapOutputWithContext(ctx context.Context) EvpnVniRouteTargetDirectionMapOutput {
	return o
}

func (o EvpnVniRouteTargetDirectionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EvpnVniRouteTargetDirection] {
	return pulumix.Output[map[string]*EvpnVniRouteTargetDirection]{
		OutputState: o.OutputState,
	}
}

func (o EvpnVniRouteTargetDirectionMapOutput) MapIndex(k pulumi.StringInput) EvpnVniRouteTargetDirectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EvpnVniRouteTargetDirection {
		return vs[0].(map[string]*EvpnVniRouteTargetDirection)[vs[1].(string)]
	}).(EvpnVniRouteTargetDirectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnVniRouteTargetDirectionInput)(nil)).Elem(), &EvpnVniRouteTargetDirection{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnVniRouteTargetDirectionArrayInput)(nil)).Elem(), EvpnVniRouteTargetDirectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnVniRouteTargetDirectionMapInput)(nil)).Elem(), EvpnVniRouteTargetDirectionMap{})
	pulumi.RegisterOutputType(EvpnVniRouteTargetDirectionOutput{})
	pulumi.RegisterOutputType(EvpnVniRouteTargetDirectionArrayOutput{})
	pulumi.RegisterOutputType(EvpnVniRouteTargetDirectionMapOutput{})
}
