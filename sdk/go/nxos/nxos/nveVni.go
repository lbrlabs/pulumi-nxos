// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type NveVni struct {
	pulumi.CustomResourceState

	// Configures VNI as L3 VNI. - Default value: `false`
	AssociateVrf pulumi.BoolOutput `pulumi:"associateVrf"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Configures multicast group address for VNI. - Default value: `0.0.0.0`
	MulticastGroup pulumi.StringOutput `pulumi:"multicastGroup"`
	// Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
	// value: `disable`
	MultisiteIngressReplication pulumi.StringOutput `pulumi:"multisiteIngressReplication"`
	// Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
	SuppressArp pulumi.StringOutput `pulumi:"suppressArp"`
	// Virtual Network ID. - Range: `1`-`16777214`
	Vni pulumi.IntOutput `pulumi:"vni"`
}

// NewNveVni registers a new resource with the given unique name, arguments, and options.
func NewNveVni(ctx *pulumi.Context,
	name string, args *NveVniArgs, opts ...pulumi.ResourceOption) (*NveVni, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Vni == nil {
		return nil, errors.New("invalid value for required argument 'Vni'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NveVni
	err := ctx.RegisterResource("nxos:nxos/nveVni:NveVni", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNveVni gets an existing NveVni resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNveVni(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NveVniState, opts ...pulumi.ResourceOption) (*NveVni, error) {
	var resource NveVni
	err := ctx.ReadResource("nxos:nxos/nveVni:NveVni", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NveVni resources.
type nveVniState struct {
	// Configures VNI as L3 VNI. - Default value: `false`
	AssociateVrf *bool `pulumi:"associateVrf"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Configures multicast group address for VNI. - Default value: `0.0.0.0`
	MulticastGroup *string `pulumi:"multicastGroup"`
	// Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
	// value: `disable`
	MultisiteIngressReplication *string `pulumi:"multisiteIngressReplication"`
	// Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
	SuppressArp *string `pulumi:"suppressArp"`
	// Virtual Network ID. - Range: `1`-`16777214`
	Vni *int `pulumi:"vni"`
}

type NveVniState struct {
	// Configures VNI as L3 VNI. - Default value: `false`
	AssociateVrf pulumi.BoolPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Configures multicast group address for VNI. - Default value: `0.0.0.0`
	MulticastGroup pulumi.StringPtrInput
	// Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
	// value: `disable`
	MultisiteIngressReplication pulumi.StringPtrInput
	// Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
	SuppressArp pulumi.StringPtrInput
	// Virtual Network ID. - Range: `1`-`16777214`
	Vni pulumi.IntPtrInput
}

func (NveVniState) ElementType() reflect.Type {
	return reflect.TypeOf((*nveVniState)(nil)).Elem()
}

type nveVniArgs struct {
	// Configures VNI as L3 VNI. - Default value: `false`
	AssociateVrf *bool `pulumi:"associateVrf"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Configures multicast group address for VNI. - Default value: `0.0.0.0`
	MulticastGroup *string `pulumi:"multicastGroup"`
	// Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
	// value: `disable`
	MultisiteIngressReplication *string `pulumi:"multisiteIngressReplication"`
	// Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
	SuppressArp *string `pulumi:"suppressArp"`
	// Virtual Network ID. - Range: `1`-`16777214`
	Vni int `pulumi:"vni"`
}

// The set of arguments for constructing a NveVni resource.
type NveVniArgs struct {
	// Configures VNI as L3 VNI. - Default value: `false`
	AssociateVrf pulumi.BoolPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Configures multicast group address for VNI. - Default value: `0.0.0.0`
	MulticastGroup pulumi.StringPtrInput
	// Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
	// value: `disable`
	MultisiteIngressReplication pulumi.StringPtrInput
	// Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
	SuppressArp pulumi.StringPtrInput
	// Virtual Network ID. - Range: `1`-`16777214`
	Vni pulumi.IntInput
}

func (NveVniArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nveVniArgs)(nil)).Elem()
}

type NveVniInput interface {
	pulumi.Input

	ToNveVniOutput() NveVniOutput
	ToNveVniOutputWithContext(ctx context.Context) NveVniOutput
}

func (*NveVni) ElementType() reflect.Type {
	return reflect.TypeOf((**NveVni)(nil)).Elem()
}

func (i *NveVni) ToNveVniOutput() NveVniOutput {
	return i.ToNveVniOutputWithContext(context.Background())
}

func (i *NveVni) ToNveVniOutputWithContext(ctx context.Context) NveVniOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NveVniOutput)
}

func (i *NveVni) ToOutput(ctx context.Context) pulumix.Output[*NveVni] {
	return pulumix.Output[*NveVni]{
		OutputState: i.ToNveVniOutputWithContext(ctx).OutputState,
	}
}

// NveVniArrayInput is an input type that accepts NveVniArray and NveVniArrayOutput values.
// You can construct a concrete instance of `NveVniArrayInput` via:
//
//	NveVniArray{ NveVniArgs{...} }
type NveVniArrayInput interface {
	pulumi.Input

	ToNveVniArrayOutput() NveVniArrayOutput
	ToNveVniArrayOutputWithContext(context.Context) NveVniArrayOutput
}

type NveVniArray []NveVniInput

func (NveVniArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NveVni)(nil)).Elem()
}

func (i NveVniArray) ToNveVniArrayOutput() NveVniArrayOutput {
	return i.ToNveVniArrayOutputWithContext(context.Background())
}

func (i NveVniArray) ToNveVniArrayOutputWithContext(ctx context.Context) NveVniArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NveVniArrayOutput)
}

func (i NveVniArray) ToOutput(ctx context.Context) pulumix.Output[[]*NveVni] {
	return pulumix.Output[[]*NveVni]{
		OutputState: i.ToNveVniArrayOutputWithContext(ctx).OutputState,
	}
}

// NveVniMapInput is an input type that accepts NveVniMap and NveVniMapOutput values.
// You can construct a concrete instance of `NveVniMapInput` via:
//
//	NveVniMap{ "key": NveVniArgs{...} }
type NveVniMapInput interface {
	pulumi.Input

	ToNveVniMapOutput() NveVniMapOutput
	ToNveVniMapOutputWithContext(context.Context) NveVniMapOutput
}

type NveVniMap map[string]NveVniInput

func (NveVniMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NveVni)(nil)).Elem()
}

func (i NveVniMap) ToNveVniMapOutput() NveVniMapOutput {
	return i.ToNveVniMapOutputWithContext(context.Background())
}

func (i NveVniMap) ToNveVniMapOutputWithContext(ctx context.Context) NveVniMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NveVniMapOutput)
}

func (i NveVniMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NveVni] {
	return pulumix.Output[map[string]*NveVni]{
		OutputState: i.ToNveVniMapOutputWithContext(ctx).OutputState,
	}
}

type NveVniOutput struct{ *pulumi.OutputState }

func (NveVniOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NveVni)(nil)).Elem()
}

func (o NveVniOutput) ToNveVniOutput() NveVniOutput {
	return o
}

func (o NveVniOutput) ToNveVniOutputWithContext(ctx context.Context) NveVniOutput {
	return o
}

func (o NveVniOutput) ToOutput(ctx context.Context) pulumix.Output[*NveVni] {
	return pulumix.Output[*NveVni]{
		OutputState: o.OutputState,
	}
}

// Configures VNI as L3 VNI. - Default value: `false`
func (o NveVniOutput) AssociateVrf() pulumi.BoolOutput {
	return o.ApplyT(func(v *NveVni) pulumi.BoolOutput { return v.AssociateVrf }).(pulumi.BoolOutput)
}

// A device name from the provider configuration.
func (o NveVniOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NveVni) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Configures multicast group address for VNI. - Default value: `0.0.0.0`
func (o NveVniOutput) MulticastGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *NveVni) pulumi.StringOutput { return v.MulticastGroup }).(pulumi.StringOutput)
}

// Enable or disable Multisite Ingress Replication for VNI(s). - Choices: `enable`, `disable`, `enableOptimized` - Default
// value: `disable`
func (o NveVniOutput) MultisiteIngressReplication() pulumi.StringOutput {
	return o.ApplyT(func(v *NveVni) pulumi.StringOutput { return v.MultisiteIngressReplication }).(pulumi.StringOutput)
}

// Enable or disable ARP suppression for VNI(s). - Choices: `enabled`, `disabled`, `off` - Default value: `off`
func (o NveVniOutput) SuppressArp() pulumi.StringOutput {
	return o.ApplyT(func(v *NveVni) pulumi.StringOutput { return v.SuppressArp }).(pulumi.StringOutput)
}

// Virtual Network ID. - Range: `1`-`16777214`
func (o NveVniOutput) Vni() pulumi.IntOutput {
	return o.ApplyT(func(v *NveVni) pulumi.IntOutput { return v.Vni }).(pulumi.IntOutput)
}

type NveVniArrayOutput struct{ *pulumi.OutputState }

func (NveVniArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NveVni)(nil)).Elem()
}

func (o NveVniArrayOutput) ToNveVniArrayOutput() NveVniArrayOutput {
	return o
}

func (o NveVniArrayOutput) ToNveVniArrayOutputWithContext(ctx context.Context) NveVniArrayOutput {
	return o
}

func (o NveVniArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NveVni] {
	return pulumix.Output[[]*NveVni]{
		OutputState: o.OutputState,
	}
}

func (o NveVniArrayOutput) Index(i pulumi.IntInput) NveVniOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NveVni {
		return vs[0].([]*NveVni)[vs[1].(int)]
	}).(NveVniOutput)
}

type NveVniMapOutput struct{ *pulumi.OutputState }

func (NveVniMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NveVni)(nil)).Elem()
}

func (o NveVniMapOutput) ToNveVniMapOutput() NveVniMapOutput {
	return o
}

func (o NveVniMapOutput) ToNveVniMapOutputWithContext(ctx context.Context) NveVniMapOutput {
	return o
}

func (o NveVniMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NveVni] {
	return pulumix.Output[map[string]*NveVni]{
		OutputState: o.OutputState,
	}
}

func (o NveVniMapOutput) MapIndex(k pulumi.StringInput) NveVniOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NveVni {
		return vs[0].(map[string]*NveVni)[vs[1].(string)]
	}).(NveVniOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NveVniInput)(nil)).Elem(), &NveVni{})
	pulumi.RegisterInputType(reflect.TypeOf((*NveVniArrayInput)(nil)).Elem(), NveVniArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NveVniMapInput)(nil)).Elem(), NveVniMap{})
	pulumi.RegisterOutputType(NveVniOutput{})
	pulumi.RegisterOutputType(NveVniArrayOutput{})
	pulumi.RegisterOutputType(NveVniMapOutput{})
}
