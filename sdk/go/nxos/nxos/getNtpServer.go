// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupNtpServer(ctx *pulumi.Context, args *LookupNtpServerArgs, opts ...pulumi.InvokeOption) (*LookupNtpServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNtpServerResult
	err := ctx.Invoke("nxos:nxos/getNtpServer:getNtpServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNtpServer.
type LookupNtpServerArgs struct {
	Device *string `pulumi:"device"`
	Name   string  `pulumi:"name"`
}

// A collection of values returned by getNtpServer.
type LookupNtpServerResult struct {
	Device  *string `pulumi:"device"`
	Id      string  `pulumi:"id"`
	KeyId   int     `pulumi:"keyId"`
	MaxPoll int     `pulumi:"maxPoll"`
	MinPoll int     `pulumi:"minPoll"`
	Name    string  `pulumi:"name"`
	Type    string  `pulumi:"type"`
	Vrf     string  `pulumi:"vrf"`
}

func LookupNtpServerOutput(ctx *pulumi.Context, args LookupNtpServerOutputArgs, opts ...pulumi.InvokeOption) LookupNtpServerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNtpServerResult, error) {
			args := v.(LookupNtpServerArgs)
			r, err := LookupNtpServer(ctx, &args, opts...)
			var s LookupNtpServerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNtpServerResultOutput)
}

// A collection of arguments for invoking getNtpServer.
type LookupNtpServerOutputArgs struct {
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.StringInput    `pulumi:"name"`
}

func (LookupNtpServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNtpServerArgs)(nil)).Elem()
}

// A collection of values returned by getNtpServer.
type LookupNtpServerResultOutput struct{ *pulumi.OutputState }

func (LookupNtpServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNtpServerResult)(nil)).Elem()
}

func (o LookupNtpServerResultOutput) ToLookupNtpServerResultOutput() LookupNtpServerResultOutput {
	return o
}

func (o LookupNtpServerResultOutput) ToLookupNtpServerResultOutputWithContext(ctx context.Context) LookupNtpServerResultOutput {
	return o
}

func (o LookupNtpServerResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupNtpServerResult] {
	return pulumix.Output[LookupNtpServerResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupNtpServerResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNtpServerResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o LookupNtpServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpServerResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupNtpServerResultOutput) KeyId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNtpServerResult) int { return v.KeyId }).(pulumi.IntOutput)
}

func (o LookupNtpServerResultOutput) MaxPoll() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNtpServerResult) int { return v.MaxPoll }).(pulumi.IntOutput)
}

func (o LookupNtpServerResultOutput) MinPoll() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNtpServerResult) int { return v.MinPoll }).(pulumi.IntOutput)
}

func (o LookupNtpServerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpServerResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupNtpServerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpServerResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupNtpServerResultOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpServerResult) string { return v.Vrf }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNtpServerResultOutput{})
}
