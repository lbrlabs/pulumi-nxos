// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FeatureTacacs struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureTacacs registers a new resource with the given unique name, arguments, and options.
func NewFeatureTacacs(ctx *pulumi.Context,
	name string, args *FeatureTacacsArgs, opts ...pulumi.ResourceOption) (*FeatureTacacs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureTacacs
	err := ctx.RegisterResource("nxos:nxos/featureTacacs:FeatureTacacs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureTacacs gets an existing FeatureTacacs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureTacacs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureTacacsState, opts ...pulumi.ResourceOption) (*FeatureTacacs, error) {
	var resource FeatureTacacs
	err := ctx.ReadResource("nxos:nxos/featureTacacs:FeatureTacacs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureTacacs resources.
type featureTacacsState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureTacacsState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureTacacsState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureTacacsState)(nil)).Elem()
}

type featureTacacsArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureTacacs resource.
type FeatureTacacsArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureTacacsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureTacacsArgs)(nil)).Elem()
}

type FeatureTacacsInput interface {
	pulumi.Input

	ToFeatureTacacsOutput() FeatureTacacsOutput
	ToFeatureTacacsOutputWithContext(ctx context.Context) FeatureTacacsOutput
}

func (*FeatureTacacs) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureTacacs)(nil)).Elem()
}

func (i *FeatureTacacs) ToFeatureTacacsOutput() FeatureTacacsOutput {
	return i.ToFeatureTacacsOutputWithContext(context.Background())
}

func (i *FeatureTacacs) ToFeatureTacacsOutputWithContext(ctx context.Context) FeatureTacacsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureTacacsOutput)
}

func (i *FeatureTacacs) ToOutput(ctx context.Context) pulumix.Output[*FeatureTacacs] {
	return pulumix.Output[*FeatureTacacs]{
		OutputState: i.ToFeatureTacacsOutputWithContext(ctx).OutputState,
	}
}

// FeatureTacacsArrayInput is an input type that accepts FeatureTacacsArray and FeatureTacacsArrayOutput values.
// You can construct a concrete instance of `FeatureTacacsArrayInput` via:
//
//	FeatureTacacsArray{ FeatureTacacsArgs{...} }
type FeatureTacacsArrayInput interface {
	pulumi.Input

	ToFeatureTacacsArrayOutput() FeatureTacacsArrayOutput
	ToFeatureTacacsArrayOutputWithContext(context.Context) FeatureTacacsArrayOutput
}

type FeatureTacacsArray []FeatureTacacsInput

func (FeatureTacacsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureTacacs)(nil)).Elem()
}

func (i FeatureTacacsArray) ToFeatureTacacsArrayOutput() FeatureTacacsArrayOutput {
	return i.ToFeatureTacacsArrayOutputWithContext(context.Background())
}

func (i FeatureTacacsArray) ToFeatureTacacsArrayOutputWithContext(ctx context.Context) FeatureTacacsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureTacacsArrayOutput)
}

func (i FeatureTacacsArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureTacacs] {
	return pulumix.Output[[]*FeatureTacacs]{
		OutputState: i.ToFeatureTacacsArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureTacacsMapInput is an input type that accepts FeatureTacacsMap and FeatureTacacsMapOutput values.
// You can construct a concrete instance of `FeatureTacacsMapInput` via:
//
//	FeatureTacacsMap{ "key": FeatureTacacsArgs{...} }
type FeatureTacacsMapInput interface {
	pulumi.Input

	ToFeatureTacacsMapOutput() FeatureTacacsMapOutput
	ToFeatureTacacsMapOutputWithContext(context.Context) FeatureTacacsMapOutput
}

type FeatureTacacsMap map[string]FeatureTacacsInput

func (FeatureTacacsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureTacacs)(nil)).Elem()
}

func (i FeatureTacacsMap) ToFeatureTacacsMapOutput() FeatureTacacsMapOutput {
	return i.ToFeatureTacacsMapOutputWithContext(context.Background())
}

func (i FeatureTacacsMap) ToFeatureTacacsMapOutputWithContext(ctx context.Context) FeatureTacacsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureTacacsMapOutput)
}

func (i FeatureTacacsMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureTacacs] {
	return pulumix.Output[map[string]*FeatureTacacs]{
		OutputState: i.ToFeatureTacacsMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureTacacsOutput struct{ *pulumi.OutputState }

func (FeatureTacacsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureTacacs)(nil)).Elem()
}

func (o FeatureTacacsOutput) ToFeatureTacacsOutput() FeatureTacacsOutput {
	return o
}

func (o FeatureTacacsOutput) ToFeatureTacacsOutputWithContext(ctx context.Context) FeatureTacacsOutput {
	return o
}

func (o FeatureTacacsOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureTacacs] {
	return pulumix.Output[*FeatureTacacs]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureTacacsOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureTacacs) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureTacacsOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureTacacs) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureTacacsArrayOutput struct{ *pulumi.OutputState }

func (FeatureTacacsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureTacacs)(nil)).Elem()
}

func (o FeatureTacacsArrayOutput) ToFeatureTacacsArrayOutput() FeatureTacacsArrayOutput {
	return o
}

func (o FeatureTacacsArrayOutput) ToFeatureTacacsArrayOutputWithContext(ctx context.Context) FeatureTacacsArrayOutput {
	return o
}

func (o FeatureTacacsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureTacacs] {
	return pulumix.Output[[]*FeatureTacacs]{
		OutputState: o.OutputState,
	}
}

func (o FeatureTacacsArrayOutput) Index(i pulumi.IntInput) FeatureTacacsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureTacacs {
		return vs[0].([]*FeatureTacacs)[vs[1].(int)]
	}).(FeatureTacacsOutput)
}

type FeatureTacacsMapOutput struct{ *pulumi.OutputState }

func (FeatureTacacsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureTacacs)(nil)).Elem()
}

func (o FeatureTacacsMapOutput) ToFeatureTacacsMapOutput() FeatureTacacsMapOutput {
	return o
}

func (o FeatureTacacsMapOutput) ToFeatureTacacsMapOutputWithContext(ctx context.Context) FeatureTacacsMapOutput {
	return o
}

func (o FeatureTacacsMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureTacacs] {
	return pulumix.Output[map[string]*FeatureTacacs]{
		OutputState: o.OutputState,
	}
}

func (o FeatureTacacsMapOutput) MapIndex(k pulumi.StringInput) FeatureTacacsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureTacacs {
		return vs[0].(map[string]*FeatureTacacs)[vs[1].(string)]
	}).(FeatureTacacsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureTacacsInput)(nil)).Elem(), &FeatureTacacs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureTacacsArrayInput)(nil)).Elem(), FeatureTacacsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureTacacsMapInput)(nil)).Elem(), FeatureTacacsMap{})
	pulumi.RegisterOutputType(FeatureTacacsOutput{})
	pulumi.RegisterOutputType(FeatureTacacsArrayOutput{})
	pulumi.RegisterOutputType(FeatureTacacsMapOutput{})
}
