// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FeatureEvpn struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureEvpn registers a new resource with the given unique name, arguments, and options.
func NewFeatureEvpn(ctx *pulumi.Context,
	name string, args *FeatureEvpnArgs, opts ...pulumi.ResourceOption) (*FeatureEvpn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureEvpn
	err := ctx.RegisterResource("nxos:nxos/featureEvpn:FeatureEvpn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureEvpn gets an existing FeatureEvpn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureEvpn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureEvpnState, opts ...pulumi.ResourceOption) (*FeatureEvpn, error) {
	var resource FeatureEvpn
	err := ctx.ReadResource("nxos:nxos/featureEvpn:FeatureEvpn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureEvpn resources.
type featureEvpnState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureEvpnState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureEvpnState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureEvpnState)(nil)).Elem()
}

type featureEvpnArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureEvpn resource.
type FeatureEvpnArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureEvpnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureEvpnArgs)(nil)).Elem()
}

type FeatureEvpnInput interface {
	pulumi.Input

	ToFeatureEvpnOutput() FeatureEvpnOutput
	ToFeatureEvpnOutputWithContext(ctx context.Context) FeatureEvpnOutput
}

func (*FeatureEvpn) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureEvpn)(nil)).Elem()
}

func (i *FeatureEvpn) ToFeatureEvpnOutput() FeatureEvpnOutput {
	return i.ToFeatureEvpnOutputWithContext(context.Background())
}

func (i *FeatureEvpn) ToFeatureEvpnOutputWithContext(ctx context.Context) FeatureEvpnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureEvpnOutput)
}

func (i *FeatureEvpn) ToOutput(ctx context.Context) pulumix.Output[*FeatureEvpn] {
	return pulumix.Output[*FeatureEvpn]{
		OutputState: i.ToFeatureEvpnOutputWithContext(ctx).OutputState,
	}
}

// FeatureEvpnArrayInput is an input type that accepts FeatureEvpnArray and FeatureEvpnArrayOutput values.
// You can construct a concrete instance of `FeatureEvpnArrayInput` via:
//
//	FeatureEvpnArray{ FeatureEvpnArgs{...} }
type FeatureEvpnArrayInput interface {
	pulumi.Input

	ToFeatureEvpnArrayOutput() FeatureEvpnArrayOutput
	ToFeatureEvpnArrayOutputWithContext(context.Context) FeatureEvpnArrayOutput
}

type FeatureEvpnArray []FeatureEvpnInput

func (FeatureEvpnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureEvpn)(nil)).Elem()
}

func (i FeatureEvpnArray) ToFeatureEvpnArrayOutput() FeatureEvpnArrayOutput {
	return i.ToFeatureEvpnArrayOutputWithContext(context.Background())
}

func (i FeatureEvpnArray) ToFeatureEvpnArrayOutputWithContext(ctx context.Context) FeatureEvpnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureEvpnArrayOutput)
}

func (i FeatureEvpnArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureEvpn] {
	return pulumix.Output[[]*FeatureEvpn]{
		OutputState: i.ToFeatureEvpnArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureEvpnMapInput is an input type that accepts FeatureEvpnMap and FeatureEvpnMapOutput values.
// You can construct a concrete instance of `FeatureEvpnMapInput` via:
//
//	FeatureEvpnMap{ "key": FeatureEvpnArgs{...} }
type FeatureEvpnMapInput interface {
	pulumi.Input

	ToFeatureEvpnMapOutput() FeatureEvpnMapOutput
	ToFeatureEvpnMapOutputWithContext(context.Context) FeatureEvpnMapOutput
}

type FeatureEvpnMap map[string]FeatureEvpnInput

func (FeatureEvpnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureEvpn)(nil)).Elem()
}

func (i FeatureEvpnMap) ToFeatureEvpnMapOutput() FeatureEvpnMapOutput {
	return i.ToFeatureEvpnMapOutputWithContext(context.Background())
}

func (i FeatureEvpnMap) ToFeatureEvpnMapOutputWithContext(ctx context.Context) FeatureEvpnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureEvpnMapOutput)
}

func (i FeatureEvpnMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureEvpn] {
	return pulumix.Output[map[string]*FeatureEvpn]{
		OutputState: i.ToFeatureEvpnMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureEvpnOutput struct{ *pulumi.OutputState }

func (FeatureEvpnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureEvpn)(nil)).Elem()
}

func (o FeatureEvpnOutput) ToFeatureEvpnOutput() FeatureEvpnOutput {
	return o
}

func (o FeatureEvpnOutput) ToFeatureEvpnOutputWithContext(ctx context.Context) FeatureEvpnOutput {
	return o
}

func (o FeatureEvpnOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureEvpn] {
	return pulumix.Output[*FeatureEvpn]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureEvpnOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureEvpn) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureEvpnOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureEvpn) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureEvpnArrayOutput struct{ *pulumi.OutputState }

func (FeatureEvpnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureEvpn)(nil)).Elem()
}

func (o FeatureEvpnArrayOutput) ToFeatureEvpnArrayOutput() FeatureEvpnArrayOutput {
	return o
}

func (o FeatureEvpnArrayOutput) ToFeatureEvpnArrayOutputWithContext(ctx context.Context) FeatureEvpnArrayOutput {
	return o
}

func (o FeatureEvpnArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureEvpn] {
	return pulumix.Output[[]*FeatureEvpn]{
		OutputState: o.OutputState,
	}
}

func (o FeatureEvpnArrayOutput) Index(i pulumi.IntInput) FeatureEvpnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureEvpn {
		return vs[0].([]*FeatureEvpn)[vs[1].(int)]
	}).(FeatureEvpnOutput)
}

type FeatureEvpnMapOutput struct{ *pulumi.OutputState }

func (FeatureEvpnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureEvpn)(nil)).Elem()
}

func (o FeatureEvpnMapOutput) ToFeatureEvpnMapOutput() FeatureEvpnMapOutput {
	return o
}

func (o FeatureEvpnMapOutput) ToFeatureEvpnMapOutputWithContext(ctx context.Context) FeatureEvpnMapOutput {
	return o
}

func (o FeatureEvpnMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureEvpn] {
	return pulumix.Output[map[string]*FeatureEvpn]{
		OutputState: o.OutputState,
	}
}

func (o FeatureEvpnMapOutput) MapIndex(k pulumi.StringInput) FeatureEvpnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureEvpn {
		return vs[0].(map[string]*FeatureEvpn)[vs[1].(string)]
	}).(FeatureEvpnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureEvpnInput)(nil)).Elem(), &FeatureEvpn{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureEvpnArrayInput)(nil)).Elem(), FeatureEvpnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureEvpnMapInput)(nil)).Elem(), FeatureEvpnMap{})
	pulumi.RegisterOutputType(FeatureEvpnOutput{})
	pulumi.RegisterOutputType(FeatureEvpnArrayOutput{})
	pulumi.RegisterOutputType(FeatureEvpnMapOutput{})
}
