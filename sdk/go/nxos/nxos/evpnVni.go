// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type EvpnVni struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap pulumi.StringOutput `pulumi:"encap"`
	// Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
	RouteDistinguisher pulumi.StringOutput `pulumi:"routeDistinguisher"`
}

// NewEvpnVni registers a new resource with the given unique name, arguments, and options.
func NewEvpnVni(ctx *pulumi.Context,
	name string, args *EvpnVniArgs, opts ...pulumi.ResourceOption) (*EvpnVni, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Encap == nil {
		return nil, errors.New("invalid value for required argument 'Encap'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EvpnVni
	err := ctx.RegisterResource("nxos:nxos/evpnVni:EvpnVni", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEvpnVni gets an existing EvpnVni resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEvpnVni(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EvpnVniState, opts ...pulumi.ResourceOption) (*EvpnVni, error) {
	var resource EvpnVni
	err := ctx.ReadResource("nxos:nxos/evpnVni:EvpnVni", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EvpnVni resources.
type evpnVniState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap *string `pulumi:"encap"`
	// Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
	RouteDistinguisher *string `pulumi:"routeDistinguisher"`
}

type EvpnVniState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap pulumi.StringPtrInput
	// Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
	RouteDistinguisher pulumi.StringPtrInput
}

func (EvpnVniState) ElementType() reflect.Type {
	return reflect.TypeOf((*evpnVniState)(nil)).Elem()
}

type evpnVniArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap string `pulumi:"encap"`
	// Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
	RouteDistinguisher *string `pulumi:"routeDistinguisher"`
}

// The set of arguments for constructing a EvpnVni resource.
type EvpnVniArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap pulumi.StringInput
	// Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
	RouteDistinguisher pulumi.StringPtrInput
}

func (EvpnVniArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*evpnVniArgs)(nil)).Elem()
}

type EvpnVniInput interface {
	pulumi.Input

	ToEvpnVniOutput() EvpnVniOutput
	ToEvpnVniOutputWithContext(ctx context.Context) EvpnVniOutput
}

func (*EvpnVni) ElementType() reflect.Type {
	return reflect.TypeOf((**EvpnVni)(nil)).Elem()
}

func (i *EvpnVni) ToEvpnVniOutput() EvpnVniOutput {
	return i.ToEvpnVniOutputWithContext(context.Background())
}

func (i *EvpnVni) ToEvpnVniOutputWithContext(ctx context.Context) EvpnVniOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnVniOutput)
}

func (i *EvpnVni) ToOutput(ctx context.Context) pulumix.Output[*EvpnVni] {
	return pulumix.Output[*EvpnVni]{
		OutputState: i.ToEvpnVniOutputWithContext(ctx).OutputState,
	}
}

// EvpnVniArrayInput is an input type that accepts EvpnVniArray and EvpnVniArrayOutput values.
// You can construct a concrete instance of `EvpnVniArrayInput` via:
//
//	EvpnVniArray{ EvpnVniArgs{...} }
type EvpnVniArrayInput interface {
	pulumi.Input

	ToEvpnVniArrayOutput() EvpnVniArrayOutput
	ToEvpnVniArrayOutputWithContext(context.Context) EvpnVniArrayOutput
}

type EvpnVniArray []EvpnVniInput

func (EvpnVniArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EvpnVni)(nil)).Elem()
}

func (i EvpnVniArray) ToEvpnVniArrayOutput() EvpnVniArrayOutput {
	return i.ToEvpnVniArrayOutputWithContext(context.Background())
}

func (i EvpnVniArray) ToEvpnVniArrayOutputWithContext(ctx context.Context) EvpnVniArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnVniArrayOutput)
}

func (i EvpnVniArray) ToOutput(ctx context.Context) pulumix.Output[[]*EvpnVni] {
	return pulumix.Output[[]*EvpnVni]{
		OutputState: i.ToEvpnVniArrayOutputWithContext(ctx).OutputState,
	}
}

// EvpnVniMapInput is an input type that accepts EvpnVniMap and EvpnVniMapOutput values.
// You can construct a concrete instance of `EvpnVniMapInput` via:
//
//	EvpnVniMap{ "key": EvpnVniArgs{...} }
type EvpnVniMapInput interface {
	pulumi.Input

	ToEvpnVniMapOutput() EvpnVniMapOutput
	ToEvpnVniMapOutputWithContext(context.Context) EvpnVniMapOutput
}

type EvpnVniMap map[string]EvpnVniInput

func (EvpnVniMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EvpnVni)(nil)).Elem()
}

func (i EvpnVniMap) ToEvpnVniMapOutput() EvpnVniMapOutput {
	return i.ToEvpnVniMapOutputWithContext(context.Background())
}

func (i EvpnVniMap) ToEvpnVniMapOutputWithContext(ctx context.Context) EvpnVniMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnVniMapOutput)
}

func (i EvpnVniMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EvpnVni] {
	return pulumix.Output[map[string]*EvpnVni]{
		OutputState: i.ToEvpnVniMapOutputWithContext(ctx).OutputState,
	}
}

type EvpnVniOutput struct{ *pulumi.OutputState }

func (EvpnVniOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EvpnVni)(nil)).Elem()
}

func (o EvpnVniOutput) ToEvpnVniOutput() EvpnVniOutput {
	return o
}

func (o EvpnVniOutput) ToEvpnVniOutputWithContext(ctx context.Context) EvpnVniOutput {
	return o
}

func (o EvpnVniOutput) ToOutput(ctx context.Context) pulumix.Output[*EvpnVni] {
	return pulumix.Output[*EvpnVni]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o EvpnVniOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EvpnVni) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
func (o EvpnVniOutput) Encap() pulumi.StringOutput {
	return o.ApplyT(func(v *EvpnVni) pulumi.StringOutput { return v.Encap }).(pulumi.StringOutput)
}

// Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
func (o EvpnVniOutput) RouteDistinguisher() pulumi.StringOutput {
	return o.ApplyT(func(v *EvpnVni) pulumi.StringOutput { return v.RouteDistinguisher }).(pulumi.StringOutput)
}

type EvpnVniArrayOutput struct{ *pulumi.OutputState }

func (EvpnVniArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EvpnVni)(nil)).Elem()
}

func (o EvpnVniArrayOutput) ToEvpnVniArrayOutput() EvpnVniArrayOutput {
	return o
}

func (o EvpnVniArrayOutput) ToEvpnVniArrayOutputWithContext(ctx context.Context) EvpnVniArrayOutput {
	return o
}

func (o EvpnVniArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EvpnVni] {
	return pulumix.Output[[]*EvpnVni]{
		OutputState: o.OutputState,
	}
}

func (o EvpnVniArrayOutput) Index(i pulumi.IntInput) EvpnVniOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EvpnVni {
		return vs[0].([]*EvpnVni)[vs[1].(int)]
	}).(EvpnVniOutput)
}

type EvpnVniMapOutput struct{ *pulumi.OutputState }

func (EvpnVniMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EvpnVni)(nil)).Elem()
}

func (o EvpnVniMapOutput) ToEvpnVniMapOutput() EvpnVniMapOutput {
	return o
}

func (o EvpnVniMapOutput) ToEvpnVniMapOutputWithContext(ctx context.Context) EvpnVniMapOutput {
	return o
}

func (o EvpnVniMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EvpnVni] {
	return pulumix.Output[map[string]*EvpnVni]{
		OutputState: o.OutputState,
	}
}

func (o EvpnVniMapOutput) MapIndex(k pulumi.StringInput) EvpnVniOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EvpnVni {
		return vs[0].(map[string]*EvpnVni)[vs[1].(string)]
	}).(EvpnVniOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnVniInput)(nil)).Elem(), &EvpnVni{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnVniArrayInput)(nil)).Elem(), EvpnVniArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnVniMapInput)(nil)).Elem(), EvpnVniMap{})
	pulumi.RegisterOutputType(EvpnVniOutput{})
	pulumi.RegisterOutputType(EvpnVniArrayOutput{})
	pulumi.RegisterOutputType(EvpnVniMapOutput{})
}
