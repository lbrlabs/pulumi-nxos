// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Vrf struct {
	pulumi.CustomResourceState

	// VRF description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Encap for this Context, supported formats: `unknown`, `vlan-%d` or `vxlan-%d`. - Default value: `unknown`
	Encap pulumi.StringOutput `pulumi:"encap"`
	// VRF name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewVrf registers a new resource with the given unique name, arguments, and options.
func NewVrf(ctx *pulumi.Context,
	name string, args *VrfArgs, opts ...pulumi.ResourceOption) (*Vrf, error) {
	if args == nil {
		args = &VrfArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vrf
	err := ctx.RegisterResource("nxos:nxos/vrf:Vrf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrf gets an existing Vrf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrfState, opts ...pulumi.ResourceOption) (*Vrf, error) {
	var resource Vrf
	err := ctx.ReadResource("nxos:nxos/vrf:Vrf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vrf resources.
type vrfState struct {
	// VRF description.
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Encap for this Context, supported formats: `unknown`, `vlan-%d` or `vxlan-%d`. - Default value: `unknown`
	Encap *string `pulumi:"encap"`
	// VRF name.
	Name *string `pulumi:"name"`
}

type VrfState struct {
	// VRF description.
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Encap for this Context, supported formats: `unknown`, `vlan-%d` or `vxlan-%d`. - Default value: `unknown`
	Encap pulumi.StringPtrInput
	// VRF name.
	Name pulumi.StringPtrInput
}

func (VrfState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrfState)(nil)).Elem()
}

type vrfArgs struct {
	// VRF description.
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Encap for this Context, supported formats: `unknown`, `vlan-%d` or `vxlan-%d`. - Default value: `unknown`
	Encap *string `pulumi:"encap"`
	// VRF name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Vrf resource.
type VrfArgs struct {
	// VRF description.
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Encap for this Context, supported formats: `unknown`, `vlan-%d` or `vxlan-%d`. - Default value: `unknown`
	Encap pulumi.StringPtrInput
	// VRF name.
	Name pulumi.StringPtrInput
}

func (VrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrfArgs)(nil)).Elem()
}

type VrfInput interface {
	pulumi.Input

	ToVrfOutput() VrfOutput
	ToVrfOutputWithContext(ctx context.Context) VrfOutput
}

func (*Vrf) ElementType() reflect.Type {
	return reflect.TypeOf((**Vrf)(nil)).Elem()
}

func (i *Vrf) ToVrfOutput() VrfOutput {
	return i.ToVrfOutputWithContext(context.Background())
}

func (i *Vrf) ToVrfOutputWithContext(ctx context.Context) VrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfOutput)
}

func (i *Vrf) ToOutput(ctx context.Context) pulumix.Output[*Vrf] {
	return pulumix.Output[*Vrf]{
		OutputState: i.ToVrfOutputWithContext(ctx).OutputState,
	}
}

// VrfArrayInput is an input type that accepts VrfArray and VrfArrayOutput values.
// You can construct a concrete instance of `VrfArrayInput` via:
//
//	VrfArray{ VrfArgs{...} }
type VrfArrayInput interface {
	pulumi.Input

	ToVrfArrayOutput() VrfArrayOutput
	ToVrfArrayOutputWithContext(context.Context) VrfArrayOutput
}

type VrfArray []VrfInput

func (VrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vrf)(nil)).Elem()
}

func (i VrfArray) ToVrfArrayOutput() VrfArrayOutput {
	return i.ToVrfArrayOutputWithContext(context.Background())
}

func (i VrfArray) ToVrfArrayOutputWithContext(ctx context.Context) VrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfArrayOutput)
}

func (i VrfArray) ToOutput(ctx context.Context) pulumix.Output[[]*Vrf] {
	return pulumix.Output[[]*Vrf]{
		OutputState: i.ToVrfArrayOutputWithContext(ctx).OutputState,
	}
}

// VrfMapInput is an input type that accepts VrfMap and VrfMapOutput values.
// You can construct a concrete instance of `VrfMapInput` via:
//
//	VrfMap{ "key": VrfArgs{...} }
type VrfMapInput interface {
	pulumi.Input

	ToVrfMapOutput() VrfMapOutput
	ToVrfMapOutputWithContext(context.Context) VrfMapOutput
}

type VrfMap map[string]VrfInput

func (VrfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vrf)(nil)).Elem()
}

func (i VrfMap) ToVrfMapOutput() VrfMapOutput {
	return i.ToVrfMapOutputWithContext(context.Background())
}

func (i VrfMap) ToVrfMapOutputWithContext(ctx context.Context) VrfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfMapOutput)
}

func (i VrfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Vrf] {
	return pulumix.Output[map[string]*Vrf]{
		OutputState: i.ToVrfMapOutputWithContext(ctx).OutputState,
	}
}

type VrfOutput struct{ *pulumi.OutputState }

func (VrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vrf)(nil)).Elem()
}

func (o VrfOutput) ToVrfOutput() VrfOutput {
	return o
}

func (o VrfOutput) ToVrfOutputWithContext(ctx context.Context) VrfOutput {
	return o
}

func (o VrfOutput) ToOutput(ctx context.Context) pulumix.Output[*Vrf] {
	return pulumix.Output[*Vrf]{
		OutputState: o.OutputState,
	}
}

// VRF description.
func (o VrfOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrf) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o VrfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Encap for this Context, supported formats: `unknown`, `vlan-%d` or `vxlan-%d`. - Default value: `unknown`
func (o VrfOutput) Encap() pulumi.StringOutput {
	return o.ApplyT(func(v *Vrf) pulumi.StringOutput { return v.Encap }).(pulumi.StringOutput)
}

// VRF name.
func (o VrfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vrf) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type VrfArrayOutput struct{ *pulumi.OutputState }

func (VrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vrf)(nil)).Elem()
}

func (o VrfArrayOutput) ToVrfArrayOutput() VrfArrayOutput {
	return o
}

func (o VrfArrayOutput) ToVrfArrayOutputWithContext(ctx context.Context) VrfArrayOutput {
	return o
}

func (o VrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Vrf] {
	return pulumix.Output[[]*Vrf]{
		OutputState: o.OutputState,
	}
}

func (o VrfArrayOutput) Index(i pulumi.IntInput) VrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vrf {
		return vs[0].([]*Vrf)[vs[1].(int)]
	}).(VrfOutput)
}

type VrfMapOutput struct{ *pulumi.OutputState }

func (VrfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vrf)(nil)).Elem()
}

func (o VrfMapOutput) ToVrfMapOutput() VrfMapOutput {
	return o
}

func (o VrfMapOutput) ToVrfMapOutputWithContext(ctx context.Context) VrfMapOutput {
	return o
}

func (o VrfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Vrf] {
	return pulumix.Output[map[string]*Vrf]{
		OutputState: o.OutputState,
	}
}

func (o VrfMapOutput) MapIndex(k pulumi.StringInput) VrfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vrf {
		return vs[0].(map[string]*Vrf)[vs[1].(string)]
	}).(VrfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrfInput)(nil)).Elem(), &Vrf{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfArrayInput)(nil)).Elem(), VrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfMapInput)(nil)).Elem(), VrfMap{})
	pulumi.RegisterOutputType(VrfOutput{})
	pulumi.RegisterOutputType(VrfArrayOutput{})
	pulumi.RegisterOutputType(VrfMapOutput{})
}
