// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type LoopbackInterfaceVrf struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `lo123`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringOutput `pulumi:"vrfDn"`
}

// NewLoopbackInterfaceVrf registers a new resource with the given unique name, arguments, and options.
func NewLoopbackInterfaceVrf(ctx *pulumi.Context,
	name string, args *LoopbackInterfaceVrfArgs, opts ...pulumi.ResourceOption) (*LoopbackInterfaceVrf, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	if args.VrfDn == nil {
		return nil, errors.New("invalid value for required argument 'VrfDn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoopbackInterfaceVrf
	err := ctx.RegisterResource("nxos:nxos/loopbackInterfaceVrf:LoopbackInterfaceVrf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoopbackInterfaceVrf gets an existing LoopbackInterfaceVrf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoopbackInterfaceVrf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoopbackInterfaceVrfState, opts ...pulumi.ResourceOption) (*LoopbackInterfaceVrf, error) {
	var resource LoopbackInterfaceVrf
	err := ctx.ReadResource("nxos:nxos/loopbackInterfaceVrf:LoopbackInterfaceVrf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoopbackInterfaceVrf resources.
type loopbackInterfaceVrfState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `lo123`.
	InterfaceId *string `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn *string `pulumi:"vrfDn"`
}

type LoopbackInterfaceVrfState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `lo123`.
	InterfaceId pulumi.StringPtrInput
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringPtrInput
}

func (LoopbackInterfaceVrfState) ElementType() reflect.Type {
	return reflect.TypeOf((*loopbackInterfaceVrfState)(nil)).Elem()
}

type loopbackInterfaceVrfArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `lo123`.
	InterfaceId string `pulumi:"interfaceId"`
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn string `pulumi:"vrfDn"`
}

// The set of arguments for constructing a LoopbackInterfaceVrf resource.
type LoopbackInterfaceVrfArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `lo123`.
	InterfaceId pulumi.StringInput
	// DN of VRF. For example: `sys/inst-VRF1`.
	VrfDn pulumi.StringInput
}

func (LoopbackInterfaceVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loopbackInterfaceVrfArgs)(nil)).Elem()
}

type LoopbackInterfaceVrfInput interface {
	pulumi.Input

	ToLoopbackInterfaceVrfOutput() LoopbackInterfaceVrfOutput
	ToLoopbackInterfaceVrfOutputWithContext(ctx context.Context) LoopbackInterfaceVrfOutput
}

func (*LoopbackInterfaceVrf) ElementType() reflect.Type {
	return reflect.TypeOf((**LoopbackInterfaceVrf)(nil)).Elem()
}

func (i *LoopbackInterfaceVrf) ToLoopbackInterfaceVrfOutput() LoopbackInterfaceVrfOutput {
	return i.ToLoopbackInterfaceVrfOutputWithContext(context.Background())
}

func (i *LoopbackInterfaceVrf) ToLoopbackInterfaceVrfOutputWithContext(ctx context.Context) LoopbackInterfaceVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoopbackInterfaceVrfOutput)
}

func (i *LoopbackInterfaceVrf) ToOutput(ctx context.Context) pulumix.Output[*LoopbackInterfaceVrf] {
	return pulumix.Output[*LoopbackInterfaceVrf]{
		OutputState: i.ToLoopbackInterfaceVrfOutputWithContext(ctx).OutputState,
	}
}

// LoopbackInterfaceVrfArrayInput is an input type that accepts LoopbackInterfaceVrfArray and LoopbackInterfaceVrfArrayOutput values.
// You can construct a concrete instance of `LoopbackInterfaceVrfArrayInput` via:
//
//	LoopbackInterfaceVrfArray{ LoopbackInterfaceVrfArgs{...} }
type LoopbackInterfaceVrfArrayInput interface {
	pulumi.Input

	ToLoopbackInterfaceVrfArrayOutput() LoopbackInterfaceVrfArrayOutput
	ToLoopbackInterfaceVrfArrayOutputWithContext(context.Context) LoopbackInterfaceVrfArrayOutput
}

type LoopbackInterfaceVrfArray []LoopbackInterfaceVrfInput

func (LoopbackInterfaceVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoopbackInterfaceVrf)(nil)).Elem()
}

func (i LoopbackInterfaceVrfArray) ToLoopbackInterfaceVrfArrayOutput() LoopbackInterfaceVrfArrayOutput {
	return i.ToLoopbackInterfaceVrfArrayOutputWithContext(context.Background())
}

func (i LoopbackInterfaceVrfArray) ToLoopbackInterfaceVrfArrayOutputWithContext(ctx context.Context) LoopbackInterfaceVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoopbackInterfaceVrfArrayOutput)
}

func (i LoopbackInterfaceVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]*LoopbackInterfaceVrf] {
	return pulumix.Output[[]*LoopbackInterfaceVrf]{
		OutputState: i.ToLoopbackInterfaceVrfArrayOutputWithContext(ctx).OutputState,
	}
}

// LoopbackInterfaceVrfMapInput is an input type that accepts LoopbackInterfaceVrfMap and LoopbackInterfaceVrfMapOutput values.
// You can construct a concrete instance of `LoopbackInterfaceVrfMapInput` via:
//
//	LoopbackInterfaceVrfMap{ "key": LoopbackInterfaceVrfArgs{...} }
type LoopbackInterfaceVrfMapInput interface {
	pulumi.Input

	ToLoopbackInterfaceVrfMapOutput() LoopbackInterfaceVrfMapOutput
	ToLoopbackInterfaceVrfMapOutputWithContext(context.Context) LoopbackInterfaceVrfMapOutput
}

type LoopbackInterfaceVrfMap map[string]LoopbackInterfaceVrfInput

func (LoopbackInterfaceVrfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoopbackInterfaceVrf)(nil)).Elem()
}

func (i LoopbackInterfaceVrfMap) ToLoopbackInterfaceVrfMapOutput() LoopbackInterfaceVrfMapOutput {
	return i.ToLoopbackInterfaceVrfMapOutputWithContext(context.Background())
}

func (i LoopbackInterfaceVrfMap) ToLoopbackInterfaceVrfMapOutputWithContext(ctx context.Context) LoopbackInterfaceVrfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoopbackInterfaceVrfMapOutput)
}

func (i LoopbackInterfaceVrfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*LoopbackInterfaceVrf] {
	return pulumix.Output[map[string]*LoopbackInterfaceVrf]{
		OutputState: i.ToLoopbackInterfaceVrfMapOutputWithContext(ctx).OutputState,
	}
}

type LoopbackInterfaceVrfOutput struct{ *pulumi.OutputState }

func (LoopbackInterfaceVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoopbackInterfaceVrf)(nil)).Elem()
}

func (o LoopbackInterfaceVrfOutput) ToLoopbackInterfaceVrfOutput() LoopbackInterfaceVrfOutput {
	return o
}

func (o LoopbackInterfaceVrfOutput) ToLoopbackInterfaceVrfOutputWithContext(ctx context.Context) LoopbackInterfaceVrfOutput {
	return o
}

func (o LoopbackInterfaceVrfOutput) ToOutput(ctx context.Context) pulumix.Output[*LoopbackInterfaceVrf] {
	return pulumix.Output[*LoopbackInterfaceVrf]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LoopbackInterfaceVrfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoopbackInterfaceVrf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Must match first field in the output of `show intf brief`. Example: `lo123`.
func (o LoopbackInterfaceVrfOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoopbackInterfaceVrf) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// DN of VRF. For example: `sys/inst-VRF1`.
func (o LoopbackInterfaceVrfOutput) VrfDn() pulumi.StringOutput {
	return o.ApplyT(func(v *LoopbackInterfaceVrf) pulumi.StringOutput { return v.VrfDn }).(pulumi.StringOutput)
}

type LoopbackInterfaceVrfArrayOutput struct{ *pulumi.OutputState }

func (LoopbackInterfaceVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoopbackInterfaceVrf)(nil)).Elem()
}

func (o LoopbackInterfaceVrfArrayOutput) ToLoopbackInterfaceVrfArrayOutput() LoopbackInterfaceVrfArrayOutput {
	return o
}

func (o LoopbackInterfaceVrfArrayOutput) ToLoopbackInterfaceVrfArrayOutputWithContext(ctx context.Context) LoopbackInterfaceVrfArrayOutput {
	return o
}

func (o LoopbackInterfaceVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*LoopbackInterfaceVrf] {
	return pulumix.Output[[]*LoopbackInterfaceVrf]{
		OutputState: o.OutputState,
	}
}

func (o LoopbackInterfaceVrfArrayOutput) Index(i pulumi.IntInput) LoopbackInterfaceVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoopbackInterfaceVrf {
		return vs[0].([]*LoopbackInterfaceVrf)[vs[1].(int)]
	}).(LoopbackInterfaceVrfOutput)
}

type LoopbackInterfaceVrfMapOutput struct{ *pulumi.OutputState }

func (LoopbackInterfaceVrfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoopbackInterfaceVrf)(nil)).Elem()
}

func (o LoopbackInterfaceVrfMapOutput) ToLoopbackInterfaceVrfMapOutput() LoopbackInterfaceVrfMapOutput {
	return o
}

func (o LoopbackInterfaceVrfMapOutput) ToLoopbackInterfaceVrfMapOutputWithContext(ctx context.Context) LoopbackInterfaceVrfMapOutput {
	return o
}

func (o LoopbackInterfaceVrfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*LoopbackInterfaceVrf] {
	return pulumix.Output[map[string]*LoopbackInterfaceVrf]{
		OutputState: o.OutputState,
	}
}

func (o LoopbackInterfaceVrfMapOutput) MapIndex(k pulumi.StringInput) LoopbackInterfaceVrfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoopbackInterfaceVrf {
		return vs[0].(map[string]*LoopbackInterfaceVrf)[vs[1].(string)]
	}).(LoopbackInterfaceVrfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoopbackInterfaceVrfInput)(nil)).Elem(), &LoopbackInterfaceVrf{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoopbackInterfaceVrfArrayInput)(nil)).Elem(), LoopbackInterfaceVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoopbackInterfaceVrfMapInput)(nil)).Elem(), LoopbackInterfaceVrfMap{})
	pulumi.RegisterOutputType(LoopbackInterfaceVrfOutput{})
	pulumi.RegisterOutputType(LoopbackInterfaceVrfArrayOutput{})
	pulumi.RegisterOutputType(LoopbackInterfaceVrfMapOutput{})
}
