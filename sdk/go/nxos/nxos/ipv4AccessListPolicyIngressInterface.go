// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Ipv4AccessListPolicyIngressInterface struct {
	pulumi.CustomResourceState

	// Access list name.
	AccessListName pulumi.StringPtrOutput `pulumi:"accessListName"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
}

// NewIpv4AccessListPolicyIngressInterface registers a new resource with the given unique name, arguments, and options.
func NewIpv4AccessListPolicyIngressInterface(ctx *pulumi.Context,
	name string, args *Ipv4AccessListPolicyIngressInterfaceArgs, opts ...pulumi.ResourceOption) (*Ipv4AccessListPolicyIngressInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipv4AccessListPolicyIngressInterface
	err := ctx.RegisterResource("nxos:nxos/ipv4AccessListPolicyIngressInterface:Ipv4AccessListPolicyIngressInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv4AccessListPolicyIngressInterface gets an existing Ipv4AccessListPolicyIngressInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv4AccessListPolicyIngressInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv4AccessListPolicyIngressInterfaceState, opts ...pulumi.ResourceOption) (*Ipv4AccessListPolicyIngressInterface, error) {
	var resource Ipv4AccessListPolicyIngressInterface
	err := ctx.ReadResource("nxos:nxos/ipv4AccessListPolicyIngressInterface:Ipv4AccessListPolicyIngressInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv4AccessListPolicyIngressInterface resources.
type ipv4AccessListPolicyIngressInterfaceState struct {
	// Access list name.
	AccessListName *string `pulumi:"accessListName"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId *string `pulumi:"interfaceId"`
}

type Ipv4AccessListPolicyIngressInterfaceState struct {
	// Access list name.
	AccessListName pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringPtrInput
}

func (Ipv4AccessListPolicyIngressInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4AccessListPolicyIngressInterfaceState)(nil)).Elem()
}

type ipv4AccessListPolicyIngressInterfaceArgs struct {
	// Access list name.
	AccessListName *string `pulumi:"accessListName"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
}

// The set of arguments for constructing a Ipv4AccessListPolicyIngressInterface resource.
type Ipv4AccessListPolicyIngressInterfaceArgs struct {
	// Access list name.
	AccessListName pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringInput
}

func (Ipv4AccessListPolicyIngressInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4AccessListPolicyIngressInterfaceArgs)(nil)).Elem()
}

type Ipv4AccessListPolicyIngressInterfaceInput interface {
	pulumi.Input

	ToIpv4AccessListPolicyIngressInterfaceOutput() Ipv4AccessListPolicyIngressInterfaceOutput
	ToIpv4AccessListPolicyIngressInterfaceOutputWithContext(ctx context.Context) Ipv4AccessListPolicyIngressInterfaceOutput
}

func (*Ipv4AccessListPolicyIngressInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4AccessListPolicyIngressInterface)(nil)).Elem()
}

func (i *Ipv4AccessListPolicyIngressInterface) ToIpv4AccessListPolicyIngressInterfaceOutput() Ipv4AccessListPolicyIngressInterfaceOutput {
	return i.ToIpv4AccessListPolicyIngressInterfaceOutputWithContext(context.Background())
}

func (i *Ipv4AccessListPolicyIngressInterface) ToIpv4AccessListPolicyIngressInterfaceOutputWithContext(ctx context.Context) Ipv4AccessListPolicyIngressInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AccessListPolicyIngressInterfaceOutput)
}

func (i *Ipv4AccessListPolicyIngressInterface) ToOutput(ctx context.Context) pulumix.Output[*Ipv4AccessListPolicyIngressInterface] {
	return pulumix.Output[*Ipv4AccessListPolicyIngressInterface]{
		OutputState: i.ToIpv4AccessListPolicyIngressInterfaceOutputWithContext(ctx).OutputState,
	}
}

// Ipv4AccessListPolicyIngressInterfaceArrayInput is an input type that accepts Ipv4AccessListPolicyIngressInterfaceArray and Ipv4AccessListPolicyIngressInterfaceArrayOutput values.
// You can construct a concrete instance of `Ipv4AccessListPolicyIngressInterfaceArrayInput` via:
//
//	Ipv4AccessListPolicyIngressInterfaceArray{ Ipv4AccessListPolicyIngressInterfaceArgs{...} }
type Ipv4AccessListPolicyIngressInterfaceArrayInput interface {
	pulumi.Input

	ToIpv4AccessListPolicyIngressInterfaceArrayOutput() Ipv4AccessListPolicyIngressInterfaceArrayOutput
	ToIpv4AccessListPolicyIngressInterfaceArrayOutputWithContext(context.Context) Ipv4AccessListPolicyIngressInterfaceArrayOutput
}

type Ipv4AccessListPolicyIngressInterfaceArray []Ipv4AccessListPolicyIngressInterfaceInput

func (Ipv4AccessListPolicyIngressInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4AccessListPolicyIngressInterface)(nil)).Elem()
}

func (i Ipv4AccessListPolicyIngressInterfaceArray) ToIpv4AccessListPolicyIngressInterfaceArrayOutput() Ipv4AccessListPolicyIngressInterfaceArrayOutput {
	return i.ToIpv4AccessListPolicyIngressInterfaceArrayOutputWithContext(context.Background())
}

func (i Ipv4AccessListPolicyIngressInterfaceArray) ToIpv4AccessListPolicyIngressInterfaceArrayOutputWithContext(ctx context.Context) Ipv4AccessListPolicyIngressInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AccessListPolicyIngressInterfaceArrayOutput)
}

func (i Ipv4AccessListPolicyIngressInterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4AccessListPolicyIngressInterface] {
	return pulumix.Output[[]*Ipv4AccessListPolicyIngressInterface]{
		OutputState: i.ToIpv4AccessListPolicyIngressInterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// Ipv4AccessListPolicyIngressInterfaceMapInput is an input type that accepts Ipv4AccessListPolicyIngressInterfaceMap and Ipv4AccessListPolicyIngressInterfaceMapOutput values.
// You can construct a concrete instance of `Ipv4AccessListPolicyIngressInterfaceMapInput` via:
//
//	Ipv4AccessListPolicyIngressInterfaceMap{ "key": Ipv4AccessListPolicyIngressInterfaceArgs{...} }
type Ipv4AccessListPolicyIngressInterfaceMapInput interface {
	pulumi.Input

	ToIpv4AccessListPolicyIngressInterfaceMapOutput() Ipv4AccessListPolicyIngressInterfaceMapOutput
	ToIpv4AccessListPolicyIngressInterfaceMapOutputWithContext(context.Context) Ipv4AccessListPolicyIngressInterfaceMapOutput
}

type Ipv4AccessListPolicyIngressInterfaceMap map[string]Ipv4AccessListPolicyIngressInterfaceInput

func (Ipv4AccessListPolicyIngressInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4AccessListPolicyIngressInterface)(nil)).Elem()
}

func (i Ipv4AccessListPolicyIngressInterfaceMap) ToIpv4AccessListPolicyIngressInterfaceMapOutput() Ipv4AccessListPolicyIngressInterfaceMapOutput {
	return i.ToIpv4AccessListPolicyIngressInterfaceMapOutputWithContext(context.Background())
}

func (i Ipv4AccessListPolicyIngressInterfaceMap) ToIpv4AccessListPolicyIngressInterfaceMapOutputWithContext(ctx context.Context) Ipv4AccessListPolicyIngressInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AccessListPolicyIngressInterfaceMapOutput)
}

func (i Ipv4AccessListPolicyIngressInterfaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4AccessListPolicyIngressInterface] {
	return pulumix.Output[map[string]*Ipv4AccessListPolicyIngressInterface]{
		OutputState: i.ToIpv4AccessListPolicyIngressInterfaceMapOutputWithContext(ctx).OutputState,
	}
}

type Ipv4AccessListPolicyIngressInterfaceOutput struct{ *pulumi.OutputState }

func (Ipv4AccessListPolicyIngressInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4AccessListPolicyIngressInterface)(nil)).Elem()
}

func (o Ipv4AccessListPolicyIngressInterfaceOutput) ToIpv4AccessListPolicyIngressInterfaceOutput() Ipv4AccessListPolicyIngressInterfaceOutput {
	return o
}

func (o Ipv4AccessListPolicyIngressInterfaceOutput) ToIpv4AccessListPolicyIngressInterfaceOutputWithContext(ctx context.Context) Ipv4AccessListPolicyIngressInterfaceOutput {
	return o
}

func (o Ipv4AccessListPolicyIngressInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[*Ipv4AccessListPolicyIngressInterface] {
	return pulumix.Output[*Ipv4AccessListPolicyIngressInterface]{
		OutputState: o.OutputState,
	}
}

// Access list name.
func (o Ipv4AccessListPolicyIngressInterfaceOutput) AccessListName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListPolicyIngressInterface) pulumi.StringPtrOutput { return v.AccessListName }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o Ipv4AccessListPolicyIngressInterfaceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListPolicyIngressInterface) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
func (o Ipv4AccessListPolicyIngressInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessListPolicyIngressInterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

type Ipv4AccessListPolicyIngressInterfaceArrayOutput struct{ *pulumi.OutputState }

func (Ipv4AccessListPolicyIngressInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4AccessListPolicyIngressInterface)(nil)).Elem()
}

func (o Ipv4AccessListPolicyIngressInterfaceArrayOutput) ToIpv4AccessListPolicyIngressInterfaceArrayOutput() Ipv4AccessListPolicyIngressInterfaceArrayOutput {
	return o
}

func (o Ipv4AccessListPolicyIngressInterfaceArrayOutput) ToIpv4AccessListPolicyIngressInterfaceArrayOutputWithContext(ctx context.Context) Ipv4AccessListPolicyIngressInterfaceArrayOutput {
	return o
}

func (o Ipv4AccessListPolicyIngressInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4AccessListPolicyIngressInterface] {
	return pulumix.Output[[]*Ipv4AccessListPolicyIngressInterface]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4AccessListPolicyIngressInterfaceArrayOutput) Index(i pulumi.IntInput) Ipv4AccessListPolicyIngressInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv4AccessListPolicyIngressInterface {
		return vs[0].([]*Ipv4AccessListPolicyIngressInterface)[vs[1].(int)]
	}).(Ipv4AccessListPolicyIngressInterfaceOutput)
}

type Ipv4AccessListPolicyIngressInterfaceMapOutput struct{ *pulumi.OutputState }

func (Ipv4AccessListPolicyIngressInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4AccessListPolicyIngressInterface)(nil)).Elem()
}

func (o Ipv4AccessListPolicyIngressInterfaceMapOutput) ToIpv4AccessListPolicyIngressInterfaceMapOutput() Ipv4AccessListPolicyIngressInterfaceMapOutput {
	return o
}

func (o Ipv4AccessListPolicyIngressInterfaceMapOutput) ToIpv4AccessListPolicyIngressInterfaceMapOutputWithContext(ctx context.Context) Ipv4AccessListPolicyIngressInterfaceMapOutput {
	return o
}

func (o Ipv4AccessListPolicyIngressInterfaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4AccessListPolicyIngressInterface] {
	return pulumix.Output[map[string]*Ipv4AccessListPolicyIngressInterface]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4AccessListPolicyIngressInterfaceMapOutput) MapIndex(k pulumi.StringInput) Ipv4AccessListPolicyIngressInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv4AccessListPolicyIngressInterface {
		return vs[0].(map[string]*Ipv4AccessListPolicyIngressInterface)[vs[1].(string)]
	}).(Ipv4AccessListPolicyIngressInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AccessListPolicyIngressInterfaceInput)(nil)).Elem(), &Ipv4AccessListPolicyIngressInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AccessListPolicyIngressInterfaceArrayInput)(nil)).Elem(), Ipv4AccessListPolicyIngressInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AccessListPolicyIngressInterfaceMapInput)(nil)).Elem(), Ipv4AccessListPolicyIngressInterfaceMap{})
	pulumi.RegisterOutputType(Ipv4AccessListPolicyIngressInterfaceOutput{})
	pulumi.RegisterOutputType(Ipv4AccessListPolicyIngressInterfaceArrayOutput{})
	pulumi.RegisterOutputType(Ipv4AccessListPolicyIngressInterfaceMapOutput{})
}
