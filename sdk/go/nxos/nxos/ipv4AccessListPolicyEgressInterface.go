// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Ipv4AccessListPolicyEgressInterface struct {
	pulumi.CustomResourceState

	// Access list name.
	AccessListName pulumi.StringPtrOutput `pulumi:"accessListName"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
}

// NewIpv4AccessListPolicyEgressInterface registers a new resource with the given unique name, arguments, and options.
func NewIpv4AccessListPolicyEgressInterface(ctx *pulumi.Context,
	name string, args *Ipv4AccessListPolicyEgressInterfaceArgs, opts ...pulumi.ResourceOption) (*Ipv4AccessListPolicyEgressInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipv4AccessListPolicyEgressInterface
	err := ctx.RegisterResource("nxos:nxos/ipv4AccessListPolicyEgressInterface:Ipv4AccessListPolicyEgressInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv4AccessListPolicyEgressInterface gets an existing Ipv4AccessListPolicyEgressInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv4AccessListPolicyEgressInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv4AccessListPolicyEgressInterfaceState, opts ...pulumi.ResourceOption) (*Ipv4AccessListPolicyEgressInterface, error) {
	var resource Ipv4AccessListPolicyEgressInterface
	err := ctx.ReadResource("nxos:nxos/ipv4AccessListPolicyEgressInterface:Ipv4AccessListPolicyEgressInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv4AccessListPolicyEgressInterface resources.
type ipv4AccessListPolicyEgressInterfaceState struct {
	// Access list name.
	AccessListName *string `pulumi:"accessListName"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId *string `pulumi:"interfaceId"`
}

type Ipv4AccessListPolicyEgressInterfaceState struct {
	// Access list name.
	AccessListName pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringPtrInput
}

func (Ipv4AccessListPolicyEgressInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4AccessListPolicyEgressInterfaceState)(nil)).Elem()
}

type ipv4AccessListPolicyEgressInterfaceArgs struct {
	// Access list name.
	AccessListName *string `pulumi:"accessListName"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId string `pulumi:"interfaceId"`
}

// The set of arguments for constructing a Ipv4AccessListPolicyEgressInterface resource.
type Ipv4AccessListPolicyEgressInterfaceArgs struct {
	// Access list name.
	AccessListName pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
	InterfaceId pulumi.StringInput
}

func (Ipv4AccessListPolicyEgressInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4AccessListPolicyEgressInterfaceArgs)(nil)).Elem()
}

type Ipv4AccessListPolicyEgressInterfaceInput interface {
	pulumi.Input

	ToIpv4AccessListPolicyEgressInterfaceOutput() Ipv4AccessListPolicyEgressInterfaceOutput
	ToIpv4AccessListPolicyEgressInterfaceOutputWithContext(ctx context.Context) Ipv4AccessListPolicyEgressInterfaceOutput
}

func (*Ipv4AccessListPolicyEgressInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4AccessListPolicyEgressInterface)(nil)).Elem()
}

func (i *Ipv4AccessListPolicyEgressInterface) ToIpv4AccessListPolicyEgressInterfaceOutput() Ipv4AccessListPolicyEgressInterfaceOutput {
	return i.ToIpv4AccessListPolicyEgressInterfaceOutputWithContext(context.Background())
}

func (i *Ipv4AccessListPolicyEgressInterface) ToIpv4AccessListPolicyEgressInterfaceOutputWithContext(ctx context.Context) Ipv4AccessListPolicyEgressInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AccessListPolicyEgressInterfaceOutput)
}

func (i *Ipv4AccessListPolicyEgressInterface) ToOutput(ctx context.Context) pulumix.Output[*Ipv4AccessListPolicyEgressInterface] {
	return pulumix.Output[*Ipv4AccessListPolicyEgressInterface]{
		OutputState: i.ToIpv4AccessListPolicyEgressInterfaceOutputWithContext(ctx).OutputState,
	}
}

// Ipv4AccessListPolicyEgressInterfaceArrayInput is an input type that accepts Ipv4AccessListPolicyEgressInterfaceArray and Ipv4AccessListPolicyEgressInterfaceArrayOutput values.
// You can construct a concrete instance of `Ipv4AccessListPolicyEgressInterfaceArrayInput` via:
//
//	Ipv4AccessListPolicyEgressInterfaceArray{ Ipv4AccessListPolicyEgressInterfaceArgs{...} }
type Ipv4AccessListPolicyEgressInterfaceArrayInput interface {
	pulumi.Input

	ToIpv4AccessListPolicyEgressInterfaceArrayOutput() Ipv4AccessListPolicyEgressInterfaceArrayOutput
	ToIpv4AccessListPolicyEgressInterfaceArrayOutputWithContext(context.Context) Ipv4AccessListPolicyEgressInterfaceArrayOutput
}

type Ipv4AccessListPolicyEgressInterfaceArray []Ipv4AccessListPolicyEgressInterfaceInput

func (Ipv4AccessListPolicyEgressInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4AccessListPolicyEgressInterface)(nil)).Elem()
}

func (i Ipv4AccessListPolicyEgressInterfaceArray) ToIpv4AccessListPolicyEgressInterfaceArrayOutput() Ipv4AccessListPolicyEgressInterfaceArrayOutput {
	return i.ToIpv4AccessListPolicyEgressInterfaceArrayOutputWithContext(context.Background())
}

func (i Ipv4AccessListPolicyEgressInterfaceArray) ToIpv4AccessListPolicyEgressInterfaceArrayOutputWithContext(ctx context.Context) Ipv4AccessListPolicyEgressInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AccessListPolicyEgressInterfaceArrayOutput)
}

func (i Ipv4AccessListPolicyEgressInterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4AccessListPolicyEgressInterface] {
	return pulumix.Output[[]*Ipv4AccessListPolicyEgressInterface]{
		OutputState: i.ToIpv4AccessListPolicyEgressInterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// Ipv4AccessListPolicyEgressInterfaceMapInput is an input type that accepts Ipv4AccessListPolicyEgressInterfaceMap and Ipv4AccessListPolicyEgressInterfaceMapOutput values.
// You can construct a concrete instance of `Ipv4AccessListPolicyEgressInterfaceMapInput` via:
//
//	Ipv4AccessListPolicyEgressInterfaceMap{ "key": Ipv4AccessListPolicyEgressInterfaceArgs{...} }
type Ipv4AccessListPolicyEgressInterfaceMapInput interface {
	pulumi.Input

	ToIpv4AccessListPolicyEgressInterfaceMapOutput() Ipv4AccessListPolicyEgressInterfaceMapOutput
	ToIpv4AccessListPolicyEgressInterfaceMapOutputWithContext(context.Context) Ipv4AccessListPolicyEgressInterfaceMapOutput
}

type Ipv4AccessListPolicyEgressInterfaceMap map[string]Ipv4AccessListPolicyEgressInterfaceInput

func (Ipv4AccessListPolicyEgressInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4AccessListPolicyEgressInterface)(nil)).Elem()
}

func (i Ipv4AccessListPolicyEgressInterfaceMap) ToIpv4AccessListPolicyEgressInterfaceMapOutput() Ipv4AccessListPolicyEgressInterfaceMapOutput {
	return i.ToIpv4AccessListPolicyEgressInterfaceMapOutputWithContext(context.Background())
}

func (i Ipv4AccessListPolicyEgressInterfaceMap) ToIpv4AccessListPolicyEgressInterfaceMapOutputWithContext(ctx context.Context) Ipv4AccessListPolicyEgressInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4AccessListPolicyEgressInterfaceMapOutput)
}

func (i Ipv4AccessListPolicyEgressInterfaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4AccessListPolicyEgressInterface] {
	return pulumix.Output[map[string]*Ipv4AccessListPolicyEgressInterface]{
		OutputState: i.ToIpv4AccessListPolicyEgressInterfaceMapOutputWithContext(ctx).OutputState,
	}
}

type Ipv4AccessListPolicyEgressInterfaceOutput struct{ *pulumi.OutputState }

func (Ipv4AccessListPolicyEgressInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4AccessListPolicyEgressInterface)(nil)).Elem()
}

func (o Ipv4AccessListPolicyEgressInterfaceOutput) ToIpv4AccessListPolicyEgressInterfaceOutput() Ipv4AccessListPolicyEgressInterfaceOutput {
	return o
}

func (o Ipv4AccessListPolicyEgressInterfaceOutput) ToIpv4AccessListPolicyEgressInterfaceOutputWithContext(ctx context.Context) Ipv4AccessListPolicyEgressInterfaceOutput {
	return o
}

func (o Ipv4AccessListPolicyEgressInterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[*Ipv4AccessListPolicyEgressInterface] {
	return pulumix.Output[*Ipv4AccessListPolicyEgressInterface]{
		OutputState: o.OutputState,
	}
}

// Access list name.
func (o Ipv4AccessListPolicyEgressInterfaceOutput) AccessListName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListPolicyEgressInterface) pulumi.StringPtrOutput { return v.AccessListName }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o Ipv4AccessListPolicyEgressInterfaceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4AccessListPolicyEgressInterface) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
func (o Ipv4AccessListPolicyEgressInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4AccessListPolicyEgressInterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

type Ipv4AccessListPolicyEgressInterfaceArrayOutput struct{ *pulumi.OutputState }

func (Ipv4AccessListPolicyEgressInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4AccessListPolicyEgressInterface)(nil)).Elem()
}

func (o Ipv4AccessListPolicyEgressInterfaceArrayOutput) ToIpv4AccessListPolicyEgressInterfaceArrayOutput() Ipv4AccessListPolicyEgressInterfaceArrayOutput {
	return o
}

func (o Ipv4AccessListPolicyEgressInterfaceArrayOutput) ToIpv4AccessListPolicyEgressInterfaceArrayOutputWithContext(ctx context.Context) Ipv4AccessListPolicyEgressInterfaceArrayOutput {
	return o
}

func (o Ipv4AccessListPolicyEgressInterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4AccessListPolicyEgressInterface] {
	return pulumix.Output[[]*Ipv4AccessListPolicyEgressInterface]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4AccessListPolicyEgressInterfaceArrayOutput) Index(i pulumi.IntInput) Ipv4AccessListPolicyEgressInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv4AccessListPolicyEgressInterface {
		return vs[0].([]*Ipv4AccessListPolicyEgressInterface)[vs[1].(int)]
	}).(Ipv4AccessListPolicyEgressInterfaceOutput)
}

type Ipv4AccessListPolicyEgressInterfaceMapOutput struct{ *pulumi.OutputState }

func (Ipv4AccessListPolicyEgressInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4AccessListPolicyEgressInterface)(nil)).Elem()
}

func (o Ipv4AccessListPolicyEgressInterfaceMapOutput) ToIpv4AccessListPolicyEgressInterfaceMapOutput() Ipv4AccessListPolicyEgressInterfaceMapOutput {
	return o
}

func (o Ipv4AccessListPolicyEgressInterfaceMapOutput) ToIpv4AccessListPolicyEgressInterfaceMapOutputWithContext(ctx context.Context) Ipv4AccessListPolicyEgressInterfaceMapOutput {
	return o
}

func (o Ipv4AccessListPolicyEgressInterfaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4AccessListPolicyEgressInterface] {
	return pulumix.Output[map[string]*Ipv4AccessListPolicyEgressInterface]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4AccessListPolicyEgressInterfaceMapOutput) MapIndex(k pulumi.StringInput) Ipv4AccessListPolicyEgressInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv4AccessListPolicyEgressInterface {
		return vs[0].(map[string]*Ipv4AccessListPolicyEgressInterface)[vs[1].(string)]
	}).(Ipv4AccessListPolicyEgressInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AccessListPolicyEgressInterfaceInput)(nil)).Elem(), &Ipv4AccessListPolicyEgressInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AccessListPolicyEgressInterfaceArrayInput)(nil)).Elem(), Ipv4AccessListPolicyEgressInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4AccessListPolicyEgressInterfaceMapInput)(nil)).Elem(), Ipv4AccessListPolicyEgressInterfaceMap{})
	pulumi.RegisterOutputType(Ipv4AccessListPolicyEgressInterfaceOutput{})
	pulumi.RegisterOutputType(Ipv4AccessListPolicyEgressInterfaceArrayOutput{})
	pulumi.RegisterOutputType(Ipv4AccessListPolicyEgressInterfaceMapOutput{})
}
