// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Subinterface struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `up`, `down` - Default value: `up`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// Specifies the administrative port bandwidth. - Range: `0`-`3200000000` - Default value: `0`
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
	Delay pulumi.IntOutput `pulumi:"delay"`
	// Interface description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Subinterface encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	Encap pulumi.StringOutput `pulumi:"encap"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
	LinkLogging pulumi.StringOutput `pulumi:"linkLogging"`
	// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
	Medium pulumi.StringOutput `pulumi:"medium"`
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu pulumi.IntOutput `pulumi:"mtu"`
}

// NewSubinterface registers a new resource with the given unique name, arguments, and options.
func NewSubinterface(ctx *pulumi.Context,
	name string, args *SubinterfaceArgs, opts ...pulumi.ResourceOption) (*Subinterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subinterface
	err := ctx.RegisterResource("nxos:nxos/subinterface:Subinterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubinterface gets an existing Subinterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubinterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubinterfaceState, opts ...pulumi.ResourceOption) (*Subinterface, error) {
	var resource Subinterface
	err := ctx.ReadResource("nxos:nxos/subinterface:Subinterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subinterface resources.
type subinterfaceState struct {
	// Administrative state. - Choices: `up`, `down` - Default value: `up`
	AdminState *string `pulumi:"adminState"`
	// Specifies the administrative port bandwidth. - Range: `0`-`3200000000` - Default value: `0`
	Bandwidth *int `pulumi:"bandwidth"`
	// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
	Delay *int `pulumi:"delay"`
	// Interface description.
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Subinterface encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	Encap *string `pulumi:"encap"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
	InterfaceId *string `pulumi:"interfaceId"`
	// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
	LinkLogging *string `pulumi:"linkLogging"`
	// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
	Medium *string `pulumi:"medium"`
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu *int `pulumi:"mtu"`
}

type SubinterfaceState struct {
	// Administrative state. - Choices: `up`, `down` - Default value: `up`
	AdminState pulumi.StringPtrInput
	// Specifies the administrative port bandwidth. - Range: `0`-`3200000000` - Default value: `0`
	Bandwidth pulumi.IntPtrInput
	// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
	Delay pulumi.IntPtrInput
	// Interface description.
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Subinterface encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	Encap pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
	InterfaceId pulumi.StringPtrInput
	// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
	LinkLogging pulumi.StringPtrInput
	// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
	Medium pulumi.StringPtrInput
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu pulumi.IntPtrInput
}

func (SubinterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*subinterfaceState)(nil)).Elem()
}

type subinterfaceArgs struct {
	// Administrative state. - Choices: `up`, `down` - Default value: `up`
	AdminState *string `pulumi:"adminState"`
	// Specifies the administrative port bandwidth. - Range: `0`-`3200000000` - Default value: `0`
	Bandwidth *int `pulumi:"bandwidth"`
	// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
	Delay *int `pulumi:"delay"`
	// Interface description.
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Subinterface encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	Encap *string `pulumi:"encap"`
	// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
	InterfaceId string `pulumi:"interfaceId"`
	// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
	LinkLogging *string `pulumi:"linkLogging"`
	// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
	Medium *string `pulumi:"medium"`
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu *int `pulumi:"mtu"`
}

// The set of arguments for constructing a Subinterface resource.
type SubinterfaceArgs struct {
	// Administrative state. - Choices: `up`, `down` - Default value: `up`
	AdminState pulumi.StringPtrInput
	// Specifies the administrative port bandwidth. - Range: `0`-`3200000000` - Default value: `0`
	Bandwidth pulumi.IntPtrInput
	// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
	Delay pulumi.IntPtrInput
	// Interface description.
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Subinterface encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
	Encap pulumi.StringPtrInput
	// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
	InterfaceId pulumi.StringInput
	// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
	LinkLogging pulumi.StringPtrInput
	// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
	Medium pulumi.StringPtrInput
	// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
	Mtu pulumi.IntPtrInput
}

func (SubinterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subinterfaceArgs)(nil)).Elem()
}

type SubinterfaceInput interface {
	pulumi.Input

	ToSubinterfaceOutput() SubinterfaceOutput
	ToSubinterfaceOutputWithContext(ctx context.Context) SubinterfaceOutput
}

func (*Subinterface) ElementType() reflect.Type {
	return reflect.TypeOf((**Subinterface)(nil)).Elem()
}

func (i *Subinterface) ToSubinterfaceOutput() SubinterfaceOutput {
	return i.ToSubinterfaceOutputWithContext(context.Background())
}

func (i *Subinterface) ToSubinterfaceOutputWithContext(ctx context.Context) SubinterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubinterfaceOutput)
}

func (i *Subinterface) ToOutput(ctx context.Context) pulumix.Output[*Subinterface] {
	return pulumix.Output[*Subinterface]{
		OutputState: i.ToSubinterfaceOutputWithContext(ctx).OutputState,
	}
}

// SubinterfaceArrayInput is an input type that accepts SubinterfaceArray and SubinterfaceArrayOutput values.
// You can construct a concrete instance of `SubinterfaceArrayInput` via:
//
//	SubinterfaceArray{ SubinterfaceArgs{...} }
type SubinterfaceArrayInput interface {
	pulumi.Input

	ToSubinterfaceArrayOutput() SubinterfaceArrayOutput
	ToSubinterfaceArrayOutputWithContext(context.Context) SubinterfaceArrayOutput
}

type SubinterfaceArray []SubinterfaceInput

func (SubinterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subinterface)(nil)).Elem()
}

func (i SubinterfaceArray) ToSubinterfaceArrayOutput() SubinterfaceArrayOutput {
	return i.ToSubinterfaceArrayOutputWithContext(context.Background())
}

func (i SubinterfaceArray) ToSubinterfaceArrayOutputWithContext(ctx context.Context) SubinterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubinterfaceArrayOutput)
}

func (i SubinterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*Subinterface] {
	return pulumix.Output[[]*Subinterface]{
		OutputState: i.ToSubinterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// SubinterfaceMapInput is an input type that accepts SubinterfaceMap and SubinterfaceMapOutput values.
// You can construct a concrete instance of `SubinterfaceMapInput` via:
//
//	SubinterfaceMap{ "key": SubinterfaceArgs{...} }
type SubinterfaceMapInput interface {
	pulumi.Input

	ToSubinterfaceMapOutput() SubinterfaceMapOutput
	ToSubinterfaceMapOutputWithContext(context.Context) SubinterfaceMapOutput
}

type SubinterfaceMap map[string]SubinterfaceInput

func (SubinterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subinterface)(nil)).Elem()
}

func (i SubinterfaceMap) ToSubinterfaceMapOutput() SubinterfaceMapOutput {
	return i.ToSubinterfaceMapOutputWithContext(context.Background())
}

func (i SubinterfaceMap) ToSubinterfaceMapOutputWithContext(ctx context.Context) SubinterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubinterfaceMapOutput)
}

func (i SubinterfaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Subinterface] {
	return pulumix.Output[map[string]*Subinterface]{
		OutputState: i.ToSubinterfaceMapOutputWithContext(ctx).OutputState,
	}
}

type SubinterfaceOutput struct{ *pulumi.OutputState }

func (SubinterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subinterface)(nil)).Elem()
}

func (o SubinterfaceOutput) ToSubinterfaceOutput() SubinterfaceOutput {
	return o
}

func (o SubinterfaceOutput) ToSubinterfaceOutputWithContext(ctx context.Context) SubinterfaceOutput {
	return o
}

func (o SubinterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[*Subinterface] {
	return pulumix.Output[*Subinterface]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `up`, `down` - Default value: `up`
func (o SubinterfaceOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *Subinterface) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// Specifies the administrative port bandwidth. - Range: `0`-`3200000000` - Default value: `0`
func (o SubinterfaceOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Subinterface) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
func (o SubinterfaceOutput) Delay() pulumi.IntOutput {
	return o.ApplyT(func(v *Subinterface) pulumi.IntOutput { return v.Delay }).(pulumi.IntOutput)
}

// Interface description.
func (o SubinterfaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subinterface) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o SubinterfaceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subinterface) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Subinterface encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
func (o SubinterfaceOutput) Encap() pulumi.StringOutput {
	return o.ApplyT(func(v *Subinterface) pulumi.StringOutput { return v.Encap }).(pulumi.StringOutput)
}

// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
func (o SubinterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subinterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
func (o SubinterfaceOutput) LinkLogging() pulumi.StringOutput {
	return o.ApplyT(func(v *Subinterface) pulumi.StringOutput { return v.LinkLogging }).(pulumi.StringOutput)
}

// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
func (o SubinterfaceOutput) Medium() pulumi.StringOutput {
	return o.ApplyT(func(v *Subinterface) pulumi.StringOutput { return v.Medium }).(pulumi.StringOutput)
}

// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
func (o SubinterfaceOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v *Subinterface) pulumi.IntOutput { return v.Mtu }).(pulumi.IntOutput)
}

type SubinterfaceArrayOutput struct{ *pulumi.OutputState }

func (SubinterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subinterface)(nil)).Elem()
}

func (o SubinterfaceArrayOutput) ToSubinterfaceArrayOutput() SubinterfaceArrayOutput {
	return o
}

func (o SubinterfaceArrayOutput) ToSubinterfaceArrayOutputWithContext(ctx context.Context) SubinterfaceArrayOutput {
	return o
}

func (o SubinterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Subinterface] {
	return pulumix.Output[[]*Subinterface]{
		OutputState: o.OutputState,
	}
}

func (o SubinterfaceArrayOutput) Index(i pulumi.IntInput) SubinterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subinterface {
		return vs[0].([]*Subinterface)[vs[1].(int)]
	}).(SubinterfaceOutput)
}

type SubinterfaceMapOutput struct{ *pulumi.OutputState }

func (SubinterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subinterface)(nil)).Elem()
}

func (o SubinterfaceMapOutput) ToSubinterfaceMapOutput() SubinterfaceMapOutput {
	return o
}

func (o SubinterfaceMapOutput) ToSubinterfaceMapOutputWithContext(ctx context.Context) SubinterfaceMapOutput {
	return o
}

func (o SubinterfaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Subinterface] {
	return pulumix.Output[map[string]*Subinterface]{
		OutputState: o.OutputState,
	}
}

func (o SubinterfaceMapOutput) MapIndex(k pulumi.StringInput) SubinterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subinterface {
		return vs[0].(map[string]*Subinterface)[vs[1].(string)]
	}).(SubinterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubinterfaceInput)(nil)).Elem(), &Subinterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubinterfaceArrayInput)(nil)).Elem(), SubinterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubinterfaceMapInput)(nil)).Elem(), SubinterfaceMap{})
	pulumi.RegisterOutputType(SubinterfaceOutput{})
	pulumi.RegisterOutputType(SubinterfaceArrayOutput{})
	pulumi.RegisterOutputType(SubinterfaceMapOutput{})
}
