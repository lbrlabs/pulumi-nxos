// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FeatureMacsec struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureMacsec registers a new resource with the given unique name, arguments, and options.
func NewFeatureMacsec(ctx *pulumi.Context,
	name string, args *FeatureMacsecArgs, opts ...pulumi.ResourceOption) (*FeatureMacsec, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureMacsec
	err := ctx.RegisterResource("nxos:nxos/featureMacsec:FeatureMacsec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureMacsec gets an existing FeatureMacsec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureMacsec(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureMacsecState, opts ...pulumi.ResourceOption) (*FeatureMacsec, error) {
	var resource FeatureMacsec
	err := ctx.ReadResource("nxos:nxos/featureMacsec:FeatureMacsec", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureMacsec resources.
type featureMacsecState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureMacsecState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureMacsecState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureMacsecState)(nil)).Elem()
}

type featureMacsecArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureMacsec resource.
type FeatureMacsecArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureMacsecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureMacsecArgs)(nil)).Elem()
}

type FeatureMacsecInput interface {
	pulumi.Input

	ToFeatureMacsecOutput() FeatureMacsecOutput
	ToFeatureMacsecOutputWithContext(ctx context.Context) FeatureMacsecOutput
}

func (*FeatureMacsec) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureMacsec)(nil)).Elem()
}

func (i *FeatureMacsec) ToFeatureMacsecOutput() FeatureMacsecOutput {
	return i.ToFeatureMacsecOutputWithContext(context.Background())
}

func (i *FeatureMacsec) ToFeatureMacsecOutputWithContext(ctx context.Context) FeatureMacsecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMacsecOutput)
}

func (i *FeatureMacsec) ToOutput(ctx context.Context) pulumix.Output[*FeatureMacsec] {
	return pulumix.Output[*FeatureMacsec]{
		OutputState: i.ToFeatureMacsecOutputWithContext(ctx).OutputState,
	}
}

// FeatureMacsecArrayInput is an input type that accepts FeatureMacsecArray and FeatureMacsecArrayOutput values.
// You can construct a concrete instance of `FeatureMacsecArrayInput` via:
//
//	FeatureMacsecArray{ FeatureMacsecArgs{...} }
type FeatureMacsecArrayInput interface {
	pulumi.Input

	ToFeatureMacsecArrayOutput() FeatureMacsecArrayOutput
	ToFeatureMacsecArrayOutputWithContext(context.Context) FeatureMacsecArrayOutput
}

type FeatureMacsecArray []FeatureMacsecInput

func (FeatureMacsecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureMacsec)(nil)).Elem()
}

func (i FeatureMacsecArray) ToFeatureMacsecArrayOutput() FeatureMacsecArrayOutput {
	return i.ToFeatureMacsecArrayOutputWithContext(context.Background())
}

func (i FeatureMacsecArray) ToFeatureMacsecArrayOutputWithContext(ctx context.Context) FeatureMacsecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMacsecArrayOutput)
}

func (i FeatureMacsecArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureMacsec] {
	return pulumix.Output[[]*FeatureMacsec]{
		OutputState: i.ToFeatureMacsecArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureMacsecMapInput is an input type that accepts FeatureMacsecMap and FeatureMacsecMapOutput values.
// You can construct a concrete instance of `FeatureMacsecMapInput` via:
//
//	FeatureMacsecMap{ "key": FeatureMacsecArgs{...} }
type FeatureMacsecMapInput interface {
	pulumi.Input

	ToFeatureMacsecMapOutput() FeatureMacsecMapOutput
	ToFeatureMacsecMapOutputWithContext(context.Context) FeatureMacsecMapOutput
}

type FeatureMacsecMap map[string]FeatureMacsecInput

func (FeatureMacsecMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureMacsec)(nil)).Elem()
}

func (i FeatureMacsecMap) ToFeatureMacsecMapOutput() FeatureMacsecMapOutput {
	return i.ToFeatureMacsecMapOutputWithContext(context.Background())
}

func (i FeatureMacsecMap) ToFeatureMacsecMapOutputWithContext(ctx context.Context) FeatureMacsecMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureMacsecMapOutput)
}

func (i FeatureMacsecMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureMacsec] {
	return pulumix.Output[map[string]*FeatureMacsec]{
		OutputState: i.ToFeatureMacsecMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureMacsecOutput struct{ *pulumi.OutputState }

func (FeatureMacsecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureMacsec)(nil)).Elem()
}

func (o FeatureMacsecOutput) ToFeatureMacsecOutput() FeatureMacsecOutput {
	return o
}

func (o FeatureMacsecOutput) ToFeatureMacsecOutputWithContext(ctx context.Context) FeatureMacsecOutput {
	return o
}

func (o FeatureMacsecOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureMacsec] {
	return pulumix.Output[*FeatureMacsec]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureMacsecOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureMacsec) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureMacsecOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureMacsec) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureMacsecArrayOutput struct{ *pulumi.OutputState }

func (FeatureMacsecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureMacsec)(nil)).Elem()
}

func (o FeatureMacsecArrayOutput) ToFeatureMacsecArrayOutput() FeatureMacsecArrayOutput {
	return o
}

func (o FeatureMacsecArrayOutput) ToFeatureMacsecArrayOutputWithContext(ctx context.Context) FeatureMacsecArrayOutput {
	return o
}

func (o FeatureMacsecArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureMacsec] {
	return pulumix.Output[[]*FeatureMacsec]{
		OutputState: o.OutputState,
	}
}

func (o FeatureMacsecArrayOutput) Index(i pulumi.IntInput) FeatureMacsecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureMacsec {
		return vs[0].([]*FeatureMacsec)[vs[1].(int)]
	}).(FeatureMacsecOutput)
}

type FeatureMacsecMapOutput struct{ *pulumi.OutputState }

func (FeatureMacsecMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureMacsec)(nil)).Elem()
}

func (o FeatureMacsecMapOutput) ToFeatureMacsecMapOutput() FeatureMacsecMapOutput {
	return o
}

func (o FeatureMacsecMapOutput) ToFeatureMacsecMapOutputWithContext(ctx context.Context) FeatureMacsecMapOutput {
	return o
}

func (o FeatureMacsecMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureMacsec] {
	return pulumix.Output[map[string]*FeatureMacsec]{
		OutputState: o.OutputState,
	}
}

func (o FeatureMacsecMapOutput) MapIndex(k pulumi.StringInput) FeatureMacsecOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureMacsec {
		return vs[0].(map[string]*FeatureMacsec)[vs[1].(string)]
	}).(FeatureMacsecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureMacsecInput)(nil)).Elem(), &FeatureMacsec{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureMacsecArrayInput)(nil)).Elem(), FeatureMacsecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureMacsecMapInput)(nil)).Elem(), FeatureMacsecMap{})
	pulumi.RegisterOutputType(FeatureMacsecOutput{})
	pulumi.RegisterOutputType(FeatureMacsecArrayOutput{})
	pulumi.RegisterOutputType(FeatureMacsecMapOutput{})
}
