// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Ethernet struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// System jumbo MTU. - Range: `576`-`9216` - Default value: `9216`
	Mtu pulumi.IntOutput `pulumi:"mtu"`
}

// NewEthernet registers a new resource with the given unique name, arguments, and options.
func NewEthernet(ctx *pulumi.Context,
	name string, args *EthernetArgs, opts ...pulumi.ResourceOption) (*Ethernet, error) {
	if args == nil {
		args = &EthernetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ethernet
	err := ctx.RegisterResource("nxos:nxos/ethernet:Ethernet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEthernet gets an existing Ethernet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEthernet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EthernetState, opts ...pulumi.ResourceOption) (*Ethernet, error) {
	var resource Ethernet
	err := ctx.ReadResource("nxos:nxos/ethernet:Ethernet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ethernet resources.
type ethernetState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// System jumbo MTU. - Range: `576`-`9216` - Default value: `9216`
	Mtu *int `pulumi:"mtu"`
}

type EthernetState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// System jumbo MTU. - Range: `576`-`9216` - Default value: `9216`
	Mtu pulumi.IntPtrInput
}

func (EthernetState) ElementType() reflect.Type {
	return reflect.TypeOf((*ethernetState)(nil)).Elem()
}

type ethernetArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// System jumbo MTU. - Range: `576`-`9216` - Default value: `9216`
	Mtu *int `pulumi:"mtu"`
}

// The set of arguments for constructing a Ethernet resource.
type EthernetArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// System jumbo MTU. - Range: `576`-`9216` - Default value: `9216`
	Mtu pulumi.IntPtrInput
}

func (EthernetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ethernetArgs)(nil)).Elem()
}

type EthernetInput interface {
	pulumi.Input

	ToEthernetOutput() EthernetOutput
	ToEthernetOutputWithContext(ctx context.Context) EthernetOutput
}

func (*Ethernet) ElementType() reflect.Type {
	return reflect.TypeOf((**Ethernet)(nil)).Elem()
}

func (i *Ethernet) ToEthernetOutput() EthernetOutput {
	return i.ToEthernetOutputWithContext(context.Background())
}

func (i *Ethernet) ToEthernetOutputWithContext(ctx context.Context) EthernetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EthernetOutput)
}

func (i *Ethernet) ToOutput(ctx context.Context) pulumix.Output[*Ethernet] {
	return pulumix.Output[*Ethernet]{
		OutputState: i.ToEthernetOutputWithContext(ctx).OutputState,
	}
}

// EthernetArrayInput is an input type that accepts EthernetArray and EthernetArrayOutput values.
// You can construct a concrete instance of `EthernetArrayInput` via:
//
//	EthernetArray{ EthernetArgs{...} }
type EthernetArrayInput interface {
	pulumi.Input

	ToEthernetArrayOutput() EthernetArrayOutput
	ToEthernetArrayOutputWithContext(context.Context) EthernetArrayOutput
}

type EthernetArray []EthernetInput

func (EthernetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ethernet)(nil)).Elem()
}

func (i EthernetArray) ToEthernetArrayOutput() EthernetArrayOutput {
	return i.ToEthernetArrayOutputWithContext(context.Background())
}

func (i EthernetArray) ToEthernetArrayOutputWithContext(ctx context.Context) EthernetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EthernetArrayOutput)
}

func (i EthernetArray) ToOutput(ctx context.Context) pulumix.Output[[]*Ethernet] {
	return pulumix.Output[[]*Ethernet]{
		OutputState: i.ToEthernetArrayOutputWithContext(ctx).OutputState,
	}
}

// EthernetMapInput is an input type that accepts EthernetMap and EthernetMapOutput values.
// You can construct a concrete instance of `EthernetMapInput` via:
//
//	EthernetMap{ "key": EthernetArgs{...} }
type EthernetMapInput interface {
	pulumi.Input

	ToEthernetMapOutput() EthernetMapOutput
	ToEthernetMapOutputWithContext(context.Context) EthernetMapOutput
}

type EthernetMap map[string]EthernetInput

func (EthernetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ethernet)(nil)).Elem()
}

func (i EthernetMap) ToEthernetMapOutput() EthernetMapOutput {
	return i.ToEthernetMapOutputWithContext(context.Background())
}

func (i EthernetMap) ToEthernetMapOutputWithContext(ctx context.Context) EthernetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EthernetMapOutput)
}

func (i EthernetMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ethernet] {
	return pulumix.Output[map[string]*Ethernet]{
		OutputState: i.ToEthernetMapOutputWithContext(ctx).OutputState,
	}
}

type EthernetOutput struct{ *pulumi.OutputState }

func (EthernetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ethernet)(nil)).Elem()
}

func (o EthernetOutput) ToEthernetOutput() EthernetOutput {
	return o
}

func (o EthernetOutput) ToEthernetOutputWithContext(ctx context.Context) EthernetOutput {
	return o
}

func (o EthernetOutput) ToOutput(ctx context.Context) pulumix.Output[*Ethernet] {
	return pulumix.Output[*Ethernet]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o EthernetOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ethernet) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// System jumbo MTU. - Range: `576`-`9216` - Default value: `9216`
func (o EthernetOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v *Ethernet) pulumi.IntOutput { return v.Mtu }).(pulumi.IntOutput)
}

type EthernetArrayOutput struct{ *pulumi.OutputState }

func (EthernetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ethernet)(nil)).Elem()
}

func (o EthernetArrayOutput) ToEthernetArrayOutput() EthernetArrayOutput {
	return o
}

func (o EthernetArrayOutput) ToEthernetArrayOutputWithContext(ctx context.Context) EthernetArrayOutput {
	return o
}

func (o EthernetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Ethernet] {
	return pulumix.Output[[]*Ethernet]{
		OutputState: o.OutputState,
	}
}

func (o EthernetArrayOutput) Index(i pulumi.IntInput) EthernetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ethernet {
		return vs[0].([]*Ethernet)[vs[1].(int)]
	}).(EthernetOutput)
}

type EthernetMapOutput struct{ *pulumi.OutputState }

func (EthernetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ethernet)(nil)).Elem()
}

func (o EthernetMapOutput) ToEthernetMapOutput() EthernetMapOutput {
	return o
}

func (o EthernetMapOutput) ToEthernetMapOutputWithContext(ctx context.Context) EthernetMapOutput {
	return o
}

func (o EthernetMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ethernet] {
	return pulumix.Output[map[string]*Ethernet]{
		OutputState: o.OutputState,
	}
}

func (o EthernetMapOutput) MapIndex(k pulumi.StringInput) EthernetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ethernet {
		return vs[0].(map[string]*Ethernet)[vs[1].(string)]
	}).(EthernetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EthernetInput)(nil)).Elem(), &Ethernet{})
	pulumi.RegisterInputType(reflect.TypeOf((*EthernetArrayInput)(nil)).Elem(), EthernetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EthernetMapInput)(nil)).Elem(), EthernetMap{})
	pulumi.RegisterOutputType(EthernetOutput{})
	pulumi.RegisterOutputType(EthernetArrayOutput{})
	pulumi.RegisterOutputType(EthernetMapOutput{})
}
