// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type EvpnVniRouteTarget struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Route Target direction. - Choices: `import`, `export`
	Direction pulumi.StringOutput `pulumi:"direction"`
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap pulumi.StringOutput `pulumi:"encap"`
	// Route Target in NX-OS DME format.
	RouteTarget pulumi.StringOutput `pulumi:"routeTarget"`
}

// NewEvpnVniRouteTarget registers a new resource with the given unique name, arguments, and options.
func NewEvpnVniRouteTarget(ctx *pulumi.Context,
	name string, args *EvpnVniRouteTargetArgs, opts ...pulumi.ResourceOption) (*EvpnVniRouteTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.Encap == nil {
		return nil, errors.New("invalid value for required argument 'Encap'")
	}
	if args.RouteTarget == nil {
		return nil, errors.New("invalid value for required argument 'RouteTarget'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EvpnVniRouteTarget
	err := ctx.RegisterResource("nxos:nxos/evpnVniRouteTarget:EvpnVniRouteTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEvpnVniRouteTarget gets an existing EvpnVniRouteTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEvpnVniRouteTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EvpnVniRouteTargetState, opts ...pulumi.ResourceOption) (*EvpnVniRouteTarget, error) {
	var resource EvpnVniRouteTarget
	err := ctx.ReadResource("nxos:nxos/evpnVniRouteTarget:EvpnVniRouteTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EvpnVniRouteTarget resources.
type evpnVniRouteTargetState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route Target direction. - Choices: `import`, `export`
	Direction *string `pulumi:"direction"`
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap *string `pulumi:"encap"`
	// Route Target in NX-OS DME format.
	RouteTarget *string `pulumi:"routeTarget"`
}

type EvpnVniRouteTargetState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route Target direction. - Choices: `import`, `export`
	Direction pulumi.StringPtrInput
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap pulumi.StringPtrInput
	// Route Target in NX-OS DME format.
	RouteTarget pulumi.StringPtrInput
}

func (EvpnVniRouteTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*evpnVniRouteTargetState)(nil)).Elem()
}

type evpnVniRouteTargetArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route Target direction. - Choices: `import`, `export`
	Direction string `pulumi:"direction"`
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap string `pulumi:"encap"`
	// Route Target in NX-OS DME format.
	RouteTarget string `pulumi:"routeTarget"`
}

// The set of arguments for constructing a EvpnVniRouteTarget resource.
type EvpnVniRouteTargetArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route Target direction. - Choices: `import`, `export`
	Direction pulumi.StringInput
	// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
	Encap pulumi.StringInput
	// Route Target in NX-OS DME format.
	RouteTarget pulumi.StringInput
}

func (EvpnVniRouteTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*evpnVniRouteTargetArgs)(nil)).Elem()
}

type EvpnVniRouteTargetInput interface {
	pulumi.Input

	ToEvpnVniRouteTargetOutput() EvpnVniRouteTargetOutput
	ToEvpnVniRouteTargetOutputWithContext(ctx context.Context) EvpnVniRouteTargetOutput
}

func (*EvpnVniRouteTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**EvpnVniRouteTarget)(nil)).Elem()
}

func (i *EvpnVniRouteTarget) ToEvpnVniRouteTargetOutput() EvpnVniRouteTargetOutput {
	return i.ToEvpnVniRouteTargetOutputWithContext(context.Background())
}

func (i *EvpnVniRouteTarget) ToEvpnVniRouteTargetOutputWithContext(ctx context.Context) EvpnVniRouteTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnVniRouteTargetOutput)
}

func (i *EvpnVniRouteTarget) ToOutput(ctx context.Context) pulumix.Output[*EvpnVniRouteTarget] {
	return pulumix.Output[*EvpnVniRouteTarget]{
		OutputState: i.ToEvpnVniRouteTargetOutputWithContext(ctx).OutputState,
	}
}

// EvpnVniRouteTargetArrayInput is an input type that accepts EvpnVniRouteTargetArray and EvpnVniRouteTargetArrayOutput values.
// You can construct a concrete instance of `EvpnVniRouteTargetArrayInput` via:
//
//	EvpnVniRouteTargetArray{ EvpnVniRouteTargetArgs{...} }
type EvpnVniRouteTargetArrayInput interface {
	pulumi.Input

	ToEvpnVniRouteTargetArrayOutput() EvpnVniRouteTargetArrayOutput
	ToEvpnVniRouteTargetArrayOutputWithContext(context.Context) EvpnVniRouteTargetArrayOutput
}

type EvpnVniRouteTargetArray []EvpnVniRouteTargetInput

func (EvpnVniRouteTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EvpnVniRouteTarget)(nil)).Elem()
}

func (i EvpnVniRouteTargetArray) ToEvpnVniRouteTargetArrayOutput() EvpnVniRouteTargetArrayOutput {
	return i.ToEvpnVniRouteTargetArrayOutputWithContext(context.Background())
}

func (i EvpnVniRouteTargetArray) ToEvpnVniRouteTargetArrayOutputWithContext(ctx context.Context) EvpnVniRouteTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnVniRouteTargetArrayOutput)
}

func (i EvpnVniRouteTargetArray) ToOutput(ctx context.Context) pulumix.Output[[]*EvpnVniRouteTarget] {
	return pulumix.Output[[]*EvpnVniRouteTarget]{
		OutputState: i.ToEvpnVniRouteTargetArrayOutputWithContext(ctx).OutputState,
	}
}

// EvpnVniRouteTargetMapInput is an input type that accepts EvpnVniRouteTargetMap and EvpnVniRouteTargetMapOutput values.
// You can construct a concrete instance of `EvpnVniRouteTargetMapInput` via:
//
//	EvpnVniRouteTargetMap{ "key": EvpnVniRouteTargetArgs{...} }
type EvpnVniRouteTargetMapInput interface {
	pulumi.Input

	ToEvpnVniRouteTargetMapOutput() EvpnVniRouteTargetMapOutput
	ToEvpnVniRouteTargetMapOutputWithContext(context.Context) EvpnVniRouteTargetMapOutput
}

type EvpnVniRouteTargetMap map[string]EvpnVniRouteTargetInput

func (EvpnVniRouteTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EvpnVniRouteTarget)(nil)).Elem()
}

func (i EvpnVniRouteTargetMap) ToEvpnVniRouteTargetMapOutput() EvpnVniRouteTargetMapOutput {
	return i.ToEvpnVniRouteTargetMapOutputWithContext(context.Background())
}

func (i EvpnVniRouteTargetMap) ToEvpnVniRouteTargetMapOutputWithContext(ctx context.Context) EvpnVniRouteTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvpnVniRouteTargetMapOutput)
}

func (i EvpnVniRouteTargetMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*EvpnVniRouteTarget] {
	return pulumix.Output[map[string]*EvpnVniRouteTarget]{
		OutputState: i.ToEvpnVniRouteTargetMapOutputWithContext(ctx).OutputState,
	}
}

type EvpnVniRouteTargetOutput struct{ *pulumi.OutputState }

func (EvpnVniRouteTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EvpnVniRouteTarget)(nil)).Elem()
}

func (o EvpnVniRouteTargetOutput) ToEvpnVniRouteTargetOutput() EvpnVniRouteTargetOutput {
	return o
}

func (o EvpnVniRouteTargetOutput) ToEvpnVniRouteTargetOutputWithContext(ctx context.Context) EvpnVniRouteTargetOutput {
	return o
}

func (o EvpnVniRouteTargetOutput) ToOutput(ctx context.Context) pulumix.Output[*EvpnVniRouteTarget] {
	return pulumix.Output[*EvpnVniRouteTarget]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o EvpnVniRouteTargetOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EvpnVniRouteTarget) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Route Target direction. - Choices: `import`, `export`
func (o EvpnVniRouteTargetOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *EvpnVniRouteTarget) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// Encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
func (o EvpnVniRouteTargetOutput) Encap() pulumi.StringOutput {
	return o.ApplyT(func(v *EvpnVniRouteTarget) pulumi.StringOutput { return v.Encap }).(pulumi.StringOutput)
}

// Route Target in NX-OS DME format.
func (o EvpnVniRouteTargetOutput) RouteTarget() pulumi.StringOutput {
	return o.ApplyT(func(v *EvpnVniRouteTarget) pulumi.StringOutput { return v.RouteTarget }).(pulumi.StringOutput)
}

type EvpnVniRouteTargetArrayOutput struct{ *pulumi.OutputState }

func (EvpnVniRouteTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EvpnVniRouteTarget)(nil)).Elem()
}

func (o EvpnVniRouteTargetArrayOutput) ToEvpnVniRouteTargetArrayOutput() EvpnVniRouteTargetArrayOutput {
	return o
}

func (o EvpnVniRouteTargetArrayOutput) ToEvpnVniRouteTargetArrayOutputWithContext(ctx context.Context) EvpnVniRouteTargetArrayOutput {
	return o
}

func (o EvpnVniRouteTargetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*EvpnVniRouteTarget] {
	return pulumix.Output[[]*EvpnVniRouteTarget]{
		OutputState: o.OutputState,
	}
}

func (o EvpnVniRouteTargetArrayOutput) Index(i pulumi.IntInput) EvpnVniRouteTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EvpnVniRouteTarget {
		return vs[0].([]*EvpnVniRouteTarget)[vs[1].(int)]
	}).(EvpnVniRouteTargetOutput)
}

type EvpnVniRouteTargetMapOutput struct{ *pulumi.OutputState }

func (EvpnVniRouteTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EvpnVniRouteTarget)(nil)).Elem()
}

func (o EvpnVniRouteTargetMapOutput) ToEvpnVniRouteTargetMapOutput() EvpnVniRouteTargetMapOutput {
	return o
}

func (o EvpnVniRouteTargetMapOutput) ToEvpnVniRouteTargetMapOutputWithContext(ctx context.Context) EvpnVniRouteTargetMapOutput {
	return o
}

func (o EvpnVniRouteTargetMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*EvpnVniRouteTarget] {
	return pulumix.Output[map[string]*EvpnVniRouteTarget]{
		OutputState: o.OutputState,
	}
}

func (o EvpnVniRouteTargetMapOutput) MapIndex(k pulumi.StringInput) EvpnVniRouteTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EvpnVniRouteTarget {
		return vs[0].(map[string]*EvpnVniRouteTarget)[vs[1].(string)]
	}).(EvpnVniRouteTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnVniRouteTargetInput)(nil)).Elem(), &EvpnVniRouteTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnVniRouteTargetArrayInput)(nil)).Elem(), EvpnVniRouteTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EvpnVniRouteTargetMapInput)(nil)).Elem(), EvpnVniRouteTargetMap{})
	pulumi.RegisterOutputType(EvpnVniRouteTargetOutput{})
	pulumi.RegisterOutputType(EvpnVniRouteTargetArrayOutput{})
	pulumi.RegisterOutputType(EvpnVniRouteTargetMapOutput{})
}
