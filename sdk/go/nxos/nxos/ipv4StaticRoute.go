// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Ipv4StaticRoute struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// List of next hops.
	NextHops Ipv4StaticRouteNextHopArrayOutput `pulumi:"nextHops"`
	// Prefix.
	Prefix pulumi.StringOutput `pulumi:"prefix"`
	// VRF name.
	VrfName pulumi.StringOutput `pulumi:"vrfName"`
}

// NewIpv4StaticRoute registers a new resource with the given unique name, arguments, and options.
func NewIpv4StaticRoute(ctx *pulumi.Context,
	name string, args *Ipv4StaticRouteArgs, opts ...pulumi.ResourceOption) (*Ipv4StaticRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NextHops == nil {
		return nil, errors.New("invalid value for required argument 'NextHops'")
	}
	if args.Prefix == nil {
		return nil, errors.New("invalid value for required argument 'Prefix'")
	}
	if args.VrfName == nil {
		return nil, errors.New("invalid value for required argument 'VrfName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipv4StaticRoute
	err := ctx.RegisterResource("nxos:nxos/ipv4StaticRoute:Ipv4StaticRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv4StaticRoute gets an existing Ipv4StaticRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv4StaticRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv4StaticRouteState, opts ...pulumi.ResourceOption) (*Ipv4StaticRoute, error) {
	var resource Ipv4StaticRoute
	err := ctx.ReadResource("nxos:nxos/ipv4StaticRoute:Ipv4StaticRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv4StaticRoute resources.
type ipv4StaticRouteState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// List of next hops.
	NextHops []Ipv4StaticRouteNextHop `pulumi:"nextHops"`
	// Prefix.
	Prefix *string `pulumi:"prefix"`
	// VRF name.
	VrfName *string `pulumi:"vrfName"`
}

type Ipv4StaticRouteState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// List of next hops.
	NextHops Ipv4StaticRouteNextHopArrayInput
	// Prefix.
	Prefix pulumi.StringPtrInput
	// VRF name.
	VrfName pulumi.StringPtrInput
}

func (Ipv4StaticRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4StaticRouteState)(nil)).Elem()
}

type ipv4StaticRouteArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// List of next hops.
	NextHops []Ipv4StaticRouteNextHop `pulumi:"nextHops"`
	// Prefix.
	Prefix string `pulumi:"prefix"`
	// VRF name.
	VrfName string `pulumi:"vrfName"`
}

// The set of arguments for constructing a Ipv4StaticRoute resource.
type Ipv4StaticRouteArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// List of next hops.
	NextHops Ipv4StaticRouteNextHopArrayInput
	// Prefix.
	Prefix pulumi.StringInput
	// VRF name.
	VrfName pulumi.StringInput
}

func (Ipv4StaticRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4StaticRouteArgs)(nil)).Elem()
}

type Ipv4StaticRouteInput interface {
	pulumi.Input

	ToIpv4StaticRouteOutput() Ipv4StaticRouteOutput
	ToIpv4StaticRouteOutputWithContext(ctx context.Context) Ipv4StaticRouteOutput
}

func (*Ipv4StaticRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4StaticRoute)(nil)).Elem()
}

func (i *Ipv4StaticRoute) ToIpv4StaticRouteOutput() Ipv4StaticRouteOutput {
	return i.ToIpv4StaticRouteOutputWithContext(context.Background())
}

func (i *Ipv4StaticRoute) ToIpv4StaticRouteOutputWithContext(ctx context.Context) Ipv4StaticRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4StaticRouteOutput)
}

func (i *Ipv4StaticRoute) ToOutput(ctx context.Context) pulumix.Output[*Ipv4StaticRoute] {
	return pulumix.Output[*Ipv4StaticRoute]{
		OutputState: i.ToIpv4StaticRouteOutputWithContext(ctx).OutputState,
	}
}

// Ipv4StaticRouteArrayInput is an input type that accepts Ipv4StaticRouteArray and Ipv4StaticRouteArrayOutput values.
// You can construct a concrete instance of `Ipv4StaticRouteArrayInput` via:
//
//	Ipv4StaticRouteArray{ Ipv4StaticRouteArgs{...} }
type Ipv4StaticRouteArrayInput interface {
	pulumi.Input

	ToIpv4StaticRouteArrayOutput() Ipv4StaticRouteArrayOutput
	ToIpv4StaticRouteArrayOutputWithContext(context.Context) Ipv4StaticRouteArrayOutput
}

type Ipv4StaticRouteArray []Ipv4StaticRouteInput

func (Ipv4StaticRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4StaticRoute)(nil)).Elem()
}

func (i Ipv4StaticRouteArray) ToIpv4StaticRouteArrayOutput() Ipv4StaticRouteArrayOutput {
	return i.ToIpv4StaticRouteArrayOutputWithContext(context.Background())
}

func (i Ipv4StaticRouteArray) ToIpv4StaticRouteArrayOutputWithContext(ctx context.Context) Ipv4StaticRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4StaticRouteArrayOutput)
}

func (i Ipv4StaticRouteArray) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4StaticRoute] {
	return pulumix.Output[[]*Ipv4StaticRoute]{
		OutputState: i.ToIpv4StaticRouteArrayOutputWithContext(ctx).OutputState,
	}
}

// Ipv4StaticRouteMapInput is an input type that accepts Ipv4StaticRouteMap and Ipv4StaticRouteMapOutput values.
// You can construct a concrete instance of `Ipv4StaticRouteMapInput` via:
//
//	Ipv4StaticRouteMap{ "key": Ipv4StaticRouteArgs{...} }
type Ipv4StaticRouteMapInput interface {
	pulumi.Input

	ToIpv4StaticRouteMapOutput() Ipv4StaticRouteMapOutput
	ToIpv4StaticRouteMapOutputWithContext(context.Context) Ipv4StaticRouteMapOutput
}

type Ipv4StaticRouteMap map[string]Ipv4StaticRouteInput

func (Ipv4StaticRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4StaticRoute)(nil)).Elem()
}

func (i Ipv4StaticRouteMap) ToIpv4StaticRouteMapOutput() Ipv4StaticRouteMapOutput {
	return i.ToIpv4StaticRouteMapOutputWithContext(context.Background())
}

func (i Ipv4StaticRouteMap) ToIpv4StaticRouteMapOutputWithContext(ctx context.Context) Ipv4StaticRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4StaticRouteMapOutput)
}

func (i Ipv4StaticRouteMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4StaticRoute] {
	return pulumix.Output[map[string]*Ipv4StaticRoute]{
		OutputState: i.ToIpv4StaticRouteMapOutputWithContext(ctx).OutputState,
	}
}

type Ipv4StaticRouteOutput struct{ *pulumi.OutputState }

func (Ipv4StaticRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4StaticRoute)(nil)).Elem()
}

func (o Ipv4StaticRouteOutput) ToIpv4StaticRouteOutput() Ipv4StaticRouteOutput {
	return o
}

func (o Ipv4StaticRouteOutput) ToIpv4StaticRouteOutputWithContext(ctx context.Context) Ipv4StaticRouteOutput {
	return o
}

func (o Ipv4StaticRouteOutput) ToOutput(ctx context.Context) pulumix.Output[*Ipv4StaticRoute] {
	return pulumix.Output[*Ipv4StaticRoute]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o Ipv4StaticRouteOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4StaticRoute) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// List of next hops.
func (o Ipv4StaticRouteOutput) NextHops() Ipv4StaticRouteNextHopArrayOutput {
	return o.ApplyT(func(v *Ipv4StaticRoute) Ipv4StaticRouteNextHopArrayOutput { return v.NextHops }).(Ipv4StaticRouteNextHopArrayOutput)
}

// Prefix.
func (o Ipv4StaticRouteOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4StaticRoute) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

// VRF name.
func (o Ipv4StaticRouteOutput) VrfName() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4StaticRoute) pulumi.StringOutput { return v.VrfName }).(pulumi.StringOutput)
}

type Ipv4StaticRouteArrayOutput struct{ *pulumi.OutputState }

func (Ipv4StaticRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4StaticRoute)(nil)).Elem()
}

func (o Ipv4StaticRouteArrayOutput) ToIpv4StaticRouteArrayOutput() Ipv4StaticRouteArrayOutput {
	return o
}

func (o Ipv4StaticRouteArrayOutput) ToIpv4StaticRouteArrayOutputWithContext(ctx context.Context) Ipv4StaticRouteArrayOutput {
	return o
}

func (o Ipv4StaticRouteArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4StaticRoute] {
	return pulumix.Output[[]*Ipv4StaticRoute]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4StaticRouteArrayOutput) Index(i pulumi.IntInput) Ipv4StaticRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv4StaticRoute {
		return vs[0].([]*Ipv4StaticRoute)[vs[1].(int)]
	}).(Ipv4StaticRouteOutput)
}

type Ipv4StaticRouteMapOutput struct{ *pulumi.OutputState }

func (Ipv4StaticRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4StaticRoute)(nil)).Elem()
}

func (o Ipv4StaticRouteMapOutput) ToIpv4StaticRouteMapOutput() Ipv4StaticRouteMapOutput {
	return o
}

func (o Ipv4StaticRouteMapOutput) ToIpv4StaticRouteMapOutputWithContext(ctx context.Context) Ipv4StaticRouteMapOutput {
	return o
}

func (o Ipv4StaticRouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4StaticRoute] {
	return pulumix.Output[map[string]*Ipv4StaticRoute]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4StaticRouteMapOutput) MapIndex(k pulumi.StringInput) Ipv4StaticRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv4StaticRoute {
		return vs[0].(map[string]*Ipv4StaticRoute)[vs[1].(string)]
	}).(Ipv4StaticRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4StaticRouteInput)(nil)).Elem(), &Ipv4StaticRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4StaticRouteArrayInput)(nil)).Elem(), Ipv4StaticRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4StaticRouteMapInput)(nil)).Elem(), Ipv4StaticRouteMap{})
	pulumi.RegisterOutputType(Ipv4StaticRouteOutput{})
	pulumi.RegisterOutputType(Ipv4StaticRouteArrayOutput{})
	pulumi.RegisterOutputType(Ipv4StaticRouteMapOutput{})
}
