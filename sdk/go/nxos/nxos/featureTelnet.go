// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FeatureTelnet struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureTelnet registers a new resource with the given unique name, arguments, and options.
func NewFeatureTelnet(ctx *pulumi.Context,
	name string, args *FeatureTelnetArgs, opts ...pulumi.ResourceOption) (*FeatureTelnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureTelnet
	err := ctx.RegisterResource("nxos:nxos/featureTelnet:FeatureTelnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureTelnet gets an existing FeatureTelnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureTelnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureTelnetState, opts ...pulumi.ResourceOption) (*FeatureTelnet, error) {
	var resource FeatureTelnet
	err := ctx.ReadResource("nxos:nxos/featureTelnet:FeatureTelnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureTelnet resources.
type featureTelnetState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureTelnetState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureTelnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureTelnetState)(nil)).Elem()
}

type featureTelnetArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureTelnet resource.
type FeatureTelnetArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureTelnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureTelnetArgs)(nil)).Elem()
}

type FeatureTelnetInput interface {
	pulumi.Input

	ToFeatureTelnetOutput() FeatureTelnetOutput
	ToFeatureTelnetOutputWithContext(ctx context.Context) FeatureTelnetOutput
}

func (*FeatureTelnet) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureTelnet)(nil)).Elem()
}

func (i *FeatureTelnet) ToFeatureTelnetOutput() FeatureTelnetOutput {
	return i.ToFeatureTelnetOutputWithContext(context.Background())
}

func (i *FeatureTelnet) ToFeatureTelnetOutputWithContext(ctx context.Context) FeatureTelnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureTelnetOutput)
}

func (i *FeatureTelnet) ToOutput(ctx context.Context) pulumix.Output[*FeatureTelnet] {
	return pulumix.Output[*FeatureTelnet]{
		OutputState: i.ToFeatureTelnetOutputWithContext(ctx).OutputState,
	}
}

// FeatureTelnetArrayInput is an input type that accepts FeatureTelnetArray and FeatureTelnetArrayOutput values.
// You can construct a concrete instance of `FeatureTelnetArrayInput` via:
//
//	FeatureTelnetArray{ FeatureTelnetArgs{...} }
type FeatureTelnetArrayInput interface {
	pulumi.Input

	ToFeatureTelnetArrayOutput() FeatureTelnetArrayOutput
	ToFeatureTelnetArrayOutputWithContext(context.Context) FeatureTelnetArrayOutput
}

type FeatureTelnetArray []FeatureTelnetInput

func (FeatureTelnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureTelnet)(nil)).Elem()
}

func (i FeatureTelnetArray) ToFeatureTelnetArrayOutput() FeatureTelnetArrayOutput {
	return i.ToFeatureTelnetArrayOutputWithContext(context.Background())
}

func (i FeatureTelnetArray) ToFeatureTelnetArrayOutputWithContext(ctx context.Context) FeatureTelnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureTelnetArrayOutput)
}

func (i FeatureTelnetArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureTelnet] {
	return pulumix.Output[[]*FeatureTelnet]{
		OutputState: i.ToFeatureTelnetArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureTelnetMapInput is an input type that accepts FeatureTelnetMap and FeatureTelnetMapOutput values.
// You can construct a concrete instance of `FeatureTelnetMapInput` via:
//
//	FeatureTelnetMap{ "key": FeatureTelnetArgs{...} }
type FeatureTelnetMapInput interface {
	pulumi.Input

	ToFeatureTelnetMapOutput() FeatureTelnetMapOutput
	ToFeatureTelnetMapOutputWithContext(context.Context) FeatureTelnetMapOutput
}

type FeatureTelnetMap map[string]FeatureTelnetInput

func (FeatureTelnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureTelnet)(nil)).Elem()
}

func (i FeatureTelnetMap) ToFeatureTelnetMapOutput() FeatureTelnetMapOutput {
	return i.ToFeatureTelnetMapOutputWithContext(context.Background())
}

func (i FeatureTelnetMap) ToFeatureTelnetMapOutputWithContext(ctx context.Context) FeatureTelnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureTelnetMapOutput)
}

func (i FeatureTelnetMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureTelnet] {
	return pulumix.Output[map[string]*FeatureTelnet]{
		OutputState: i.ToFeatureTelnetMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureTelnetOutput struct{ *pulumi.OutputState }

func (FeatureTelnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureTelnet)(nil)).Elem()
}

func (o FeatureTelnetOutput) ToFeatureTelnetOutput() FeatureTelnetOutput {
	return o
}

func (o FeatureTelnetOutput) ToFeatureTelnetOutputWithContext(ctx context.Context) FeatureTelnetOutput {
	return o
}

func (o FeatureTelnetOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureTelnet] {
	return pulumix.Output[*FeatureTelnet]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureTelnetOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureTelnet) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureTelnetOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureTelnet) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureTelnetArrayOutput struct{ *pulumi.OutputState }

func (FeatureTelnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureTelnet)(nil)).Elem()
}

func (o FeatureTelnetArrayOutput) ToFeatureTelnetArrayOutput() FeatureTelnetArrayOutput {
	return o
}

func (o FeatureTelnetArrayOutput) ToFeatureTelnetArrayOutputWithContext(ctx context.Context) FeatureTelnetArrayOutput {
	return o
}

func (o FeatureTelnetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureTelnet] {
	return pulumix.Output[[]*FeatureTelnet]{
		OutputState: o.OutputState,
	}
}

func (o FeatureTelnetArrayOutput) Index(i pulumi.IntInput) FeatureTelnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureTelnet {
		return vs[0].([]*FeatureTelnet)[vs[1].(int)]
	}).(FeatureTelnetOutput)
}

type FeatureTelnetMapOutput struct{ *pulumi.OutputState }

func (FeatureTelnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureTelnet)(nil)).Elem()
}

func (o FeatureTelnetMapOutput) ToFeatureTelnetMapOutput() FeatureTelnetMapOutput {
	return o
}

func (o FeatureTelnetMapOutput) ToFeatureTelnetMapOutputWithContext(ctx context.Context) FeatureTelnetMapOutput {
	return o
}

func (o FeatureTelnetMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureTelnet] {
	return pulumix.Output[map[string]*FeatureTelnet]{
		OutputState: o.OutputState,
	}
}

func (o FeatureTelnetMapOutput) MapIndex(k pulumi.StringInput) FeatureTelnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureTelnet {
		return vs[0].(map[string]*FeatureTelnet)[vs[1].(string)]
	}).(FeatureTelnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureTelnetInput)(nil)).Elem(), &FeatureTelnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureTelnetArrayInput)(nil)).Elem(), FeatureTelnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureTelnetMapInput)(nil)).Elem(), FeatureTelnetMap{})
	pulumi.RegisterOutputType(FeatureTelnetOutput{})
	pulumi.RegisterOutputType(FeatureTelnetArrayOutput{})
	pulumi.RegisterOutputType(FeatureTelnetMapOutput{})
}
