// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type NveVniContainer struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewNveVniContainer registers a new resource with the given unique name, arguments, and options.
func NewNveVniContainer(ctx *pulumi.Context,
	name string, args *NveVniContainerArgs, opts ...pulumi.ResourceOption) (*NveVniContainer, error) {
	if args == nil {
		args = &NveVniContainerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NveVniContainer
	err := ctx.RegisterResource("nxos:nxos/nveVniContainer:NveVniContainer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNveVniContainer gets an existing NveVniContainer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNveVniContainer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NveVniContainerState, opts ...pulumi.ResourceOption) (*NveVniContainer, error) {
	var resource NveVniContainer
	err := ctx.ReadResource("nxos:nxos/nveVniContainer:NveVniContainer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NveVniContainer resources.
type nveVniContainerState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type NveVniContainerState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (NveVniContainerState) ElementType() reflect.Type {
	return reflect.TypeOf((*nveVniContainerState)(nil)).Elem()
}

type nveVniContainerArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a NveVniContainer resource.
type NveVniContainerArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (NveVniContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nveVniContainerArgs)(nil)).Elem()
}

type NveVniContainerInput interface {
	pulumi.Input

	ToNveVniContainerOutput() NveVniContainerOutput
	ToNveVniContainerOutputWithContext(ctx context.Context) NveVniContainerOutput
}

func (*NveVniContainer) ElementType() reflect.Type {
	return reflect.TypeOf((**NveVniContainer)(nil)).Elem()
}

func (i *NveVniContainer) ToNveVniContainerOutput() NveVniContainerOutput {
	return i.ToNveVniContainerOutputWithContext(context.Background())
}

func (i *NveVniContainer) ToNveVniContainerOutputWithContext(ctx context.Context) NveVniContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NveVniContainerOutput)
}

func (i *NveVniContainer) ToOutput(ctx context.Context) pulumix.Output[*NveVniContainer] {
	return pulumix.Output[*NveVniContainer]{
		OutputState: i.ToNveVniContainerOutputWithContext(ctx).OutputState,
	}
}

// NveVniContainerArrayInput is an input type that accepts NveVniContainerArray and NveVniContainerArrayOutput values.
// You can construct a concrete instance of `NveVniContainerArrayInput` via:
//
//	NveVniContainerArray{ NveVniContainerArgs{...} }
type NveVniContainerArrayInput interface {
	pulumi.Input

	ToNveVniContainerArrayOutput() NveVniContainerArrayOutput
	ToNveVniContainerArrayOutputWithContext(context.Context) NveVniContainerArrayOutput
}

type NveVniContainerArray []NveVniContainerInput

func (NveVniContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NveVniContainer)(nil)).Elem()
}

func (i NveVniContainerArray) ToNveVniContainerArrayOutput() NveVniContainerArrayOutput {
	return i.ToNveVniContainerArrayOutputWithContext(context.Background())
}

func (i NveVniContainerArray) ToNveVniContainerArrayOutputWithContext(ctx context.Context) NveVniContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NveVniContainerArrayOutput)
}

func (i NveVniContainerArray) ToOutput(ctx context.Context) pulumix.Output[[]*NveVniContainer] {
	return pulumix.Output[[]*NveVniContainer]{
		OutputState: i.ToNveVniContainerArrayOutputWithContext(ctx).OutputState,
	}
}

// NveVniContainerMapInput is an input type that accepts NveVniContainerMap and NveVniContainerMapOutput values.
// You can construct a concrete instance of `NveVniContainerMapInput` via:
//
//	NveVniContainerMap{ "key": NveVniContainerArgs{...} }
type NveVniContainerMapInput interface {
	pulumi.Input

	ToNveVniContainerMapOutput() NveVniContainerMapOutput
	ToNveVniContainerMapOutputWithContext(context.Context) NveVniContainerMapOutput
}

type NveVniContainerMap map[string]NveVniContainerInput

func (NveVniContainerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NveVniContainer)(nil)).Elem()
}

func (i NveVniContainerMap) ToNveVniContainerMapOutput() NveVniContainerMapOutput {
	return i.ToNveVniContainerMapOutputWithContext(context.Background())
}

func (i NveVniContainerMap) ToNveVniContainerMapOutputWithContext(ctx context.Context) NveVniContainerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NveVniContainerMapOutput)
}

func (i NveVniContainerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NveVniContainer] {
	return pulumix.Output[map[string]*NveVniContainer]{
		OutputState: i.ToNveVniContainerMapOutputWithContext(ctx).OutputState,
	}
}

type NveVniContainerOutput struct{ *pulumi.OutputState }

func (NveVniContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NveVniContainer)(nil)).Elem()
}

func (o NveVniContainerOutput) ToNveVniContainerOutput() NveVniContainerOutput {
	return o
}

func (o NveVniContainerOutput) ToNveVniContainerOutputWithContext(ctx context.Context) NveVniContainerOutput {
	return o
}

func (o NveVniContainerOutput) ToOutput(ctx context.Context) pulumix.Output[*NveVniContainer] {
	return pulumix.Output[*NveVniContainer]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o NveVniContainerOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NveVniContainer) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type NveVniContainerArrayOutput struct{ *pulumi.OutputState }

func (NveVniContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NveVniContainer)(nil)).Elem()
}

func (o NveVniContainerArrayOutput) ToNveVniContainerArrayOutput() NveVniContainerArrayOutput {
	return o
}

func (o NveVniContainerArrayOutput) ToNveVniContainerArrayOutputWithContext(ctx context.Context) NveVniContainerArrayOutput {
	return o
}

func (o NveVniContainerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NveVniContainer] {
	return pulumix.Output[[]*NveVniContainer]{
		OutputState: o.OutputState,
	}
}

func (o NveVniContainerArrayOutput) Index(i pulumi.IntInput) NveVniContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NveVniContainer {
		return vs[0].([]*NveVniContainer)[vs[1].(int)]
	}).(NveVniContainerOutput)
}

type NveVniContainerMapOutput struct{ *pulumi.OutputState }

func (NveVniContainerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NveVniContainer)(nil)).Elem()
}

func (o NveVniContainerMapOutput) ToNveVniContainerMapOutput() NveVniContainerMapOutput {
	return o
}

func (o NveVniContainerMapOutput) ToNveVniContainerMapOutputWithContext(ctx context.Context) NveVniContainerMapOutput {
	return o
}

func (o NveVniContainerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NveVniContainer] {
	return pulumix.Output[map[string]*NveVniContainer]{
		OutputState: o.OutputState,
	}
}

func (o NveVniContainerMapOutput) MapIndex(k pulumi.StringInput) NveVniContainerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NveVniContainer {
		return vs[0].(map[string]*NveVniContainer)[vs[1].(string)]
	}).(NveVniContainerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NveVniContainerInput)(nil)).Elem(), &NveVniContainer{})
	pulumi.RegisterInputType(reflect.TypeOf((*NveVniContainerArrayInput)(nil)).Elem(), NveVniContainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NveVniContainerMapInput)(nil)).Elem(), NveVniContainerMap{})
	pulumi.RegisterOutputType(NveVniContainerOutput{})
	pulumi.RegisterOutputType(NveVniContainerArrayOutput{})
	pulumi.RegisterOutputType(NveVniContainerMapOutput{})
}
