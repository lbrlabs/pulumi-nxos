// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VrfRouting struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
	RouteDistinguisher pulumi.StringOutput `pulumi:"routeDistinguisher"`
	// VRF name.
	Vrf pulumi.StringOutput `pulumi:"vrf"`
}

// NewVrfRouting registers a new resource with the given unique name, arguments, and options.
func NewVrfRouting(ctx *pulumi.Context,
	name string, args *VrfRoutingArgs, opts ...pulumi.ResourceOption) (*VrfRouting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Vrf == nil {
		return nil, errors.New("invalid value for required argument 'Vrf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VrfRouting
	err := ctx.RegisterResource("nxos:nxos/vrfRouting:VrfRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrfRouting gets an existing VrfRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrfRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrfRoutingState, opts ...pulumi.ResourceOption) (*VrfRouting, error) {
	var resource VrfRouting
	err := ctx.ReadResource("nxos:nxos/vrfRouting:VrfRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrfRouting resources.
type vrfRoutingState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
	RouteDistinguisher *string `pulumi:"routeDistinguisher"`
	// VRF name.
	Vrf *string `pulumi:"vrf"`
}

type VrfRoutingState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
	RouteDistinguisher pulumi.StringPtrInput
	// VRF name.
	Vrf pulumi.StringPtrInput
}

func (VrfRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrfRoutingState)(nil)).Elem()
}

type vrfRoutingArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
	RouteDistinguisher *string `pulumi:"routeDistinguisher"`
	// VRF name.
	Vrf string `pulumi:"vrf"`
}

// The set of arguments for constructing a VrfRouting resource.
type VrfRoutingArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
	RouteDistinguisher pulumi.StringPtrInput
	// VRF name.
	Vrf pulumi.StringInput
}

func (VrfRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrfRoutingArgs)(nil)).Elem()
}

type VrfRoutingInput interface {
	pulumi.Input

	ToVrfRoutingOutput() VrfRoutingOutput
	ToVrfRoutingOutputWithContext(ctx context.Context) VrfRoutingOutput
}

func (*VrfRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**VrfRouting)(nil)).Elem()
}

func (i *VrfRouting) ToVrfRoutingOutput() VrfRoutingOutput {
	return i.ToVrfRoutingOutputWithContext(context.Background())
}

func (i *VrfRouting) ToVrfRoutingOutputWithContext(ctx context.Context) VrfRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRoutingOutput)
}

func (i *VrfRouting) ToOutput(ctx context.Context) pulumix.Output[*VrfRouting] {
	return pulumix.Output[*VrfRouting]{
		OutputState: i.ToVrfRoutingOutputWithContext(ctx).OutputState,
	}
}

// VrfRoutingArrayInput is an input type that accepts VrfRoutingArray and VrfRoutingArrayOutput values.
// You can construct a concrete instance of `VrfRoutingArrayInput` via:
//
//	VrfRoutingArray{ VrfRoutingArgs{...} }
type VrfRoutingArrayInput interface {
	pulumi.Input

	ToVrfRoutingArrayOutput() VrfRoutingArrayOutput
	ToVrfRoutingArrayOutputWithContext(context.Context) VrfRoutingArrayOutput
}

type VrfRoutingArray []VrfRoutingInput

func (VrfRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrfRouting)(nil)).Elem()
}

func (i VrfRoutingArray) ToVrfRoutingArrayOutput() VrfRoutingArrayOutput {
	return i.ToVrfRoutingArrayOutputWithContext(context.Background())
}

func (i VrfRoutingArray) ToVrfRoutingArrayOutputWithContext(ctx context.Context) VrfRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRoutingArrayOutput)
}

func (i VrfRoutingArray) ToOutput(ctx context.Context) pulumix.Output[[]*VrfRouting] {
	return pulumix.Output[[]*VrfRouting]{
		OutputState: i.ToVrfRoutingArrayOutputWithContext(ctx).OutputState,
	}
}

// VrfRoutingMapInput is an input type that accepts VrfRoutingMap and VrfRoutingMapOutput values.
// You can construct a concrete instance of `VrfRoutingMapInput` via:
//
//	VrfRoutingMap{ "key": VrfRoutingArgs{...} }
type VrfRoutingMapInput interface {
	pulumi.Input

	ToVrfRoutingMapOutput() VrfRoutingMapOutput
	ToVrfRoutingMapOutputWithContext(context.Context) VrfRoutingMapOutput
}

type VrfRoutingMap map[string]VrfRoutingInput

func (VrfRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrfRouting)(nil)).Elem()
}

func (i VrfRoutingMap) ToVrfRoutingMapOutput() VrfRoutingMapOutput {
	return i.ToVrfRoutingMapOutputWithContext(context.Background())
}

func (i VrfRoutingMap) ToVrfRoutingMapOutputWithContext(ctx context.Context) VrfRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRoutingMapOutput)
}

func (i VrfRoutingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VrfRouting] {
	return pulumix.Output[map[string]*VrfRouting]{
		OutputState: i.ToVrfRoutingMapOutputWithContext(ctx).OutputState,
	}
}

type VrfRoutingOutput struct{ *pulumi.OutputState }

func (VrfRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrfRouting)(nil)).Elem()
}

func (o VrfRoutingOutput) ToVrfRoutingOutput() VrfRoutingOutput {
	return o
}

func (o VrfRoutingOutput) ToVrfRoutingOutputWithContext(ctx context.Context) VrfRoutingOutput {
	return o
}

func (o VrfRoutingOutput) ToOutput(ctx context.Context) pulumix.Output[*VrfRouting] {
	return pulumix.Output[*VrfRouting]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o VrfRoutingOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VrfRouting) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Route Distinguisher value in NX-OS DME format. - Default value: `unknown:unknown:0:0`
func (o VrfRoutingOutput) RouteDistinguisher() pulumi.StringOutput {
	return o.ApplyT(func(v *VrfRouting) pulumi.StringOutput { return v.RouteDistinguisher }).(pulumi.StringOutput)
}

// VRF name.
func (o VrfRoutingOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v *VrfRouting) pulumi.StringOutput { return v.Vrf }).(pulumi.StringOutput)
}

type VrfRoutingArrayOutput struct{ *pulumi.OutputState }

func (VrfRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrfRouting)(nil)).Elem()
}

func (o VrfRoutingArrayOutput) ToVrfRoutingArrayOutput() VrfRoutingArrayOutput {
	return o
}

func (o VrfRoutingArrayOutput) ToVrfRoutingArrayOutputWithContext(ctx context.Context) VrfRoutingArrayOutput {
	return o
}

func (o VrfRoutingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VrfRouting] {
	return pulumix.Output[[]*VrfRouting]{
		OutputState: o.OutputState,
	}
}

func (o VrfRoutingArrayOutput) Index(i pulumi.IntInput) VrfRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VrfRouting {
		return vs[0].([]*VrfRouting)[vs[1].(int)]
	}).(VrfRoutingOutput)
}

type VrfRoutingMapOutput struct{ *pulumi.OutputState }

func (VrfRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrfRouting)(nil)).Elem()
}

func (o VrfRoutingMapOutput) ToVrfRoutingMapOutput() VrfRoutingMapOutput {
	return o
}

func (o VrfRoutingMapOutput) ToVrfRoutingMapOutputWithContext(ctx context.Context) VrfRoutingMapOutput {
	return o
}

func (o VrfRoutingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VrfRouting] {
	return pulumix.Output[map[string]*VrfRouting]{
		OutputState: o.OutputState,
	}
}

func (o VrfRoutingMapOutput) MapIndex(k pulumi.StringInput) VrfRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VrfRouting {
		return vs[0].(map[string]*VrfRouting)[vs[1].(string)]
	}).(VrfRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRoutingInput)(nil)).Elem(), &VrfRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRoutingArrayInput)(nil)).Elem(), VrfRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRoutingMapInput)(nil)).Elem(), VrfRoutingMap{})
	pulumi.RegisterOutputType(VrfRoutingOutput{})
	pulumi.RegisterOutputType(VrfRoutingArrayOutput{})
	pulumi.RegisterOutputType(VrfRoutingMapOutput{})
}
