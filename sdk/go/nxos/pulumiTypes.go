// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type ProviderDevice struct {
	Name string `pulumi:"name"`
	Url  string `pulumi:"url"`
}

// ProviderDeviceInput is an input type that accepts ProviderDeviceArgs and ProviderDeviceOutput values.
// You can construct a concrete instance of `ProviderDeviceInput` via:
//
//	ProviderDeviceArgs{...}
type ProviderDeviceInput interface {
	pulumi.Input

	ToProviderDeviceOutput() ProviderDeviceOutput
	ToProviderDeviceOutputWithContext(context.Context) ProviderDeviceOutput
}

type ProviderDeviceArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Url  pulumi.StringInput `pulumi:"url"`
}

func (ProviderDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderDevice)(nil)).Elem()
}

func (i ProviderDeviceArgs) ToProviderDeviceOutput() ProviderDeviceOutput {
	return i.ToProviderDeviceOutputWithContext(context.Background())
}

func (i ProviderDeviceArgs) ToProviderDeviceOutputWithContext(ctx context.Context) ProviderDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderDeviceOutput)
}

func (i ProviderDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[ProviderDevice] {
	return pulumix.Output[ProviderDevice]{
		OutputState: i.ToProviderDeviceOutputWithContext(ctx).OutputState,
	}
}

// ProviderDeviceArrayInput is an input type that accepts ProviderDeviceArray and ProviderDeviceArrayOutput values.
// You can construct a concrete instance of `ProviderDeviceArrayInput` via:
//
//	ProviderDeviceArray{ ProviderDeviceArgs{...} }
type ProviderDeviceArrayInput interface {
	pulumi.Input

	ToProviderDeviceArrayOutput() ProviderDeviceArrayOutput
	ToProviderDeviceArrayOutputWithContext(context.Context) ProviderDeviceArrayOutput
}

type ProviderDeviceArray []ProviderDeviceInput

func (ProviderDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderDevice)(nil)).Elem()
}

func (i ProviderDeviceArray) ToProviderDeviceArrayOutput() ProviderDeviceArrayOutput {
	return i.ToProviderDeviceArrayOutputWithContext(context.Background())
}

func (i ProviderDeviceArray) ToProviderDeviceArrayOutputWithContext(ctx context.Context) ProviderDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderDeviceArrayOutput)
}

func (i ProviderDeviceArray) ToOutput(ctx context.Context) pulumix.Output[[]ProviderDevice] {
	return pulumix.Output[[]ProviderDevice]{
		OutputState: i.ToProviderDeviceArrayOutputWithContext(ctx).OutputState,
	}
}

type ProviderDeviceOutput struct{ *pulumi.OutputState }

func (ProviderDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderDevice)(nil)).Elem()
}

func (o ProviderDeviceOutput) ToProviderDeviceOutput() ProviderDeviceOutput {
	return o
}

func (o ProviderDeviceOutput) ToProviderDeviceOutputWithContext(ctx context.Context) ProviderDeviceOutput {
	return o
}

func (o ProviderDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[ProviderDevice] {
	return pulumix.Output[ProviderDevice]{
		OutputState: o.OutputState,
	}
}

func (o ProviderDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderDevice) string { return v.Name }).(pulumi.StringOutput)
}

func (o ProviderDeviceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderDevice) string { return v.Url }).(pulumi.StringOutput)
}

type ProviderDeviceArrayOutput struct{ *pulumi.OutputState }

func (ProviderDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderDevice)(nil)).Elem()
}

func (o ProviderDeviceArrayOutput) ToProviderDeviceArrayOutput() ProviderDeviceArrayOutput {
	return o
}

func (o ProviderDeviceArrayOutput) ToProviderDeviceArrayOutputWithContext(ctx context.Context) ProviderDeviceArrayOutput {
	return o
}

func (o ProviderDeviceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProviderDevice] {
	return pulumix.Output[[]ProviderDevice]{
		OutputState: o.OutputState,
	}
}

func (o ProviderDeviceArrayOutput) Index(i pulumi.IntInput) ProviderDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderDevice {
		return vs[0].([]ProviderDevice)[vs[1].(int)]
	}).(ProviderDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderDeviceInput)(nil)).Elem(), ProviderDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderDeviceArrayInput)(nil)).Elem(), ProviderDeviceArray{})
	pulumi.RegisterOutputType(ProviderDeviceOutput{})
	pulumi.RegisterOutputType(ProviderDeviceArrayOutput{})
}
