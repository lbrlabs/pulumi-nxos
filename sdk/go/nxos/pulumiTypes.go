// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type Ipv4StaticRouteNextHop struct {
	Address     string  `pulumi:"address"`
	Description *string `pulumi:"description"`
	InterfaceId string  `pulumi:"interfaceId"`
	Object      *int    `pulumi:"object"`
	Preference  *int    `pulumi:"preference"`
	Tag         *int    `pulumi:"tag"`
	VrfName     string  `pulumi:"vrfName"`
}

// Ipv4StaticRouteNextHopInput is an input type that accepts Ipv4StaticRouteNextHopArgs and Ipv4StaticRouteNextHopOutput values.
// You can construct a concrete instance of `Ipv4StaticRouteNextHopInput` via:
//
//	Ipv4StaticRouteNextHopArgs{...}
type Ipv4StaticRouteNextHopInput interface {
	pulumi.Input

	ToIpv4StaticRouteNextHopOutput() Ipv4StaticRouteNextHopOutput
	ToIpv4StaticRouteNextHopOutputWithContext(context.Context) Ipv4StaticRouteNextHopOutput
}

type Ipv4StaticRouteNextHopArgs struct {
	Address     pulumi.StringInput    `pulumi:"address"`
	Description pulumi.StringPtrInput `pulumi:"description"`
	InterfaceId pulumi.StringInput    `pulumi:"interfaceId"`
	Object      pulumi.IntPtrInput    `pulumi:"object"`
	Preference  pulumi.IntPtrInput    `pulumi:"preference"`
	Tag         pulumi.IntPtrInput    `pulumi:"tag"`
	VrfName     pulumi.StringInput    `pulumi:"vrfName"`
}

func (Ipv4StaticRouteNextHopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Ipv4StaticRouteNextHop)(nil)).Elem()
}

func (i Ipv4StaticRouteNextHopArgs) ToIpv4StaticRouteNextHopOutput() Ipv4StaticRouteNextHopOutput {
	return i.ToIpv4StaticRouteNextHopOutputWithContext(context.Background())
}

func (i Ipv4StaticRouteNextHopArgs) ToIpv4StaticRouteNextHopOutputWithContext(ctx context.Context) Ipv4StaticRouteNextHopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4StaticRouteNextHopOutput)
}

func (i Ipv4StaticRouteNextHopArgs) ToOutput(ctx context.Context) pulumix.Output[Ipv4StaticRouteNextHop] {
	return pulumix.Output[Ipv4StaticRouteNextHop]{
		OutputState: i.ToIpv4StaticRouteNextHopOutputWithContext(ctx).OutputState,
	}
}

// Ipv4StaticRouteNextHopArrayInput is an input type that accepts Ipv4StaticRouteNextHopArray and Ipv4StaticRouteNextHopArrayOutput values.
// You can construct a concrete instance of `Ipv4StaticRouteNextHopArrayInput` via:
//
//	Ipv4StaticRouteNextHopArray{ Ipv4StaticRouteNextHopArgs{...} }
type Ipv4StaticRouteNextHopArrayInput interface {
	pulumi.Input

	ToIpv4StaticRouteNextHopArrayOutput() Ipv4StaticRouteNextHopArrayOutput
	ToIpv4StaticRouteNextHopArrayOutputWithContext(context.Context) Ipv4StaticRouteNextHopArrayOutput
}

type Ipv4StaticRouteNextHopArray []Ipv4StaticRouteNextHopInput

func (Ipv4StaticRouteNextHopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Ipv4StaticRouteNextHop)(nil)).Elem()
}

func (i Ipv4StaticRouteNextHopArray) ToIpv4StaticRouteNextHopArrayOutput() Ipv4StaticRouteNextHopArrayOutput {
	return i.ToIpv4StaticRouteNextHopArrayOutputWithContext(context.Background())
}

func (i Ipv4StaticRouteNextHopArray) ToIpv4StaticRouteNextHopArrayOutputWithContext(ctx context.Context) Ipv4StaticRouteNextHopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4StaticRouteNextHopArrayOutput)
}

func (i Ipv4StaticRouteNextHopArray) ToOutput(ctx context.Context) pulumix.Output[[]Ipv4StaticRouteNextHop] {
	return pulumix.Output[[]Ipv4StaticRouteNextHop]{
		OutputState: i.ToIpv4StaticRouteNextHopArrayOutputWithContext(ctx).OutputState,
	}
}

type Ipv4StaticRouteNextHopOutput struct{ *pulumi.OutputState }

func (Ipv4StaticRouteNextHopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ipv4StaticRouteNextHop)(nil)).Elem()
}

func (o Ipv4StaticRouteNextHopOutput) ToIpv4StaticRouteNextHopOutput() Ipv4StaticRouteNextHopOutput {
	return o
}

func (o Ipv4StaticRouteNextHopOutput) ToIpv4StaticRouteNextHopOutputWithContext(ctx context.Context) Ipv4StaticRouteNextHopOutput {
	return o
}

func (o Ipv4StaticRouteNextHopOutput) ToOutput(ctx context.Context) pulumix.Output[Ipv4StaticRouteNextHop] {
	return pulumix.Output[Ipv4StaticRouteNextHop]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4StaticRouteNextHopOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Ipv4StaticRouteNextHop) string { return v.Address }).(pulumi.StringOutput)
}

func (o Ipv4StaticRouteNextHopOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Ipv4StaticRouteNextHop) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o Ipv4StaticRouteNextHopOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v Ipv4StaticRouteNextHop) string { return v.InterfaceId }).(pulumi.StringOutput)
}

func (o Ipv4StaticRouteNextHopOutput) Object() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Ipv4StaticRouteNextHop) *int { return v.Object }).(pulumi.IntPtrOutput)
}

func (o Ipv4StaticRouteNextHopOutput) Preference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Ipv4StaticRouteNextHop) *int { return v.Preference }).(pulumi.IntPtrOutput)
}

func (o Ipv4StaticRouteNextHopOutput) Tag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Ipv4StaticRouteNextHop) *int { return v.Tag }).(pulumi.IntPtrOutput)
}

func (o Ipv4StaticRouteNextHopOutput) VrfName() pulumi.StringOutput {
	return o.ApplyT(func(v Ipv4StaticRouteNextHop) string { return v.VrfName }).(pulumi.StringOutput)
}

type Ipv4StaticRouteNextHopArrayOutput struct{ *pulumi.OutputState }

func (Ipv4StaticRouteNextHopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Ipv4StaticRouteNextHop)(nil)).Elem()
}

func (o Ipv4StaticRouteNextHopArrayOutput) ToIpv4StaticRouteNextHopArrayOutput() Ipv4StaticRouteNextHopArrayOutput {
	return o
}

func (o Ipv4StaticRouteNextHopArrayOutput) ToIpv4StaticRouteNextHopArrayOutputWithContext(ctx context.Context) Ipv4StaticRouteNextHopArrayOutput {
	return o
}

func (o Ipv4StaticRouteNextHopArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Ipv4StaticRouteNextHop] {
	return pulumix.Output[[]Ipv4StaticRouteNextHop]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4StaticRouteNextHopArrayOutput) Index(i pulumi.IntInput) Ipv4StaticRouteNextHopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Ipv4StaticRouteNextHop {
		return vs[0].([]Ipv4StaticRouteNextHop)[vs[1].(int)]
	}).(Ipv4StaticRouteNextHopOutput)
}

type ProviderDevice struct {
	Name string `pulumi:"name"`
	Url  string `pulumi:"url"`
}

// ProviderDeviceInput is an input type that accepts ProviderDeviceArgs and ProviderDeviceOutput values.
// You can construct a concrete instance of `ProviderDeviceInput` via:
//
//	ProviderDeviceArgs{...}
type ProviderDeviceInput interface {
	pulumi.Input

	ToProviderDeviceOutput() ProviderDeviceOutput
	ToProviderDeviceOutputWithContext(context.Context) ProviderDeviceOutput
}

type ProviderDeviceArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Url  pulumi.StringInput `pulumi:"url"`
}

func (ProviderDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderDevice)(nil)).Elem()
}

func (i ProviderDeviceArgs) ToProviderDeviceOutput() ProviderDeviceOutput {
	return i.ToProviderDeviceOutputWithContext(context.Background())
}

func (i ProviderDeviceArgs) ToProviderDeviceOutputWithContext(ctx context.Context) ProviderDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderDeviceOutput)
}

func (i ProviderDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[ProviderDevice] {
	return pulumix.Output[ProviderDevice]{
		OutputState: i.ToProviderDeviceOutputWithContext(ctx).OutputState,
	}
}

// ProviderDeviceArrayInput is an input type that accepts ProviderDeviceArray and ProviderDeviceArrayOutput values.
// You can construct a concrete instance of `ProviderDeviceArrayInput` via:
//
//	ProviderDeviceArray{ ProviderDeviceArgs{...} }
type ProviderDeviceArrayInput interface {
	pulumi.Input

	ToProviderDeviceArrayOutput() ProviderDeviceArrayOutput
	ToProviderDeviceArrayOutputWithContext(context.Context) ProviderDeviceArrayOutput
}

type ProviderDeviceArray []ProviderDeviceInput

func (ProviderDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderDevice)(nil)).Elem()
}

func (i ProviderDeviceArray) ToProviderDeviceArrayOutput() ProviderDeviceArrayOutput {
	return i.ToProviderDeviceArrayOutputWithContext(context.Background())
}

func (i ProviderDeviceArray) ToProviderDeviceArrayOutputWithContext(ctx context.Context) ProviderDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderDeviceArrayOutput)
}

func (i ProviderDeviceArray) ToOutput(ctx context.Context) pulumix.Output[[]ProviderDevice] {
	return pulumix.Output[[]ProviderDevice]{
		OutputState: i.ToProviderDeviceArrayOutputWithContext(ctx).OutputState,
	}
}

type ProviderDeviceOutput struct{ *pulumi.OutputState }

func (ProviderDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderDevice)(nil)).Elem()
}

func (o ProviderDeviceOutput) ToProviderDeviceOutput() ProviderDeviceOutput {
	return o
}

func (o ProviderDeviceOutput) ToProviderDeviceOutputWithContext(ctx context.Context) ProviderDeviceOutput {
	return o
}

func (o ProviderDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[ProviderDevice] {
	return pulumix.Output[ProviderDevice]{
		OutputState: o.OutputState,
	}
}

func (o ProviderDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderDevice) string { return v.Name }).(pulumi.StringOutput)
}

func (o ProviderDeviceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderDevice) string { return v.Url }).(pulumi.StringOutput)
}

type ProviderDeviceArrayOutput struct{ *pulumi.OutputState }

func (ProviderDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderDevice)(nil)).Elem()
}

func (o ProviderDeviceArrayOutput) ToProviderDeviceArrayOutput() ProviderDeviceArrayOutput {
	return o
}

func (o ProviderDeviceArrayOutput) ToProviderDeviceArrayOutputWithContext(ctx context.Context) ProviderDeviceArrayOutput {
	return o
}

func (o ProviderDeviceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProviderDevice] {
	return pulumix.Output[[]ProviderDevice]{
		OutputState: o.OutputState,
	}
}

func (o ProviderDeviceArrayOutput) Index(i pulumi.IntInput) ProviderDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderDevice {
		return vs[0].([]ProviderDevice)[vs[1].(int)]
	}).(ProviderDeviceOutput)
}

type RestChildren struct {
	// Class name of the child object.
	ClassName string `pulumi:"className"`
	// Map of key-value pairs which represents the attributes of the child object.
	Content map[string]string `pulumi:"content"`
	// The relative name of the child object.
	Rn string `pulumi:"rn"`
}

// RestChildrenInput is an input type that accepts RestChildrenArgs and RestChildrenOutput values.
// You can construct a concrete instance of `RestChildrenInput` via:
//
//	RestChildrenArgs{...}
type RestChildrenInput interface {
	pulumi.Input

	ToRestChildrenOutput() RestChildrenOutput
	ToRestChildrenOutputWithContext(context.Context) RestChildrenOutput
}

type RestChildrenArgs struct {
	// Class name of the child object.
	ClassName pulumi.StringInput `pulumi:"className"`
	// Map of key-value pairs which represents the attributes of the child object.
	Content pulumi.StringMapInput `pulumi:"content"`
	// The relative name of the child object.
	Rn pulumi.StringInput `pulumi:"rn"`
}

func (RestChildrenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestChildren)(nil)).Elem()
}

func (i RestChildrenArgs) ToRestChildrenOutput() RestChildrenOutput {
	return i.ToRestChildrenOutputWithContext(context.Background())
}

func (i RestChildrenArgs) ToRestChildrenOutputWithContext(ctx context.Context) RestChildrenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestChildrenOutput)
}

func (i RestChildrenArgs) ToOutput(ctx context.Context) pulumix.Output[RestChildren] {
	return pulumix.Output[RestChildren]{
		OutputState: i.ToRestChildrenOutputWithContext(ctx).OutputState,
	}
}

// RestChildrenArrayInput is an input type that accepts RestChildrenArray and RestChildrenArrayOutput values.
// You can construct a concrete instance of `RestChildrenArrayInput` via:
//
//	RestChildrenArray{ RestChildrenArgs{...} }
type RestChildrenArrayInput interface {
	pulumi.Input

	ToRestChildrenArrayOutput() RestChildrenArrayOutput
	ToRestChildrenArrayOutputWithContext(context.Context) RestChildrenArrayOutput
}

type RestChildrenArray []RestChildrenInput

func (RestChildrenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestChildren)(nil)).Elem()
}

func (i RestChildrenArray) ToRestChildrenArrayOutput() RestChildrenArrayOutput {
	return i.ToRestChildrenArrayOutputWithContext(context.Background())
}

func (i RestChildrenArray) ToRestChildrenArrayOutputWithContext(ctx context.Context) RestChildrenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestChildrenArrayOutput)
}

func (i RestChildrenArray) ToOutput(ctx context.Context) pulumix.Output[[]RestChildren] {
	return pulumix.Output[[]RestChildren]{
		OutputState: i.ToRestChildrenArrayOutputWithContext(ctx).OutputState,
	}
}

type RestChildrenOutput struct{ *pulumi.OutputState }

func (RestChildrenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestChildren)(nil)).Elem()
}

func (o RestChildrenOutput) ToRestChildrenOutput() RestChildrenOutput {
	return o
}

func (o RestChildrenOutput) ToRestChildrenOutputWithContext(ctx context.Context) RestChildrenOutput {
	return o
}

func (o RestChildrenOutput) ToOutput(ctx context.Context) pulumix.Output[RestChildren] {
	return pulumix.Output[RestChildren]{
		OutputState: o.OutputState,
	}
}

// Class name of the child object.
func (o RestChildrenOutput) ClassName() pulumi.StringOutput {
	return o.ApplyT(func(v RestChildren) string { return v.ClassName }).(pulumi.StringOutput)
}

// Map of key-value pairs which represents the attributes of the child object.
func (o RestChildrenOutput) Content() pulumi.StringMapOutput {
	return o.ApplyT(func(v RestChildren) map[string]string { return v.Content }).(pulumi.StringMapOutput)
}

// The relative name of the child object.
func (o RestChildrenOutput) Rn() pulumi.StringOutput {
	return o.ApplyT(func(v RestChildren) string { return v.Rn }).(pulumi.StringOutput)
}

type RestChildrenArrayOutput struct{ *pulumi.OutputState }

func (RestChildrenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestChildren)(nil)).Elem()
}

func (o RestChildrenArrayOutput) ToRestChildrenArrayOutput() RestChildrenArrayOutput {
	return o
}

func (o RestChildrenArrayOutput) ToRestChildrenArrayOutputWithContext(ctx context.Context) RestChildrenArrayOutput {
	return o
}

func (o RestChildrenArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RestChildren] {
	return pulumix.Output[[]RestChildren]{
		OutputState: o.OutputState,
	}
}

func (o RestChildrenArrayOutput) Index(i pulumi.IntInput) RestChildrenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RestChildren {
		return vs[0].([]RestChildren)[vs[1].(int)]
	}).(RestChildrenOutput)
}

type GetIpv4StaticRouteNextHop struct {
	// Nexthop address.
	Address string `pulumi:"address"`
	// Description.
	Description string `pulumi:"description"`
	// Must match first field in the output of `show intf brief` or `unspecified`. Example: `eth1/1` or `vlan100`.
	InterfaceId string `pulumi:"interfaceId"`
	// Object to be tracked.
	Object int `pulumi:"object"`
	// Route preference.
	Preference int `pulumi:"preference"`
	// Tag value.
	Tag int `pulumi:"tag"`
	// Nexthop VRF.
	VrfName string `pulumi:"vrfName"`
}

// GetIpv4StaticRouteNextHopInput is an input type that accepts GetIpv4StaticRouteNextHopArgs and GetIpv4StaticRouteNextHopOutput values.
// You can construct a concrete instance of `GetIpv4StaticRouteNextHopInput` via:
//
//	GetIpv4StaticRouteNextHopArgs{...}
type GetIpv4StaticRouteNextHopInput interface {
	pulumi.Input

	ToGetIpv4StaticRouteNextHopOutput() GetIpv4StaticRouteNextHopOutput
	ToGetIpv4StaticRouteNextHopOutputWithContext(context.Context) GetIpv4StaticRouteNextHopOutput
}

type GetIpv4StaticRouteNextHopArgs struct {
	// Nexthop address.
	Address pulumi.StringInput `pulumi:"address"`
	// Description.
	Description pulumi.StringInput `pulumi:"description"`
	// Must match first field in the output of `show intf brief` or `unspecified`. Example: `eth1/1` or `vlan100`.
	InterfaceId pulumi.StringInput `pulumi:"interfaceId"`
	// Object to be tracked.
	Object pulumi.IntInput `pulumi:"object"`
	// Route preference.
	Preference pulumi.IntInput `pulumi:"preference"`
	// Tag value.
	Tag pulumi.IntInput `pulumi:"tag"`
	// Nexthop VRF.
	VrfName pulumi.StringInput `pulumi:"vrfName"`
}

func (GetIpv4StaticRouteNextHopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpv4StaticRouteNextHop)(nil)).Elem()
}

func (i GetIpv4StaticRouteNextHopArgs) ToGetIpv4StaticRouteNextHopOutput() GetIpv4StaticRouteNextHopOutput {
	return i.ToGetIpv4StaticRouteNextHopOutputWithContext(context.Background())
}

func (i GetIpv4StaticRouteNextHopArgs) ToGetIpv4StaticRouteNextHopOutputWithContext(ctx context.Context) GetIpv4StaticRouteNextHopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpv4StaticRouteNextHopOutput)
}

func (i GetIpv4StaticRouteNextHopArgs) ToOutput(ctx context.Context) pulumix.Output[GetIpv4StaticRouteNextHop] {
	return pulumix.Output[GetIpv4StaticRouteNextHop]{
		OutputState: i.ToGetIpv4StaticRouteNextHopOutputWithContext(ctx).OutputState,
	}
}

// GetIpv4StaticRouteNextHopArrayInput is an input type that accepts GetIpv4StaticRouteNextHopArray and GetIpv4StaticRouteNextHopArrayOutput values.
// You can construct a concrete instance of `GetIpv4StaticRouteNextHopArrayInput` via:
//
//	GetIpv4StaticRouteNextHopArray{ GetIpv4StaticRouteNextHopArgs{...} }
type GetIpv4StaticRouteNextHopArrayInput interface {
	pulumi.Input

	ToGetIpv4StaticRouteNextHopArrayOutput() GetIpv4StaticRouteNextHopArrayOutput
	ToGetIpv4StaticRouteNextHopArrayOutputWithContext(context.Context) GetIpv4StaticRouteNextHopArrayOutput
}

type GetIpv4StaticRouteNextHopArray []GetIpv4StaticRouteNextHopInput

func (GetIpv4StaticRouteNextHopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpv4StaticRouteNextHop)(nil)).Elem()
}

func (i GetIpv4StaticRouteNextHopArray) ToGetIpv4StaticRouteNextHopArrayOutput() GetIpv4StaticRouteNextHopArrayOutput {
	return i.ToGetIpv4StaticRouteNextHopArrayOutputWithContext(context.Background())
}

func (i GetIpv4StaticRouteNextHopArray) ToGetIpv4StaticRouteNextHopArrayOutputWithContext(ctx context.Context) GetIpv4StaticRouteNextHopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpv4StaticRouteNextHopArrayOutput)
}

func (i GetIpv4StaticRouteNextHopArray) ToOutput(ctx context.Context) pulumix.Output[[]GetIpv4StaticRouteNextHop] {
	return pulumix.Output[[]GetIpv4StaticRouteNextHop]{
		OutputState: i.ToGetIpv4StaticRouteNextHopArrayOutputWithContext(ctx).OutputState,
	}
}

type GetIpv4StaticRouteNextHopOutput struct{ *pulumi.OutputState }

func (GetIpv4StaticRouteNextHopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpv4StaticRouteNextHop)(nil)).Elem()
}

func (o GetIpv4StaticRouteNextHopOutput) ToGetIpv4StaticRouteNextHopOutput() GetIpv4StaticRouteNextHopOutput {
	return o
}

func (o GetIpv4StaticRouteNextHopOutput) ToGetIpv4StaticRouteNextHopOutputWithContext(ctx context.Context) GetIpv4StaticRouteNextHopOutput {
	return o
}

func (o GetIpv4StaticRouteNextHopOutput) ToOutput(ctx context.Context) pulumix.Output[GetIpv4StaticRouteNextHop] {
	return pulumix.Output[GetIpv4StaticRouteNextHop]{
		OutputState: o.OutputState,
	}
}

// Nexthop address.
func (o GetIpv4StaticRouteNextHopOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpv4StaticRouteNextHop) string { return v.Address }).(pulumi.StringOutput)
}

// Description.
func (o GetIpv4StaticRouteNextHopOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpv4StaticRouteNextHop) string { return v.Description }).(pulumi.StringOutput)
}

// Must match first field in the output of `show intf brief` or `unspecified`. Example: `eth1/1` or `vlan100`.
func (o GetIpv4StaticRouteNextHopOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpv4StaticRouteNextHop) string { return v.InterfaceId }).(pulumi.StringOutput)
}

// Object to be tracked.
func (o GetIpv4StaticRouteNextHopOutput) Object() pulumi.IntOutput {
	return o.ApplyT(func(v GetIpv4StaticRouteNextHop) int { return v.Object }).(pulumi.IntOutput)
}

// Route preference.
func (o GetIpv4StaticRouteNextHopOutput) Preference() pulumi.IntOutput {
	return o.ApplyT(func(v GetIpv4StaticRouteNextHop) int { return v.Preference }).(pulumi.IntOutput)
}

// Tag value.
func (o GetIpv4StaticRouteNextHopOutput) Tag() pulumi.IntOutput {
	return o.ApplyT(func(v GetIpv4StaticRouteNextHop) int { return v.Tag }).(pulumi.IntOutput)
}

// Nexthop VRF.
func (o GetIpv4StaticRouteNextHopOutput) VrfName() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpv4StaticRouteNextHop) string { return v.VrfName }).(pulumi.StringOutput)
}

type GetIpv4StaticRouteNextHopArrayOutput struct{ *pulumi.OutputState }

func (GetIpv4StaticRouteNextHopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpv4StaticRouteNextHop)(nil)).Elem()
}

func (o GetIpv4StaticRouteNextHopArrayOutput) ToGetIpv4StaticRouteNextHopArrayOutput() GetIpv4StaticRouteNextHopArrayOutput {
	return o
}

func (o GetIpv4StaticRouteNextHopArrayOutput) ToGetIpv4StaticRouteNextHopArrayOutputWithContext(ctx context.Context) GetIpv4StaticRouteNextHopArrayOutput {
	return o
}

func (o GetIpv4StaticRouteNextHopArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetIpv4StaticRouteNextHop] {
	return pulumix.Output[[]GetIpv4StaticRouteNextHop]{
		OutputState: o.OutputState,
	}
}

func (o GetIpv4StaticRouteNextHopArrayOutput) Index(i pulumi.IntInput) GetIpv4StaticRouteNextHopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIpv4StaticRouteNextHop {
		return vs[0].([]GetIpv4StaticRouteNextHop)[vs[1].(int)]
	}).(GetIpv4StaticRouteNextHopOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4StaticRouteNextHopInput)(nil)).Elem(), Ipv4StaticRouteNextHopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4StaticRouteNextHopArrayInput)(nil)).Elem(), Ipv4StaticRouteNextHopArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderDeviceInput)(nil)).Elem(), ProviderDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderDeviceArrayInput)(nil)).Elem(), ProviderDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestChildrenInput)(nil)).Elem(), RestChildrenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestChildrenArrayInput)(nil)).Elem(), RestChildrenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpv4StaticRouteNextHopInput)(nil)).Elem(), GetIpv4StaticRouteNextHopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpv4StaticRouteNextHopArrayInput)(nil)).Elem(), GetIpv4StaticRouteNextHopArray{})
	pulumi.RegisterOutputType(Ipv4StaticRouteNextHopOutput{})
	pulumi.RegisterOutputType(Ipv4StaticRouteNextHopArrayOutput{})
	pulumi.RegisterOutputType(ProviderDeviceOutput{})
	pulumi.RegisterOutputType(ProviderDeviceArrayOutput{})
	pulumi.RegisterOutputType(RestChildrenOutput{})
	pulumi.RegisterOutputType(RestChildrenArrayOutput{})
	pulumi.RegisterOutputType(GetIpv4StaticRouteNextHopOutput{})
	pulumi.RegisterOutputType(GetIpv4StaticRouteNextHopArrayOutput{})
}
