// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the PIM instance configuration.
//
// - API Documentation: [pimInst](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:Inst/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewPimInstance(ctx, "example", &nxos.PimInstanceArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/pimInstance:PimInstance example "sys/pim/inst"
//
// ```
type PimInstance struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewPimInstance registers a new resource with the given unique name, arguments, and options.
func NewPimInstance(ctx *pulumi.Context,
	name string, args *PimInstanceArgs, opts ...pulumi.ResourceOption) (*PimInstance, error) {
	if args == nil {
		args = &PimInstanceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PimInstance
	err := ctx.RegisterResource("nxos:index/pimInstance:PimInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPimInstance gets an existing PimInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPimInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PimInstanceState, opts ...pulumi.ResourceOption) (*PimInstance, error) {
	var resource PimInstance
	err := ctx.ReadResource("nxos:index/pimInstance:PimInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PimInstance resources.
type pimInstanceState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type PimInstanceState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (PimInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*pimInstanceState)(nil)).Elem()
}

type pimInstanceArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a PimInstance resource.
type PimInstanceArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (PimInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pimInstanceArgs)(nil)).Elem()
}

type PimInstanceInput interface {
	pulumi.Input

	ToPimInstanceOutput() PimInstanceOutput
	ToPimInstanceOutputWithContext(ctx context.Context) PimInstanceOutput
}

func (*PimInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**PimInstance)(nil)).Elem()
}

func (i *PimInstance) ToPimInstanceOutput() PimInstanceOutput {
	return i.ToPimInstanceOutputWithContext(context.Background())
}

func (i *PimInstance) ToPimInstanceOutputWithContext(ctx context.Context) PimInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimInstanceOutput)
}

func (i *PimInstance) ToOutput(ctx context.Context) pulumix.Output[*PimInstance] {
	return pulumix.Output[*PimInstance]{
		OutputState: i.ToPimInstanceOutputWithContext(ctx).OutputState,
	}
}

// PimInstanceArrayInput is an input type that accepts PimInstanceArray and PimInstanceArrayOutput values.
// You can construct a concrete instance of `PimInstanceArrayInput` via:
//
//	PimInstanceArray{ PimInstanceArgs{...} }
type PimInstanceArrayInput interface {
	pulumi.Input

	ToPimInstanceArrayOutput() PimInstanceArrayOutput
	ToPimInstanceArrayOutputWithContext(context.Context) PimInstanceArrayOutput
}

type PimInstanceArray []PimInstanceInput

func (PimInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PimInstance)(nil)).Elem()
}

func (i PimInstanceArray) ToPimInstanceArrayOutput() PimInstanceArrayOutput {
	return i.ToPimInstanceArrayOutputWithContext(context.Background())
}

func (i PimInstanceArray) ToPimInstanceArrayOutputWithContext(ctx context.Context) PimInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimInstanceArrayOutput)
}

func (i PimInstanceArray) ToOutput(ctx context.Context) pulumix.Output[[]*PimInstance] {
	return pulumix.Output[[]*PimInstance]{
		OutputState: i.ToPimInstanceArrayOutputWithContext(ctx).OutputState,
	}
}

// PimInstanceMapInput is an input type that accepts PimInstanceMap and PimInstanceMapOutput values.
// You can construct a concrete instance of `PimInstanceMapInput` via:
//
//	PimInstanceMap{ "key": PimInstanceArgs{...} }
type PimInstanceMapInput interface {
	pulumi.Input

	ToPimInstanceMapOutput() PimInstanceMapOutput
	ToPimInstanceMapOutputWithContext(context.Context) PimInstanceMapOutput
}

type PimInstanceMap map[string]PimInstanceInput

func (PimInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PimInstance)(nil)).Elem()
}

func (i PimInstanceMap) ToPimInstanceMapOutput() PimInstanceMapOutput {
	return i.ToPimInstanceMapOutputWithContext(context.Background())
}

func (i PimInstanceMap) ToPimInstanceMapOutputWithContext(ctx context.Context) PimInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimInstanceMapOutput)
}

func (i PimInstanceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PimInstance] {
	return pulumix.Output[map[string]*PimInstance]{
		OutputState: i.ToPimInstanceMapOutputWithContext(ctx).OutputState,
	}
}

type PimInstanceOutput struct{ *pulumi.OutputState }

func (PimInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PimInstance)(nil)).Elem()
}

func (o PimInstanceOutput) ToPimInstanceOutput() PimInstanceOutput {
	return o
}

func (o PimInstanceOutput) ToPimInstanceOutputWithContext(ctx context.Context) PimInstanceOutput {
	return o
}

func (o PimInstanceOutput) ToOutput(ctx context.Context) pulumix.Output[*PimInstance] {
	return pulumix.Output[*PimInstance]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o PimInstanceOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *PimInstance) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o PimInstanceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PimInstance) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type PimInstanceArrayOutput struct{ *pulumi.OutputState }

func (PimInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PimInstance)(nil)).Elem()
}

func (o PimInstanceArrayOutput) ToPimInstanceArrayOutput() PimInstanceArrayOutput {
	return o
}

func (o PimInstanceArrayOutput) ToPimInstanceArrayOutputWithContext(ctx context.Context) PimInstanceArrayOutput {
	return o
}

func (o PimInstanceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PimInstance] {
	return pulumix.Output[[]*PimInstance]{
		OutputState: o.OutputState,
	}
}

func (o PimInstanceArrayOutput) Index(i pulumi.IntInput) PimInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PimInstance {
		return vs[0].([]*PimInstance)[vs[1].(int)]
	}).(PimInstanceOutput)
}

type PimInstanceMapOutput struct{ *pulumi.OutputState }

func (PimInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PimInstance)(nil)).Elem()
}

func (o PimInstanceMapOutput) ToPimInstanceMapOutput() PimInstanceMapOutput {
	return o
}

func (o PimInstanceMapOutput) ToPimInstanceMapOutputWithContext(ctx context.Context) PimInstanceMapOutput {
	return o
}

func (o PimInstanceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PimInstance] {
	return pulumix.Output[map[string]*PimInstance]{
		OutputState: o.OutputState,
	}
}

func (o PimInstanceMapOutput) MapIndex(k pulumi.StringInput) PimInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PimInstance {
		return vs[0].(map[string]*PimInstance)[vs[1].(string)]
	}).(PimInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PimInstanceInput)(nil)).Elem(), &PimInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimInstanceArrayInput)(nil)).Elem(), PimInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimInstanceMapInput)(nil)).Elem(), PimInstanceMap{})
	pulumi.RegisterOutputType(PimInstanceOutput{})
	pulumi.RegisterOutputType(PimInstanceArrayOutput{})
	pulumi.RegisterOutputType(PimInstanceMapOutput{})
}
