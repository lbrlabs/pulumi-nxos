// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage an IPv4 Prefix List entry configuration.
//
// - API Documentation: [rtpfxEntry](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtpfx:Entry/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewIpv4PrefixListRuleEntry(ctx, "example", &nxos.Ipv4PrefixListRuleEntryArgs{
//				Action:    pulumi.String("permit"),
//				Criteria:  pulumi.String("inexact"),
//				FromRange: pulumi.Int(26),
//				Order:     pulumi.Int(10),
//				Prefix:    pulumi.String("192.168.1.0/24"),
//				RuleName:  pulumi.String("RULE1"),
//				ToRange:   pulumi.Int(32),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/ipv4PrefixListRuleEntry:Ipv4PrefixListRuleEntry example "sys/rpm/pfxlistv4-[RULE1]/ent-[10]"
//
// ```
type Ipv4PrefixListRuleEntry struct {
	pulumi.CustomResourceState

	// IPv4 Prefix List Rule Entry action. - Choices: `deny`, `permit` - Default value: `permit`
	Action pulumi.StringOutput `pulumi:"action"`
	// IPv4 Prefix List Rule Entry criteria. - Choices: `exact`, `inexact` - Default value: `exact`
	Criteria pulumi.StringOutput `pulumi:"criteria"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// IPv4 Prefix List Rule Entry start range. - Range: `0`-`128` - Default value: `0`
	FromRange pulumi.IntOutput `pulumi:"fromRange"`
	// IPv4 Prefix List Rule Entry order. - Range: `0`-`4294967294`
	Order pulumi.IntOutput `pulumi:"order"`
	// IPv4 Prefix List Rule Entry prefix.
	Prefix pulumi.StringPtrOutput `pulumi:"prefix"`
	// IPv4 Prefix List Rule name.
	RuleName pulumi.StringOutput `pulumi:"ruleName"`
	// IPv4 Prefix List Rule Entry end range. - Range: `0`-`128` - Default value: `0`
	ToRange pulumi.IntOutput `pulumi:"toRange"`
}

// NewIpv4PrefixListRuleEntry registers a new resource with the given unique name, arguments, and options.
func NewIpv4PrefixListRuleEntry(ctx *pulumi.Context,
	name string, args *Ipv4PrefixListRuleEntryArgs, opts ...pulumi.ResourceOption) (*Ipv4PrefixListRuleEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Order == nil {
		return nil, errors.New("invalid value for required argument 'Order'")
	}
	if args.RuleName == nil {
		return nil, errors.New("invalid value for required argument 'RuleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipv4PrefixListRuleEntry
	err := ctx.RegisterResource("nxos:index/ipv4PrefixListRuleEntry:Ipv4PrefixListRuleEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv4PrefixListRuleEntry gets an existing Ipv4PrefixListRuleEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv4PrefixListRuleEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv4PrefixListRuleEntryState, opts ...pulumi.ResourceOption) (*Ipv4PrefixListRuleEntry, error) {
	var resource Ipv4PrefixListRuleEntry
	err := ctx.ReadResource("nxos:index/ipv4PrefixListRuleEntry:Ipv4PrefixListRuleEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv4PrefixListRuleEntry resources.
type ipv4PrefixListRuleEntryState struct {
	// IPv4 Prefix List Rule Entry action. - Choices: `deny`, `permit` - Default value: `permit`
	Action *string `pulumi:"action"`
	// IPv4 Prefix List Rule Entry criteria. - Choices: `exact`, `inexact` - Default value: `exact`
	Criteria *string `pulumi:"criteria"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// IPv4 Prefix List Rule Entry start range. - Range: `0`-`128` - Default value: `0`
	FromRange *int `pulumi:"fromRange"`
	// IPv4 Prefix List Rule Entry order. - Range: `0`-`4294967294`
	Order *int `pulumi:"order"`
	// IPv4 Prefix List Rule Entry prefix.
	Prefix *string `pulumi:"prefix"`
	// IPv4 Prefix List Rule name.
	RuleName *string `pulumi:"ruleName"`
	// IPv4 Prefix List Rule Entry end range. - Range: `0`-`128` - Default value: `0`
	ToRange *int `pulumi:"toRange"`
}

type Ipv4PrefixListRuleEntryState struct {
	// IPv4 Prefix List Rule Entry action. - Choices: `deny`, `permit` - Default value: `permit`
	Action pulumi.StringPtrInput
	// IPv4 Prefix List Rule Entry criteria. - Choices: `exact`, `inexact` - Default value: `exact`
	Criteria pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// IPv4 Prefix List Rule Entry start range. - Range: `0`-`128` - Default value: `0`
	FromRange pulumi.IntPtrInput
	// IPv4 Prefix List Rule Entry order. - Range: `0`-`4294967294`
	Order pulumi.IntPtrInput
	// IPv4 Prefix List Rule Entry prefix.
	Prefix pulumi.StringPtrInput
	// IPv4 Prefix List Rule name.
	RuleName pulumi.StringPtrInput
	// IPv4 Prefix List Rule Entry end range. - Range: `0`-`128` - Default value: `0`
	ToRange pulumi.IntPtrInput
}

func (Ipv4PrefixListRuleEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4PrefixListRuleEntryState)(nil)).Elem()
}

type ipv4PrefixListRuleEntryArgs struct {
	// IPv4 Prefix List Rule Entry action. - Choices: `deny`, `permit` - Default value: `permit`
	Action *string `pulumi:"action"`
	// IPv4 Prefix List Rule Entry criteria. - Choices: `exact`, `inexact` - Default value: `exact`
	Criteria *string `pulumi:"criteria"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// IPv4 Prefix List Rule Entry start range. - Range: `0`-`128` - Default value: `0`
	FromRange *int `pulumi:"fromRange"`
	// IPv4 Prefix List Rule Entry order. - Range: `0`-`4294967294`
	Order int `pulumi:"order"`
	// IPv4 Prefix List Rule Entry prefix.
	Prefix *string `pulumi:"prefix"`
	// IPv4 Prefix List Rule name.
	RuleName string `pulumi:"ruleName"`
	// IPv4 Prefix List Rule Entry end range. - Range: `0`-`128` - Default value: `0`
	ToRange *int `pulumi:"toRange"`
}

// The set of arguments for constructing a Ipv4PrefixListRuleEntry resource.
type Ipv4PrefixListRuleEntryArgs struct {
	// IPv4 Prefix List Rule Entry action. - Choices: `deny`, `permit` - Default value: `permit`
	Action pulumi.StringPtrInput
	// IPv4 Prefix List Rule Entry criteria. - Choices: `exact`, `inexact` - Default value: `exact`
	Criteria pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// IPv4 Prefix List Rule Entry start range. - Range: `0`-`128` - Default value: `0`
	FromRange pulumi.IntPtrInput
	// IPv4 Prefix List Rule Entry order. - Range: `0`-`4294967294`
	Order pulumi.IntInput
	// IPv4 Prefix List Rule Entry prefix.
	Prefix pulumi.StringPtrInput
	// IPv4 Prefix List Rule name.
	RuleName pulumi.StringInput
	// IPv4 Prefix List Rule Entry end range. - Range: `0`-`128` - Default value: `0`
	ToRange pulumi.IntPtrInput
}

func (Ipv4PrefixListRuleEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4PrefixListRuleEntryArgs)(nil)).Elem()
}

type Ipv4PrefixListRuleEntryInput interface {
	pulumi.Input

	ToIpv4PrefixListRuleEntryOutput() Ipv4PrefixListRuleEntryOutput
	ToIpv4PrefixListRuleEntryOutputWithContext(ctx context.Context) Ipv4PrefixListRuleEntryOutput
}

func (*Ipv4PrefixListRuleEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4PrefixListRuleEntry)(nil)).Elem()
}

func (i *Ipv4PrefixListRuleEntry) ToIpv4PrefixListRuleEntryOutput() Ipv4PrefixListRuleEntryOutput {
	return i.ToIpv4PrefixListRuleEntryOutputWithContext(context.Background())
}

func (i *Ipv4PrefixListRuleEntry) ToIpv4PrefixListRuleEntryOutputWithContext(ctx context.Context) Ipv4PrefixListRuleEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4PrefixListRuleEntryOutput)
}

func (i *Ipv4PrefixListRuleEntry) ToOutput(ctx context.Context) pulumix.Output[*Ipv4PrefixListRuleEntry] {
	return pulumix.Output[*Ipv4PrefixListRuleEntry]{
		OutputState: i.ToIpv4PrefixListRuleEntryOutputWithContext(ctx).OutputState,
	}
}

// Ipv4PrefixListRuleEntryArrayInput is an input type that accepts Ipv4PrefixListRuleEntryArray and Ipv4PrefixListRuleEntryArrayOutput values.
// You can construct a concrete instance of `Ipv4PrefixListRuleEntryArrayInput` via:
//
//	Ipv4PrefixListRuleEntryArray{ Ipv4PrefixListRuleEntryArgs{...} }
type Ipv4PrefixListRuleEntryArrayInput interface {
	pulumi.Input

	ToIpv4PrefixListRuleEntryArrayOutput() Ipv4PrefixListRuleEntryArrayOutput
	ToIpv4PrefixListRuleEntryArrayOutputWithContext(context.Context) Ipv4PrefixListRuleEntryArrayOutput
}

type Ipv4PrefixListRuleEntryArray []Ipv4PrefixListRuleEntryInput

func (Ipv4PrefixListRuleEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4PrefixListRuleEntry)(nil)).Elem()
}

func (i Ipv4PrefixListRuleEntryArray) ToIpv4PrefixListRuleEntryArrayOutput() Ipv4PrefixListRuleEntryArrayOutput {
	return i.ToIpv4PrefixListRuleEntryArrayOutputWithContext(context.Background())
}

func (i Ipv4PrefixListRuleEntryArray) ToIpv4PrefixListRuleEntryArrayOutputWithContext(ctx context.Context) Ipv4PrefixListRuleEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4PrefixListRuleEntryArrayOutput)
}

func (i Ipv4PrefixListRuleEntryArray) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4PrefixListRuleEntry] {
	return pulumix.Output[[]*Ipv4PrefixListRuleEntry]{
		OutputState: i.ToIpv4PrefixListRuleEntryArrayOutputWithContext(ctx).OutputState,
	}
}

// Ipv4PrefixListRuleEntryMapInput is an input type that accepts Ipv4PrefixListRuleEntryMap and Ipv4PrefixListRuleEntryMapOutput values.
// You can construct a concrete instance of `Ipv4PrefixListRuleEntryMapInput` via:
//
//	Ipv4PrefixListRuleEntryMap{ "key": Ipv4PrefixListRuleEntryArgs{...} }
type Ipv4PrefixListRuleEntryMapInput interface {
	pulumi.Input

	ToIpv4PrefixListRuleEntryMapOutput() Ipv4PrefixListRuleEntryMapOutput
	ToIpv4PrefixListRuleEntryMapOutputWithContext(context.Context) Ipv4PrefixListRuleEntryMapOutput
}

type Ipv4PrefixListRuleEntryMap map[string]Ipv4PrefixListRuleEntryInput

func (Ipv4PrefixListRuleEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4PrefixListRuleEntry)(nil)).Elem()
}

func (i Ipv4PrefixListRuleEntryMap) ToIpv4PrefixListRuleEntryMapOutput() Ipv4PrefixListRuleEntryMapOutput {
	return i.ToIpv4PrefixListRuleEntryMapOutputWithContext(context.Background())
}

func (i Ipv4PrefixListRuleEntryMap) ToIpv4PrefixListRuleEntryMapOutputWithContext(ctx context.Context) Ipv4PrefixListRuleEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv4PrefixListRuleEntryMapOutput)
}

func (i Ipv4PrefixListRuleEntryMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4PrefixListRuleEntry] {
	return pulumix.Output[map[string]*Ipv4PrefixListRuleEntry]{
		OutputState: i.ToIpv4PrefixListRuleEntryMapOutputWithContext(ctx).OutputState,
	}
}

type Ipv4PrefixListRuleEntryOutput struct{ *pulumi.OutputState }

func (Ipv4PrefixListRuleEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv4PrefixListRuleEntry)(nil)).Elem()
}

func (o Ipv4PrefixListRuleEntryOutput) ToIpv4PrefixListRuleEntryOutput() Ipv4PrefixListRuleEntryOutput {
	return o
}

func (o Ipv4PrefixListRuleEntryOutput) ToIpv4PrefixListRuleEntryOutputWithContext(ctx context.Context) Ipv4PrefixListRuleEntryOutput {
	return o
}

func (o Ipv4PrefixListRuleEntryOutput) ToOutput(ctx context.Context) pulumix.Output[*Ipv4PrefixListRuleEntry] {
	return pulumix.Output[*Ipv4PrefixListRuleEntry]{
		OutputState: o.OutputState,
	}
}

// IPv4 Prefix List Rule Entry action. - Choices: `deny`, `permit` - Default value: `permit`
func (o Ipv4PrefixListRuleEntryOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4PrefixListRuleEntry) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// IPv4 Prefix List Rule Entry criteria. - Choices: `exact`, `inexact` - Default value: `exact`
func (o Ipv4PrefixListRuleEntryOutput) Criteria() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4PrefixListRuleEntry) pulumi.StringOutput { return v.Criteria }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o Ipv4PrefixListRuleEntryOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4PrefixListRuleEntry) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// IPv4 Prefix List Rule Entry start range. - Range: `0`-`128` - Default value: `0`
func (o Ipv4PrefixListRuleEntryOutput) FromRange() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipv4PrefixListRuleEntry) pulumi.IntOutput { return v.FromRange }).(pulumi.IntOutput)
}

// IPv4 Prefix List Rule Entry order. - Range: `0`-`4294967294`
func (o Ipv4PrefixListRuleEntryOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipv4PrefixListRuleEntry) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// IPv4 Prefix List Rule Entry prefix.
func (o Ipv4PrefixListRuleEntryOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ipv4PrefixListRuleEntry) pulumi.StringPtrOutput { return v.Prefix }).(pulumi.StringPtrOutput)
}

// IPv4 Prefix List Rule name.
func (o Ipv4PrefixListRuleEntryOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv4PrefixListRuleEntry) pulumi.StringOutput { return v.RuleName }).(pulumi.StringOutput)
}

// IPv4 Prefix List Rule Entry end range. - Range: `0`-`128` - Default value: `0`
func (o Ipv4PrefixListRuleEntryOutput) ToRange() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipv4PrefixListRuleEntry) pulumi.IntOutput { return v.ToRange }).(pulumi.IntOutput)
}

type Ipv4PrefixListRuleEntryArrayOutput struct{ *pulumi.OutputState }

func (Ipv4PrefixListRuleEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv4PrefixListRuleEntry)(nil)).Elem()
}

func (o Ipv4PrefixListRuleEntryArrayOutput) ToIpv4PrefixListRuleEntryArrayOutput() Ipv4PrefixListRuleEntryArrayOutput {
	return o
}

func (o Ipv4PrefixListRuleEntryArrayOutput) ToIpv4PrefixListRuleEntryArrayOutputWithContext(ctx context.Context) Ipv4PrefixListRuleEntryArrayOutput {
	return o
}

func (o Ipv4PrefixListRuleEntryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Ipv4PrefixListRuleEntry] {
	return pulumix.Output[[]*Ipv4PrefixListRuleEntry]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4PrefixListRuleEntryArrayOutput) Index(i pulumi.IntInput) Ipv4PrefixListRuleEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv4PrefixListRuleEntry {
		return vs[0].([]*Ipv4PrefixListRuleEntry)[vs[1].(int)]
	}).(Ipv4PrefixListRuleEntryOutput)
}

type Ipv4PrefixListRuleEntryMapOutput struct{ *pulumi.OutputState }

func (Ipv4PrefixListRuleEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv4PrefixListRuleEntry)(nil)).Elem()
}

func (o Ipv4PrefixListRuleEntryMapOutput) ToIpv4PrefixListRuleEntryMapOutput() Ipv4PrefixListRuleEntryMapOutput {
	return o
}

func (o Ipv4PrefixListRuleEntryMapOutput) ToIpv4PrefixListRuleEntryMapOutputWithContext(ctx context.Context) Ipv4PrefixListRuleEntryMapOutput {
	return o
}

func (o Ipv4PrefixListRuleEntryMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ipv4PrefixListRuleEntry] {
	return pulumix.Output[map[string]*Ipv4PrefixListRuleEntry]{
		OutputState: o.OutputState,
	}
}

func (o Ipv4PrefixListRuleEntryMapOutput) MapIndex(k pulumi.StringInput) Ipv4PrefixListRuleEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv4PrefixListRuleEntry {
		return vs[0].(map[string]*Ipv4PrefixListRuleEntry)[vs[1].(string)]
	}).(Ipv4PrefixListRuleEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4PrefixListRuleEntryInput)(nil)).Elem(), &Ipv4PrefixListRuleEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4PrefixListRuleEntryArrayInput)(nil)).Elem(), Ipv4PrefixListRuleEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv4PrefixListRuleEntryMapInput)(nil)).Elem(), Ipv4PrefixListRuleEntryMap{})
	pulumi.RegisterOutputType(Ipv4PrefixListRuleEntryOutput{})
	pulumi.RegisterOutputType(Ipv4PrefixListRuleEntryArrayOutput{})
	pulumi.RegisterOutputType(Ipv4PrefixListRuleEntryMapOutput{})
}
