// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the PVLAN feature configuration.
//
// - API Documentation: [fmPvlan](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Feature%20Management/fm:Pvlan/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewFeaturePvlan(ctx, "example", &nxos.FeaturePvlanArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/featurePvlan:FeaturePvlan example "sys/fm/pvlan"
//
// ```
type FeaturePvlan struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeaturePvlan registers a new resource with the given unique name, arguments, and options.
func NewFeaturePvlan(ctx *pulumi.Context,
	name string, args *FeaturePvlanArgs, opts ...pulumi.ResourceOption) (*FeaturePvlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeaturePvlan
	err := ctx.RegisterResource("nxos:index/featurePvlan:FeaturePvlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeaturePvlan gets an existing FeaturePvlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeaturePvlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeaturePvlanState, opts ...pulumi.ResourceOption) (*FeaturePvlan, error) {
	var resource FeaturePvlan
	err := ctx.ReadResource("nxos:index/featurePvlan:FeaturePvlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeaturePvlan resources.
type featurePvlanState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeaturePvlanState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeaturePvlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*featurePvlanState)(nil)).Elem()
}

type featurePvlanArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeaturePvlan resource.
type FeaturePvlanArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeaturePvlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featurePvlanArgs)(nil)).Elem()
}

type FeaturePvlanInput interface {
	pulumi.Input

	ToFeaturePvlanOutput() FeaturePvlanOutput
	ToFeaturePvlanOutputWithContext(ctx context.Context) FeaturePvlanOutput
}

func (*FeaturePvlan) ElementType() reflect.Type {
	return reflect.TypeOf((**FeaturePvlan)(nil)).Elem()
}

func (i *FeaturePvlan) ToFeaturePvlanOutput() FeaturePvlanOutput {
	return i.ToFeaturePvlanOutputWithContext(context.Background())
}

func (i *FeaturePvlan) ToFeaturePvlanOutputWithContext(ctx context.Context) FeaturePvlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturePvlanOutput)
}

func (i *FeaturePvlan) ToOutput(ctx context.Context) pulumix.Output[*FeaturePvlan] {
	return pulumix.Output[*FeaturePvlan]{
		OutputState: i.ToFeaturePvlanOutputWithContext(ctx).OutputState,
	}
}

// FeaturePvlanArrayInput is an input type that accepts FeaturePvlanArray and FeaturePvlanArrayOutput values.
// You can construct a concrete instance of `FeaturePvlanArrayInput` via:
//
//	FeaturePvlanArray{ FeaturePvlanArgs{...} }
type FeaturePvlanArrayInput interface {
	pulumi.Input

	ToFeaturePvlanArrayOutput() FeaturePvlanArrayOutput
	ToFeaturePvlanArrayOutputWithContext(context.Context) FeaturePvlanArrayOutput
}

type FeaturePvlanArray []FeaturePvlanInput

func (FeaturePvlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeaturePvlan)(nil)).Elem()
}

func (i FeaturePvlanArray) ToFeaturePvlanArrayOutput() FeaturePvlanArrayOutput {
	return i.ToFeaturePvlanArrayOutputWithContext(context.Background())
}

func (i FeaturePvlanArray) ToFeaturePvlanArrayOutputWithContext(ctx context.Context) FeaturePvlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturePvlanArrayOutput)
}

func (i FeaturePvlanArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeaturePvlan] {
	return pulumix.Output[[]*FeaturePvlan]{
		OutputState: i.ToFeaturePvlanArrayOutputWithContext(ctx).OutputState,
	}
}

// FeaturePvlanMapInput is an input type that accepts FeaturePvlanMap and FeaturePvlanMapOutput values.
// You can construct a concrete instance of `FeaturePvlanMapInput` via:
//
//	FeaturePvlanMap{ "key": FeaturePvlanArgs{...} }
type FeaturePvlanMapInput interface {
	pulumi.Input

	ToFeaturePvlanMapOutput() FeaturePvlanMapOutput
	ToFeaturePvlanMapOutputWithContext(context.Context) FeaturePvlanMapOutput
}

type FeaturePvlanMap map[string]FeaturePvlanInput

func (FeaturePvlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeaturePvlan)(nil)).Elem()
}

func (i FeaturePvlanMap) ToFeaturePvlanMapOutput() FeaturePvlanMapOutput {
	return i.ToFeaturePvlanMapOutputWithContext(context.Background())
}

func (i FeaturePvlanMap) ToFeaturePvlanMapOutputWithContext(ctx context.Context) FeaturePvlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturePvlanMapOutput)
}

func (i FeaturePvlanMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeaturePvlan] {
	return pulumix.Output[map[string]*FeaturePvlan]{
		OutputState: i.ToFeaturePvlanMapOutputWithContext(ctx).OutputState,
	}
}

type FeaturePvlanOutput struct{ *pulumi.OutputState }

func (FeaturePvlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeaturePvlan)(nil)).Elem()
}

func (o FeaturePvlanOutput) ToFeaturePvlanOutput() FeaturePvlanOutput {
	return o
}

func (o FeaturePvlanOutput) ToFeaturePvlanOutputWithContext(ctx context.Context) FeaturePvlanOutput {
	return o
}

func (o FeaturePvlanOutput) ToOutput(ctx context.Context) pulumix.Output[*FeaturePvlan] {
	return pulumix.Output[*FeaturePvlan]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeaturePvlanOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeaturePvlan) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeaturePvlanOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeaturePvlan) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeaturePvlanArrayOutput struct{ *pulumi.OutputState }

func (FeaturePvlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeaturePvlan)(nil)).Elem()
}

func (o FeaturePvlanArrayOutput) ToFeaturePvlanArrayOutput() FeaturePvlanArrayOutput {
	return o
}

func (o FeaturePvlanArrayOutput) ToFeaturePvlanArrayOutputWithContext(ctx context.Context) FeaturePvlanArrayOutput {
	return o
}

func (o FeaturePvlanArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeaturePvlan] {
	return pulumix.Output[[]*FeaturePvlan]{
		OutputState: o.OutputState,
	}
}

func (o FeaturePvlanArrayOutput) Index(i pulumi.IntInput) FeaturePvlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeaturePvlan {
		return vs[0].([]*FeaturePvlan)[vs[1].(int)]
	}).(FeaturePvlanOutput)
}

type FeaturePvlanMapOutput struct{ *pulumi.OutputState }

func (FeaturePvlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeaturePvlan)(nil)).Elem()
}

func (o FeaturePvlanMapOutput) ToFeaturePvlanMapOutput() FeaturePvlanMapOutput {
	return o
}

func (o FeaturePvlanMapOutput) ToFeaturePvlanMapOutputWithContext(ctx context.Context) FeaturePvlanMapOutput {
	return o
}

func (o FeaturePvlanMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeaturePvlan] {
	return pulumix.Output[map[string]*FeaturePvlan]{
		OutputState: o.OutputState,
	}
}

func (o FeaturePvlanMapOutput) MapIndex(k pulumi.StringInput) FeaturePvlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeaturePvlan {
		return vs[0].(map[string]*FeaturePvlan)[vs[1].(string)]
	}).(FeaturePvlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeaturePvlanInput)(nil)).Elem(), &FeaturePvlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeaturePvlanArrayInput)(nil)).Elem(), FeaturePvlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeaturePvlanMapInput)(nil)).Elem(), FeaturePvlanMap{})
	pulumi.RegisterOutputType(FeaturePvlanOutput{})
	pulumi.RegisterOutputType(FeaturePvlanArrayOutput{})
	pulumi.RegisterOutputType(FeaturePvlanMapOutput{})
}
