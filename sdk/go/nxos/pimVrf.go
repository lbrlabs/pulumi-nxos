// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the PIM VRF configuration.
//
// - API Documentation: [pimDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/pim:Dom/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewPimVrf(ctx, "example", &nxos.PimVrfArgs{
//				AdminState: pulumi.String("enabled"),
//				Bfd:        pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/pimVrf:PimVrf example "sys/pim/inst/dom-[default]"
//
// ```
type PimVrf struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// BFD. - Default value: `false`
	Bfd pulumi.BoolOutput `pulumi:"bfd"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// VRF name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewPimVrf registers a new resource with the given unique name, arguments, and options.
func NewPimVrf(ctx *pulumi.Context,
	name string, args *PimVrfArgs, opts ...pulumi.ResourceOption) (*PimVrf, error) {
	if args == nil {
		args = &PimVrfArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PimVrf
	err := ctx.RegisterResource("nxos:index/pimVrf:PimVrf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPimVrf gets an existing PimVrf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPimVrf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PimVrfState, opts ...pulumi.ResourceOption) (*PimVrf, error) {
	var resource PimVrf
	err := ctx.ReadResource("nxos:index/pimVrf:PimVrf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PimVrf resources.
type pimVrfState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// BFD. - Default value: `false`
	Bfd *bool `pulumi:"bfd"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// VRF name.
	Name *string `pulumi:"name"`
}

type PimVrfState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// BFD. - Default value: `false`
	Bfd pulumi.BoolPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// VRF name.
	Name pulumi.StringPtrInput
}

func (PimVrfState) ElementType() reflect.Type {
	return reflect.TypeOf((*pimVrfState)(nil)).Elem()
}

type pimVrfArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// BFD. - Default value: `false`
	Bfd *bool `pulumi:"bfd"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// VRF name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PimVrf resource.
type PimVrfArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// BFD. - Default value: `false`
	Bfd pulumi.BoolPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// VRF name.
	Name pulumi.StringPtrInput
}

func (PimVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pimVrfArgs)(nil)).Elem()
}

type PimVrfInput interface {
	pulumi.Input

	ToPimVrfOutput() PimVrfOutput
	ToPimVrfOutputWithContext(ctx context.Context) PimVrfOutput
}

func (*PimVrf) ElementType() reflect.Type {
	return reflect.TypeOf((**PimVrf)(nil)).Elem()
}

func (i *PimVrf) ToPimVrfOutput() PimVrfOutput {
	return i.ToPimVrfOutputWithContext(context.Background())
}

func (i *PimVrf) ToPimVrfOutputWithContext(ctx context.Context) PimVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimVrfOutput)
}

func (i *PimVrf) ToOutput(ctx context.Context) pulumix.Output[*PimVrf] {
	return pulumix.Output[*PimVrf]{
		OutputState: i.ToPimVrfOutputWithContext(ctx).OutputState,
	}
}

// PimVrfArrayInput is an input type that accepts PimVrfArray and PimVrfArrayOutput values.
// You can construct a concrete instance of `PimVrfArrayInput` via:
//
//	PimVrfArray{ PimVrfArgs{...} }
type PimVrfArrayInput interface {
	pulumi.Input

	ToPimVrfArrayOutput() PimVrfArrayOutput
	ToPimVrfArrayOutputWithContext(context.Context) PimVrfArrayOutput
}

type PimVrfArray []PimVrfInput

func (PimVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PimVrf)(nil)).Elem()
}

func (i PimVrfArray) ToPimVrfArrayOutput() PimVrfArrayOutput {
	return i.ToPimVrfArrayOutputWithContext(context.Background())
}

func (i PimVrfArray) ToPimVrfArrayOutputWithContext(ctx context.Context) PimVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimVrfArrayOutput)
}

func (i PimVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]*PimVrf] {
	return pulumix.Output[[]*PimVrf]{
		OutputState: i.ToPimVrfArrayOutputWithContext(ctx).OutputState,
	}
}

// PimVrfMapInput is an input type that accepts PimVrfMap and PimVrfMapOutput values.
// You can construct a concrete instance of `PimVrfMapInput` via:
//
//	PimVrfMap{ "key": PimVrfArgs{...} }
type PimVrfMapInput interface {
	pulumi.Input

	ToPimVrfMapOutput() PimVrfMapOutput
	ToPimVrfMapOutputWithContext(context.Context) PimVrfMapOutput
}

type PimVrfMap map[string]PimVrfInput

func (PimVrfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PimVrf)(nil)).Elem()
}

func (i PimVrfMap) ToPimVrfMapOutput() PimVrfMapOutput {
	return i.ToPimVrfMapOutputWithContext(context.Background())
}

func (i PimVrfMap) ToPimVrfMapOutputWithContext(ctx context.Context) PimVrfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimVrfMapOutput)
}

func (i PimVrfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PimVrf] {
	return pulumix.Output[map[string]*PimVrf]{
		OutputState: i.ToPimVrfMapOutputWithContext(ctx).OutputState,
	}
}

type PimVrfOutput struct{ *pulumi.OutputState }

func (PimVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PimVrf)(nil)).Elem()
}

func (o PimVrfOutput) ToPimVrfOutput() PimVrfOutput {
	return o
}

func (o PimVrfOutput) ToPimVrfOutputWithContext(ctx context.Context) PimVrfOutput {
	return o
}

func (o PimVrfOutput) ToOutput(ctx context.Context) pulumix.Output[*PimVrf] {
	return pulumix.Output[*PimVrf]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o PimVrfOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *PimVrf) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// BFD. - Default value: `false`
func (o PimVrfOutput) Bfd() pulumi.BoolOutput {
	return o.ApplyT(func(v *PimVrf) pulumi.BoolOutput { return v.Bfd }).(pulumi.BoolOutput)
}

// A device name from the provider configuration.
func (o PimVrfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PimVrf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// VRF name.
func (o PimVrfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PimVrf) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PimVrfArrayOutput struct{ *pulumi.OutputState }

func (PimVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PimVrf)(nil)).Elem()
}

func (o PimVrfArrayOutput) ToPimVrfArrayOutput() PimVrfArrayOutput {
	return o
}

func (o PimVrfArrayOutput) ToPimVrfArrayOutputWithContext(ctx context.Context) PimVrfArrayOutput {
	return o
}

func (o PimVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PimVrf] {
	return pulumix.Output[[]*PimVrf]{
		OutputState: o.OutputState,
	}
}

func (o PimVrfArrayOutput) Index(i pulumi.IntInput) PimVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PimVrf {
		return vs[0].([]*PimVrf)[vs[1].(int)]
	}).(PimVrfOutput)
}

type PimVrfMapOutput struct{ *pulumi.OutputState }

func (PimVrfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PimVrf)(nil)).Elem()
}

func (o PimVrfMapOutput) ToPimVrfMapOutput() PimVrfMapOutput {
	return o
}

func (o PimVrfMapOutput) ToPimVrfMapOutputWithContext(ctx context.Context) PimVrfMapOutput {
	return o
}

func (o PimVrfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PimVrf] {
	return pulumix.Output[map[string]*PimVrf]{
		OutputState: o.OutputState,
	}
}

func (o PimVrfMapOutput) MapIndex(k pulumi.StringInput) PimVrfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PimVrf {
		return vs[0].(map[string]*PimVrf)[vs[1].(string)]
	}).(PimVrfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PimVrfInput)(nil)).Elem(), &PimVrf{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimVrfArrayInput)(nil)).Elem(), PimVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimVrfMapInput)(nil)).Elem(), PimVrfMap{})
	pulumi.RegisterOutputType(PimVrfOutput{})
	pulumi.RegisterOutputType(PimVrfArrayOutput{})
	pulumi.RegisterOutputType(PimVrfMapOutput{})
}
