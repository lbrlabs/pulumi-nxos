// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the vPC interface configuration.
//
// - API Documentation: [vpcIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/vpc:If/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.LookupVpcInterface(ctx, &nxos.LookupVpcInterfaceArgs{
//				VpcInterfaceId: 1,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVpcInterface(ctx *pulumi.Context, args *LookupVpcInterfaceArgs, opts ...pulumi.InvokeOption) (*LookupVpcInterfaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcInterfaceResult
	err := ctx.Invoke("nxos:index/getVpcInterface:getVpcInterface", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcInterface.
type LookupVpcInterfaceArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The vPC interface identifier.
	VpcInterfaceId int `pulumi:"vpcInterfaceId"`
}

// A collection of values returned by getVpcInterface.
type LookupVpcInterfaceResult struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The distinguished name of the object.
	Id string `pulumi:"id"`
	// Port-channel interface DN.
	PortChannelInterfaceDn string `pulumi:"portChannelInterfaceDn"`
	// The vPC interface identifier.
	VpcInterfaceId int `pulumi:"vpcInterfaceId"`
}

func LookupVpcInterfaceOutput(ctx *pulumi.Context, args LookupVpcInterfaceOutputArgs, opts ...pulumi.InvokeOption) LookupVpcInterfaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVpcInterfaceResult, error) {
			args := v.(LookupVpcInterfaceArgs)
			r, err := LookupVpcInterface(ctx, &args, opts...)
			var s LookupVpcInterfaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVpcInterfaceResultOutput)
}

// A collection of arguments for invoking getVpcInterface.
type LookupVpcInterfaceOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// The vPC interface identifier.
	VpcInterfaceId pulumi.IntInput `pulumi:"vpcInterfaceId"`
}

func (LookupVpcInterfaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcInterfaceArgs)(nil)).Elem()
}

// A collection of values returned by getVpcInterface.
type LookupVpcInterfaceResultOutput struct{ *pulumi.OutputState }

func (LookupVpcInterfaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcInterfaceResult)(nil)).Elem()
}

func (o LookupVpcInterfaceResultOutput) ToLookupVpcInterfaceResultOutput() LookupVpcInterfaceResultOutput {
	return o
}

func (o LookupVpcInterfaceResultOutput) ToLookupVpcInterfaceResultOutputWithContext(ctx context.Context) LookupVpcInterfaceResultOutput {
	return o
}

func (o LookupVpcInterfaceResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupVpcInterfaceResult] {
	return pulumix.Output[LookupVpcInterfaceResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupVpcInterfaceResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVpcInterfaceResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The distinguished name of the object.
func (o LookupVpcInterfaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcInterfaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Port-channel interface DN.
func (o LookupVpcInterfaceResultOutput) PortChannelInterfaceDn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcInterfaceResult) string { return v.PortChannelInterfaceDn }).(pulumi.StringOutput)
}

// The vPC interface identifier.
func (o LookupVpcInterfaceResultOutput) VpcInterfaceId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVpcInterfaceResult) int { return v.VpcInterfaceId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVpcInterfaceResultOutput{})
}
