// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the BFD feature configuration.
//
// - API Documentation: [fmBfd](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Feature%20Management/fm:Bfd/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewFeatureBfd(ctx, "example", &nxos.FeatureBfdArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/featureBfd:FeatureBfd example "sys/fm/bfd"
//
// ```
type FeatureBfd struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewFeatureBfd registers a new resource with the given unique name, arguments, and options.
func NewFeatureBfd(ctx *pulumi.Context,
	name string, args *FeatureBfdArgs, opts ...pulumi.ResourceOption) (*FeatureBfd, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminState == nil {
		return nil, errors.New("invalid value for required argument 'AdminState'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureBfd
	err := ctx.RegisterResource("nxos:index/featureBfd:FeatureBfd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureBfd gets an existing FeatureBfd resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureBfd(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureBfdState, opts ...pulumi.ResourceOption) (*FeatureBfd, error) {
	var resource FeatureBfd
	err := ctx.ReadResource("nxos:index/featureBfd:FeatureBfd", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureBfd resources.
type featureBfdState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type FeatureBfdState struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureBfdState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureBfdState)(nil)).Elem()
}

type featureBfdArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a FeatureBfd resource.
type FeatureBfdArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled`
	AdminState pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (FeatureBfdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureBfdArgs)(nil)).Elem()
}

type FeatureBfdInput interface {
	pulumi.Input

	ToFeatureBfdOutput() FeatureBfdOutput
	ToFeatureBfdOutputWithContext(ctx context.Context) FeatureBfdOutput
}

func (*FeatureBfd) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureBfd)(nil)).Elem()
}

func (i *FeatureBfd) ToFeatureBfdOutput() FeatureBfdOutput {
	return i.ToFeatureBfdOutputWithContext(context.Background())
}

func (i *FeatureBfd) ToFeatureBfdOutputWithContext(ctx context.Context) FeatureBfdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureBfdOutput)
}

func (i *FeatureBfd) ToOutput(ctx context.Context) pulumix.Output[*FeatureBfd] {
	return pulumix.Output[*FeatureBfd]{
		OutputState: i.ToFeatureBfdOutputWithContext(ctx).OutputState,
	}
}

// FeatureBfdArrayInput is an input type that accepts FeatureBfdArray and FeatureBfdArrayOutput values.
// You can construct a concrete instance of `FeatureBfdArrayInput` via:
//
//	FeatureBfdArray{ FeatureBfdArgs{...} }
type FeatureBfdArrayInput interface {
	pulumi.Input

	ToFeatureBfdArrayOutput() FeatureBfdArrayOutput
	ToFeatureBfdArrayOutputWithContext(context.Context) FeatureBfdArrayOutput
}

type FeatureBfdArray []FeatureBfdInput

func (FeatureBfdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureBfd)(nil)).Elem()
}

func (i FeatureBfdArray) ToFeatureBfdArrayOutput() FeatureBfdArrayOutput {
	return i.ToFeatureBfdArrayOutputWithContext(context.Background())
}

func (i FeatureBfdArray) ToFeatureBfdArrayOutputWithContext(ctx context.Context) FeatureBfdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureBfdArrayOutput)
}

func (i FeatureBfdArray) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureBfd] {
	return pulumix.Output[[]*FeatureBfd]{
		OutputState: i.ToFeatureBfdArrayOutputWithContext(ctx).OutputState,
	}
}

// FeatureBfdMapInput is an input type that accepts FeatureBfdMap and FeatureBfdMapOutput values.
// You can construct a concrete instance of `FeatureBfdMapInput` via:
//
//	FeatureBfdMap{ "key": FeatureBfdArgs{...} }
type FeatureBfdMapInput interface {
	pulumi.Input

	ToFeatureBfdMapOutput() FeatureBfdMapOutput
	ToFeatureBfdMapOutputWithContext(context.Context) FeatureBfdMapOutput
}

type FeatureBfdMap map[string]FeatureBfdInput

func (FeatureBfdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureBfd)(nil)).Elem()
}

func (i FeatureBfdMap) ToFeatureBfdMapOutput() FeatureBfdMapOutput {
	return i.ToFeatureBfdMapOutputWithContext(context.Background())
}

func (i FeatureBfdMap) ToFeatureBfdMapOutputWithContext(ctx context.Context) FeatureBfdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureBfdMapOutput)
}

func (i FeatureBfdMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureBfd] {
	return pulumix.Output[map[string]*FeatureBfd]{
		OutputState: i.ToFeatureBfdMapOutputWithContext(ctx).OutputState,
	}
}

type FeatureBfdOutput struct{ *pulumi.OutputState }

func (FeatureBfdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureBfd)(nil)).Elem()
}

func (o FeatureBfdOutput) ToFeatureBfdOutput() FeatureBfdOutput {
	return o
}

func (o FeatureBfdOutput) ToFeatureBfdOutputWithContext(ctx context.Context) FeatureBfdOutput {
	return o
}

func (o FeatureBfdOutput) ToOutput(ctx context.Context) pulumix.Output[*FeatureBfd] {
	return pulumix.Output[*FeatureBfd]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled`
func (o FeatureBfdOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureBfd) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o FeatureBfdOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureBfd) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type FeatureBfdArrayOutput struct{ *pulumi.OutputState }

func (FeatureBfdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureBfd)(nil)).Elem()
}

func (o FeatureBfdArrayOutput) ToFeatureBfdArrayOutput() FeatureBfdArrayOutput {
	return o
}

func (o FeatureBfdArrayOutput) ToFeatureBfdArrayOutputWithContext(ctx context.Context) FeatureBfdArrayOutput {
	return o
}

func (o FeatureBfdArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FeatureBfd] {
	return pulumix.Output[[]*FeatureBfd]{
		OutputState: o.OutputState,
	}
}

func (o FeatureBfdArrayOutput) Index(i pulumi.IntInput) FeatureBfdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureBfd {
		return vs[0].([]*FeatureBfd)[vs[1].(int)]
	}).(FeatureBfdOutput)
}

type FeatureBfdMapOutput struct{ *pulumi.OutputState }

func (FeatureBfdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureBfd)(nil)).Elem()
}

func (o FeatureBfdMapOutput) ToFeatureBfdMapOutput() FeatureBfdMapOutput {
	return o
}

func (o FeatureBfdMapOutput) ToFeatureBfdMapOutputWithContext(ctx context.Context) FeatureBfdMapOutput {
	return o
}

func (o FeatureBfdMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FeatureBfd] {
	return pulumix.Output[map[string]*FeatureBfd]{
		OutputState: o.OutputState,
	}
}

func (o FeatureBfdMapOutput) MapIndex(k pulumi.StringInput) FeatureBfdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureBfd {
		return vs[0].(map[string]*FeatureBfd)[vs[1].(string)]
	}).(FeatureBfdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureBfdInput)(nil)).Elem(), &FeatureBfd{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureBfdArrayInput)(nil)).Elem(), FeatureBfdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureBfdMapInput)(nil)).Elem(), FeatureBfdMap{})
	pulumi.RegisterOutputType(FeatureBfdOutput{})
	pulumi.RegisterOutputType(FeatureBfdArrayOutput{})
	pulumi.RegisterOutputType(FeatureBfdMapOutput{})
}
