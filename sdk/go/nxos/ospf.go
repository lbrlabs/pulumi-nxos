// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the global OSPF configuration.
//
// - API Documentation: [ospfEntity](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:Entity/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewOspf(ctx, "example", &nxos.OspfArgs{
//				AdminState: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/ospf:Ospf example "sys/ospf"
//
// ```
type Ospf struct {
	pulumi.CustomResourceState

	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringOutput `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewOspf registers a new resource with the given unique name, arguments, and options.
func NewOspf(ctx *pulumi.Context,
	name string, args *OspfArgs, opts ...pulumi.ResourceOption) (*Ospf, error) {
	if args == nil {
		args = &OspfArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ospf
	err := ctx.RegisterResource("nxos:index/ospf:Ospf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOspf gets an existing Ospf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOspf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OspfState, opts ...pulumi.ResourceOption) (*Ospf, error) {
	var resource Ospf
	err := ctx.ReadResource("nxos:index/ospf:Ospf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ospf resources.
type ospfState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type OspfState struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (OspfState) ElementType() reflect.Type {
	return reflect.TypeOf((*ospfState)(nil)).Elem()
}

type ospfArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState *string `pulumi:"adminState"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a Ospf resource.
type OspfArgs struct {
	// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
	AdminState pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (OspfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ospfArgs)(nil)).Elem()
}

type OspfInput interface {
	pulumi.Input

	ToOspfOutput() OspfOutput
	ToOspfOutputWithContext(ctx context.Context) OspfOutput
}

func (*Ospf) ElementType() reflect.Type {
	return reflect.TypeOf((**Ospf)(nil)).Elem()
}

func (i *Ospf) ToOspfOutput() OspfOutput {
	return i.ToOspfOutputWithContext(context.Background())
}

func (i *Ospf) ToOspfOutputWithContext(ctx context.Context) OspfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfOutput)
}

func (i *Ospf) ToOutput(ctx context.Context) pulumix.Output[*Ospf] {
	return pulumix.Output[*Ospf]{
		OutputState: i.ToOspfOutputWithContext(ctx).OutputState,
	}
}

// OspfArrayInput is an input type that accepts OspfArray and OspfArrayOutput values.
// You can construct a concrete instance of `OspfArrayInput` via:
//
//	OspfArray{ OspfArgs{...} }
type OspfArrayInput interface {
	pulumi.Input

	ToOspfArrayOutput() OspfArrayOutput
	ToOspfArrayOutputWithContext(context.Context) OspfArrayOutput
}

type OspfArray []OspfInput

func (OspfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ospf)(nil)).Elem()
}

func (i OspfArray) ToOspfArrayOutput() OspfArrayOutput {
	return i.ToOspfArrayOutputWithContext(context.Background())
}

func (i OspfArray) ToOspfArrayOutputWithContext(ctx context.Context) OspfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfArrayOutput)
}

func (i OspfArray) ToOutput(ctx context.Context) pulumix.Output[[]*Ospf] {
	return pulumix.Output[[]*Ospf]{
		OutputState: i.ToOspfArrayOutputWithContext(ctx).OutputState,
	}
}

// OspfMapInput is an input type that accepts OspfMap and OspfMapOutput values.
// You can construct a concrete instance of `OspfMapInput` via:
//
//	OspfMap{ "key": OspfArgs{...} }
type OspfMapInput interface {
	pulumi.Input

	ToOspfMapOutput() OspfMapOutput
	ToOspfMapOutputWithContext(context.Context) OspfMapOutput
}

type OspfMap map[string]OspfInput

func (OspfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ospf)(nil)).Elem()
}

func (i OspfMap) ToOspfMapOutput() OspfMapOutput {
	return i.ToOspfMapOutputWithContext(context.Background())
}

func (i OspfMap) ToOspfMapOutputWithContext(ctx context.Context) OspfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfMapOutput)
}

func (i OspfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ospf] {
	return pulumix.Output[map[string]*Ospf]{
		OutputState: i.ToOspfMapOutputWithContext(ctx).OutputState,
	}
}

type OspfOutput struct{ *pulumi.OutputState }

func (OspfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ospf)(nil)).Elem()
}

func (o OspfOutput) ToOspfOutput() OspfOutput {
	return o
}

func (o OspfOutput) ToOspfOutputWithContext(ctx context.Context) OspfOutput {
	return o
}

func (o OspfOutput) ToOutput(ctx context.Context) pulumix.Output[*Ospf] {
	return pulumix.Output[*Ospf]{
		OutputState: o.OutputState,
	}
}

// Administrative state. - Choices: `enabled`, `disabled` - Default value: `enabled`
func (o OspfOutput) AdminState() pulumi.StringOutput {
	return o.ApplyT(func(v *Ospf) pulumi.StringOutput { return v.AdminState }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o OspfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ospf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type OspfArrayOutput struct{ *pulumi.OutputState }

func (OspfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ospf)(nil)).Elem()
}

func (o OspfArrayOutput) ToOspfArrayOutput() OspfArrayOutput {
	return o
}

func (o OspfArrayOutput) ToOspfArrayOutputWithContext(ctx context.Context) OspfArrayOutput {
	return o
}

func (o OspfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Ospf] {
	return pulumix.Output[[]*Ospf]{
		OutputState: o.OutputState,
	}
}

func (o OspfArrayOutput) Index(i pulumi.IntInput) OspfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ospf {
		return vs[0].([]*Ospf)[vs[1].(int)]
	}).(OspfOutput)
}

type OspfMapOutput struct{ *pulumi.OutputState }

func (OspfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ospf)(nil)).Elem()
}

func (o OspfMapOutput) ToOspfMapOutput() OspfMapOutput {
	return o
}

func (o OspfMapOutput) ToOspfMapOutputWithContext(ctx context.Context) OspfMapOutput {
	return o
}

func (o OspfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ospf] {
	return pulumix.Output[map[string]*Ospf]{
		OutputState: o.OutputState,
	}
}

func (o OspfMapOutput) MapIndex(k pulumi.StringInput) OspfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ospf {
		return vs[0].(map[string]*Ospf)[vs[1].(string)]
	}).(OspfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OspfInput)(nil)).Elem(), &Ospf{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfArrayInput)(nil)).Elem(), OspfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfMapInput)(nil)).Elem(), OspfMap{})
	pulumi.RegisterOutputType(OspfOutput{})
	pulumi.RegisterOutputType(OspfArrayOutput{})
	pulumi.RegisterOutputType(OspfMapOutput{})
}
