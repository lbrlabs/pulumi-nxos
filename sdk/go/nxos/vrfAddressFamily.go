// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nxos

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage a VRF Address Family.
//
// - API Documentation: [rtctrlDomAf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtctrl:DomAf/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-nxos/sdk/go/nxos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nxos.NewVrfAddressFamily(ctx, "example", &nxos.VrfAddressFamilyArgs{
//				AddressFamily: pulumi.String("ipv4-ucast"),
//				Vrf:           pulumi.String("VRF1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import nxos:index/vrfAddressFamily:VrfAddressFamily example "sys/inst-[VRF1]/dom-[VRF1]/af-[ipv4-ucast]"
//
// ```
type VrfAddressFamily struct {
	pulumi.CustomResourceState

	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily pulumi.StringOutput `pulumi:"addressFamily"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// VRF name.
	Vrf pulumi.StringOutput `pulumi:"vrf"`
}

// NewVrfAddressFamily registers a new resource with the given unique name, arguments, and options.
func NewVrfAddressFamily(ctx *pulumi.Context,
	name string, args *VrfAddressFamilyArgs, opts ...pulumi.ResourceOption) (*VrfAddressFamily, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddressFamily == nil {
		return nil, errors.New("invalid value for required argument 'AddressFamily'")
	}
	if args.Vrf == nil {
		return nil, errors.New("invalid value for required argument 'Vrf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VrfAddressFamily
	err := ctx.RegisterResource("nxos:index/vrfAddressFamily:VrfAddressFamily", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrfAddressFamily gets an existing VrfAddressFamily resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrfAddressFamily(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrfAddressFamilyState, opts ...pulumi.ResourceOption) (*VrfAddressFamily, error) {
	var resource VrfAddressFamily
	err := ctx.ReadResource("nxos:index/vrfAddressFamily:VrfAddressFamily", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrfAddressFamily resources.
type vrfAddressFamilyState struct {
	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily *string `pulumi:"addressFamily"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// VRF name.
	Vrf *string `pulumi:"vrf"`
}

type VrfAddressFamilyState struct {
	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// VRF name.
	Vrf pulumi.StringPtrInput
}

func (VrfAddressFamilyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrfAddressFamilyState)(nil)).Elem()
}

type vrfAddressFamilyArgs struct {
	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily string `pulumi:"addressFamily"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// VRF name.
	Vrf string `pulumi:"vrf"`
}

// The set of arguments for constructing a VrfAddressFamily resource.
type VrfAddressFamilyArgs struct {
	// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
	AddressFamily pulumi.StringInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// VRF name.
	Vrf pulumi.StringInput
}

func (VrfAddressFamilyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrfAddressFamilyArgs)(nil)).Elem()
}

type VrfAddressFamilyInput interface {
	pulumi.Input

	ToVrfAddressFamilyOutput() VrfAddressFamilyOutput
	ToVrfAddressFamilyOutputWithContext(ctx context.Context) VrfAddressFamilyOutput
}

func (*VrfAddressFamily) ElementType() reflect.Type {
	return reflect.TypeOf((**VrfAddressFamily)(nil)).Elem()
}

func (i *VrfAddressFamily) ToVrfAddressFamilyOutput() VrfAddressFamilyOutput {
	return i.ToVrfAddressFamilyOutputWithContext(context.Background())
}

func (i *VrfAddressFamily) ToVrfAddressFamilyOutputWithContext(ctx context.Context) VrfAddressFamilyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfAddressFamilyOutput)
}

func (i *VrfAddressFamily) ToOutput(ctx context.Context) pulumix.Output[*VrfAddressFamily] {
	return pulumix.Output[*VrfAddressFamily]{
		OutputState: i.ToVrfAddressFamilyOutputWithContext(ctx).OutputState,
	}
}

// VrfAddressFamilyArrayInput is an input type that accepts VrfAddressFamilyArray and VrfAddressFamilyArrayOutput values.
// You can construct a concrete instance of `VrfAddressFamilyArrayInput` via:
//
//	VrfAddressFamilyArray{ VrfAddressFamilyArgs{...} }
type VrfAddressFamilyArrayInput interface {
	pulumi.Input

	ToVrfAddressFamilyArrayOutput() VrfAddressFamilyArrayOutput
	ToVrfAddressFamilyArrayOutputWithContext(context.Context) VrfAddressFamilyArrayOutput
}

type VrfAddressFamilyArray []VrfAddressFamilyInput

func (VrfAddressFamilyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrfAddressFamily)(nil)).Elem()
}

func (i VrfAddressFamilyArray) ToVrfAddressFamilyArrayOutput() VrfAddressFamilyArrayOutput {
	return i.ToVrfAddressFamilyArrayOutputWithContext(context.Background())
}

func (i VrfAddressFamilyArray) ToVrfAddressFamilyArrayOutputWithContext(ctx context.Context) VrfAddressFamilyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfAddressFamilyArrayOutput)
}

func (i VrfAddressFamilyArray) ToOutput(ctx context.Context) pulumix.Output[[]*VrfAddressFamily] {
	return pulumix.Output[[]*VrfAddressFamily]{
		OutputState: i.ToVrfAddressFamilyArrayOutputWithContext(ctx).OutputState,
	}
}

// VrfAddressFamilyMapInput is an input type that accepts VrfAddressFamilyMap and VrfAddressFamilyMapOutput values.
// You can construct a concrete instance of `VrfAddressFamilyMapInput` via:
//
//	VrfAddressFamilyMap{ "key": VrfAddressFamilyArgs{...} }
type VrfAddressFamilyMapInput interface {
	pulumi.Input

	ToVrfAddressFamilyMapOutput() VrfAddressFamilyMapOutput
	ToVrfAddressFamilyMapOutputWithContext(context.Context) VrfAddressFamilyMapOutput
}

type VrfAddressFamilyMap map[string]VrfAddressFamilyInput

func (VrfAddressFamilyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrfAddressFamily)(nil)).Elem()
}

func (i VrfAddressFamilyMap) ToVrfAddressFamilyMapOutput() VrfAddressFamilyMapOutput {
	return i.ToVrfAddressFamilyMapOutputWithContext(context.Background())
}

func (i VrfAddressFamilyMap) ToVrfAddressFamilyMapOutputWithContext(ctx context.Context) VrfAddressFamilyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfAddressFamilyMapOutput)
}

func (i VrfAddressFamilyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VrfAddressFamily] {
	return pulumix.Output[map[string]*VrfAddressFamily]{
		OutputState: i.ToVrfAddressFamilyMapOutputWithContext(ctx).OutputState,
	}
}

type VrfAddressFamilyOutput struct{ *pulumi.OutputState }

func (VrfAddressFamilyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrfAddressFamily)(nil)).Elem()
}

func (o VrfAddressFamilyOutput) ToVrfAddressFamilyOutput() VrfAddressFamilyOutput {
	return o
}

func (o VrfAddressFamilyOutput) ToVrfAddressFamilyOutputWithContext(ctx context.Context) VrfAddressFamilyOutput {
	return o
}

func (o VrfAddressFamilyOutput) ToOutput(ctx context.Context) pulumix.Output[*VrfAddressFamily] {
	return pulumix.Output[*VrfAddressFamily]{
		OutputState: o.OutputState,
	}
}

// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
func (o VrfAddressFamilyOutput) AddressFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *VrfAddressFamily) pulumi.StringOutput { return v.AddressFamily }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o VrfAddressFamilyOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VrfAddressFamily) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// VRF name.
func (o VrfAddressFamilyOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v *VrfAddressFamily) pulumi.StringOutput { return v.Vrf }).(pulumi.StringOutput)
}

type VrfAddressFamilyArrayOutput struct{ *pulumi.OutputState }

func (VrfAddressFamilyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrfAddressFamily)(nil)).Elem()
}

func (o VrfAddressFamilyArrayOutput) ToVrfAddressFamilyArrayOutput() VrfAddressFamilyArrayOutput {
	return o
}

func (o VrfAddressFamilyArrayOutput) ToVrfAddressFamilyArrayOutputWithContext(ctx context.Context) VrfAddressFamilyArrayOutput {
	return o
}

func (o VrfAddressFamilyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VrfAddressFamily] {
	return pulumix.Output[[]*VrfAddressFamily]{
		OutputState: o.OutputState,
	}
}

func (o VrfAddressFamilyArrayOutput) Index(i pulumi.IntInput) VrfAddressFamilyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VrfAddressFamily {
		return vs[0].([]*VrfAddressFamily)[vs[1].(int)]
	}).(VrfAddressFamilyOutput)
}

type VrfAddressFamilyMapOutput struct{ *pulumi.OutputState }

func (VrfAddressFamilyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrfAddressFamily)(nil)).Elem()
}

func (o VrfAddressFamilyMapOutput) ToVrfAddressFamilyMapOutput() VrfAddressFamilyMapOutput {
	return o
}

func (o VrfAddressFamilyMapOutput) ToVrfAddressFamilyMapOutputWithContext(ctx context.Context) VrfAddressFamilyMapOutput {
	return o
}

func (o VrfAddressFamilyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VrfAddressFamily] {
	return pulumix.Output[map[string]*VrfAddressFamily]{
		OutputState: o.OutputState,
	}
}

func (o VrfAddressFamilyMapOutput) MapIndex(k pulumi.StringInput) VrfAddressFamilyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VrfAddressFamily {
		return vs[0].(map[string]*VrfAddressFamily)[vs[1].(string)]
	}).(VrfAddressFamilyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrfAddressFamilyInput)(nil)).Elem(), &VrfAddressFamily{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfAddressFamilyArrayInput)(nil)).Elem(), VrfAddressFamilyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfAddressFamilyMapInput)(nil)).Elem(), VrfAddressFamilyMap{})
	pulumi.RegisterOutputType(VrfAddressFamilyOutput{})
	pulumi.RegisterOutputType(VrfAddressFamilyArrayOutput{})
	pulumi.RegisterOutputType(VrfAddressFamilyMapOutput{})
}
