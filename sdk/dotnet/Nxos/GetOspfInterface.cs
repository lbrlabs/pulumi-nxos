// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetOspfInterface
    {
        /// <summary>
        /// This data source can read the OSPF interface configuration.
        /// 
        /// - API Documentation: [ospfIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:If/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetOspfInterface.Invoke(new()
        ///     {
        ///         InstanceName = "OSPF1",
        ///         InterfaceId = "eth1/10",
        ///         VrfName = "VRF1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOspfInterfaceResult> InvokeAsync(GetOspfInterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOspfInterfaceResult>("nxos:index/getOspfInterface:getOspfInterface", args ?? new GetOspfInterfaceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the OSPF interface configuration.
        /// 
        /// - API Documentation: [ospfIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:If/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetOspfInterface.Invoke(new()
        ///     {
        ///         InstanceName = "OSPF1",
        ///         InterfaceId = "eth1/10",
        ///         VrfName = "VRF1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetOspfInterfaceResult> Invoke(GetOspfInterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOspfInterfaceResult>("nxos:index/getOspfInterface:getOspfInterface", args ?? new GetOspfInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOspfInterfaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// OSPF instance name.
        /// </summary>
        [Input("instanceName", required: true)]
        public string InstanceName { get; set; } = null!;

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public string InterfaceId { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrfName", required: true)]
        public string VrfName { get; set; } = null!;

        public GetOspfInterfaceArgs()
        {
        }
        public static new GetOspfInterfaceArgs Empty => new GetOspfInterfaceArgs();
    }

    public sealed class GetOspfInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// OSPF instance name.
        /// </summary>
        [Input("instanceName", required: true)]
        public Input<string> InstanceName { get; set; } = null!;

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrfName", required: true)]
        public Input<string> VrfName { get; set; } = null!;

        public GetOspfInterfaceInvokeArgs()
        {
        }
        public static new GetOspfInterfaceInvokeArgs Empty => new GetOspfInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetOspfInterfaceResult
    {
        /// <summary>
        /// Advertise secondary IP addresses.
        /// </summary>
        public readonly bool AdvertiseSecondaries;
        /// <summary>
        /// Area identifier to which a network or interface belongs in IPv4 address format.
        /// </summary>
        public readonly string Area;
        /// <summary>
        /// Bidirectional Forwarding Detection (BFD).
        /// </summary>
        public readonly string Bfd;
        /// <summary>
        /// Specifies the cost of interface.
        /// </summary>
        public readonly int Cost;
        /// <summary>
        /// Dead interval, interval after which router declares that neighbor as down.
        /// </summary>
        public readonly int DeadInterval;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Hello interval, interval between hello packets that OSPF sends on the interface.
        /// </summary>
        public readonly int HelloInterval;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// OSPF instance name.
        /// </summary>
        public readonly string InstanceName;
        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        public readonly string InterfaceId;
        /// <summary>
        /// Network type.
        /// </summary>
        public readonly string NetworkType;
        /// <summary>
        /// Passive interface control. Interface can be configured as passive or non-passive.
        /// </summary>
        public readonly string Passive;
        /// <summary>
        /// Priority, used in determining the designated router on this network.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// VRF name.
        /// </summary>
        public readonly string VrfName;

        [OutputConstructor]
        private GetOspfInterfaceResult(
            bool advertiseSecondaries,

            string area,

            string bfd,

            int cost,

            int deadInterval,

            string? device,

            int helloInterval,

            string id,

            string instanceName,

            string interfaceId,

            string networkType,

            string passive,

            int priority,

            string vrfName)
        {
            AdvertiseSecondaries = advertiseSecondaries;
            Area = area;
            Bfd = bfd;
            Cost = cost;
            DeadInterval = deadInterval;
            Device = device;
            HelloInterval = helloInterval;
            Id = id;
            InstanceName = instanceName;
            InterfaceId = interfaceId;
            NetworkType = networkType;
            Passive = passive;
            Priority = priority;
            VrfName = vrfName;
        }
    }
}
