// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetBgpRouteControl
    {
        /// <summary>
        /// This data source can read the BGP Route Control configuration.
        /// 
        /// - API Documentation: [bgpRtCtrl](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/bgp:RtCtrl/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetBgpRouteControl.Invoke(new()
        ///     {
        ///         Asn = "65001",
        ///         Vrf = "default",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBgpRouteControlResult> InvokeAsync(GetBgpRouteControlArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBgpRouteControlResult>("nxos:index/getBgpRouteControl:getBgpRouteControl", args ?? new GetBgpRouteControlArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the BGP Route Control configuration.
        /// 
        /// - API Documentation: [bgpRtCtrl](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/bgp:RtCtrl/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetBgpRouteControl.Invoke(new()
        ///     {
        ///         Asn = "65001",
        ///         Vrf = "default",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetBgpRouteControlResult> Invoke(GetBgpRouteControlInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBgpRouteControlResult>("nxos:index/getBgpRouteControl:getBgpRouteControl", args ?? new GetBgpRouteControlInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBgpRouteControlArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Autonomous system number.
        /// </summary>
        [Input("asn", required: true)]
        public string Asn { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrf", required: true)]
        public string Vrf { get; set; } = null!;

        public GetBgpRouteControlArgs()
        {
        }
        public static new GetBgpRouteControlArgs Empty => new GetBgpRouteControlArgs();
    }

    public sealed class GetBgpRouteControlInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Autonomous system number.
        /// </summary>
        [Input("asn", required: true)]
        public Input<string> Asn { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrf", required: true)]
        public Input<string> Vrf { get; set; } = null!;

        public GetBgpRouteControlInvokeArgs()
        {
        }
        public static new GetBgpRouteControlInvokeArgs Empty => new GetBgpRouteControlInvokeArgs();
    }


    [OutputType]
    public sealed class GetBgpRouteControlResult
    {
        /// <summary>
        /// Autonomous system number.
        /// </summary>
        public readonly string Asn;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Enforce First AS For Ebgp. Can be configured only for VRF default.
        /// </summary>
        public readonly string EnforceFirstAs;
        /// <summary>
        /// Accelerate the hardware updates for IP/IPv6 adjacencies for neighbor. Can be configured only for VRF default.
        /// </summary>
        public readonly string FibAccelerate;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Log Neighbor Changes.
        /// </summary>
        public readonly string LogNeighborChanges;
        /// <summary>
        /// Suppress Routes: Advertise only routes that are programmed in hardware to peers. Can be configured only for VRF default.
        /// </summary>
        public readonly string SuppressRoutes;
        /// <summary>
        /// VRF name.
        /// </summary>
        public readonly string Vrf;

        [OutputConstructor]
        private GetBgpRouteControlResult(
            string asn,

            string? device,

            string enforceFirstAs,

            string fibAccelerate,

            string id,

            string logNeighborChanges,

            string suppressRoutes,

            string vrf)
        {
            Asn = asn;
            Device = device;
            EnforceFirstAs = enforceFirstAs;
            FibAccelerate = fibAccelerate;
            Id = id;
            LogNeighborChanges = logNeighborChanges;
            SuppressRoutes = suppressRoutes;
            Vrf = vrf;
        }
    }
}
