// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetIpv4Interface
    {
        /// <summary>
        /// This data source can read an IPv4 interface.
        /// 
        /// - API Documentation: [ipv4If](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:If/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetIpv4Interface.Invoke(new()
        ///     {
        ///         InterfaceId = "eth1/10",
        ///         Vrf = "default",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIpv4InterfaceResult> InvokeAsync(GetIpv4InterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpv4InterfaceResult>("nxos:index/getIpv4Interface:getIpv4Interface", args ?? new GetIpv4InterfaceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read an IPv4 interface.
        /// 
        /// - API Documentation: [ipv4If](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:If/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetIpv4Interface.Invoke(new()
        ///     {
        ///         InterfaceId = "eth1/10",
        ///         Vrf = "default",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIpv4InterfaceResult> Invoke(GetIpv4InterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpv4InterfaceResult>("nxos:index/getIpv4Interface:getIpv4Interface", args ?? new GetIpv4InterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpv4InterfaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public string InterfaceId { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrf", required: true)]
        public string Vrf { get; set; } = null!;

        public GetIpv4InterfaceArgs()
        {
        }
        public static new GetIpv4InterfaceArgs Empty => new GetIpv4InterfaceArgs();
    }

    public sealed class GetIpv4InterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrf", required: true)]
        public Input<string> Vrf { get; set; } = null!;

        public GetIpv4InterfaceInvokeArgs()
        {
        }
        public static new GetIpv4InterfaceInvokeArgs Empty => new GetIpv4InterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpv4InterfaceResult
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// ip drop-glean enabled/disabled.
        /// </summary>
        public readonly string DropGlean;
        /// <summary>
        /// ip forward enabled/disabled.
        /// </summary>
        public readonly string Forward;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        public readonly string InterfaceId;
        /// <summary>
        /// IP unnumbered. Reference to interface must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        public readonly string Unnumbered;
        /// <summary>
        /// URPF (unicast Reverse Path Forwarding).
        /// </summary>
        public readonly string Urpf;
        /// <summary>
        /// VRF name.
        /// </summary>
        public readonly string Vrf;

        [OutputConstructor]
        private GetIpv4InterfaceResult(
            string? device,

            string dropGlean,

            string forward,

            string id,

            string interfaceId,

            string unnumbered,

            string urpf,

            string vrf)
        {
            Device = device;
            DropGlean = dropGlean;
            Forward = forward;
            Id = id;
            InterfaceId = interfaceId;
            Unnumbered = unnumbered;
            Urpf = urpf;
            Vrf = vrf;
        }
    }
}
