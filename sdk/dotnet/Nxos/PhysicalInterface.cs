// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    /// <summary>
    /// This resource can manage a physical interface.
    /// 
    /// - API Documentation: [l1PhysIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/l1:PhysIf/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nxos = Lbrlabs.PulumiPackage.Nxos;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Nxos.PhysicalInterface("example", new()
    ///     {
    ///         AccessVlan = "unknown",
    ///         AdminState = "up",
    ///         AutoNegotiation = "on",
    ///         Bandwidth = 1000,
    ///         Delay = 10,
    ///         Description = "My Description",
    ///         Duplex = "auto",
    ///         FecMode = "auto",
    ///         InterfaceId = "eth1/10",
    ///         Layer = "Layer3",
    ///         LinkDebounceDown = 200,
    ///         LinkDebounceUp = 0,
    ///         LinkLogging = "enable",
    ///         Medium = "broadcast",
    ///         Mode = "access",
    ///         Mtu = 1500,
    ///         NativeVlan = "unknown",
    ///         Speed = "auto",
    ///         SpeedGroup = "auto",
    ///         TrunkVlans = "1-4094",
    ///         UniDirectionalEthernet = "disable",
    ///         UserConfiguredFlags = "admin_layer,admin_mtu,admin_state",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import nxos:index/physicalInterface:PhysicalInterface example "sys/intf/phys-[eth1/10]"
    /// ```
    /// </summary>
    [NxosResourceType("nxos:index/physicalInterface:PhysicalInterface")]
    public partial class PhysicalInterface : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        /// </summary>
        [Output("accessVlan")]
        public Output<string> AccessVlan { get; private set; } = null!;

        /// <summary>
        /// Administrative port state. - Choices: `up`, `down` - Default value: `up`
        /// </summary>
        [Output("adminState")]
        public Output<string> AdminState { get; private set; } = null!;

        /// <summary>
        /// Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
        /// </summary>
        [Output("autoNegotiation")]
        public Output<string> AutoNegotiation { get; private set; } = null!;

        /// <summary>
        /// The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
        /// value: `0`
        /// </summary>
        [Output("bandwidth")]
        public Output<int> Bandwidth { get; private set; } = null!;

        /// <summary>
        /// The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
        /// </summary>
        [Output("delay")]
        public Output<int> Delay { get; private set; } = null!;

        /// <summary>
        /// Interface description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
        /// </summary>
        [Output("duplex")]
        public Output<string> Duplex { get; private set; } = null!;

        /// <summary>
        /// FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
        /// </summary>
        [Output("fecMode")]
        public Output<string> FecMode { get; private set; } = null!;

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Output("interfaceId")]
        public Output<string> InterfaceId { get; private set; } = null!;

        /// <summary>
        /// Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
        /// </summary>
        [Output("layer")]
        public Output<string> Layer { get; private set; } = null!;

        /// <summary>
        /// Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
        /// </summary>
        [Output("linkDebounceDown")]
        public Output<int> LinkDebounceDown { get; private set; } = null!;

        /// <summary>
        /// Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
        /// </summary>
        [Output("linkDebounceUp")]
        public Output<int> LinkDebounceUp { get; private set; } = null!;

        /// <summary>
        /// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        /// </summary>
        [Output("linkLogging")]
        public Output<string> LinkLogging { get; private set; } = null!;

        /// <summary>
        /// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        /// </summary>
        [Output("medium")]
        public Output<string> Medium { get; private set; } = null!;

        /// <summary>
        /// Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
        /// `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Output("mtu")]
        public Output<int> Mtu { get; private set; } = null!;

        /// <summary>
        /// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        /// </summary>
        [Output("nativeVlan")]
        public Output<string> NativeVlan { get; private set; } = null!;

        /// <summary>
        /// Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
        /// `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
        /// `auto`
        /// </summary>
        [Output("speed")]
        public Output<string> Speed { get; private set; } = null!;

        /// <summary>
        /// Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
        /// </summary>
        [Output("speedGroup")]
        public Output<string> SpeedGroup { get; private set; } = null!;

        /// <summary>
        /// List of trunk VLANs. - Default value: `1-4094`
        /// </summary>
        [Output("trunkVlans")]
        public Output<string> TrunkVlans { get; private set; } = null!;

        /// <summary>
        /// UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
        /// </summary>
        [Output("uniDirectionalEthernet")]
        public Output<string> UniDirectionalEthernet { get; private set; } = null!;

        /// <summary>
        /// Port User Config Flags.
        /// </summary>
        [Output("userConfiguredFlags")]
        public Output<string?> UserConfiguredFlags { get; private set; } = null!;


        /// <summary>
        /// Create a PhysicalInterface resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PhysicalInterface(string name, PhysicalInterfaceArgs args, CustomResourceOptions? options = null)
            : base("nxos:index/physicalInterface:PhysicalInterface", name, args ?? new PhysicalInterfaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PhysicalInterface(string name, Input<string> id, PhysicalInterfaceState? state = null, CustomResourceOptions? options = null)
            : base("nxos:index/physicalInterface:PhysicalInterface", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PhysicalInterface resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PhysicalInterface Get(string name, Input<string> id, PhysicalInterfaceState? state = null, CustomResourceOptions? options = null)
        {
            return new PhysicalInterface(name, id, state, options);
        }
    }

    public sealed class PhysicalInterfaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        /// </summary>
        [Input("accessVlan")]
        public Input<string>? AccessVlan { get; set; }

        /// <summary>
        /// Administrative port state. - Choices: `up`, `down` - Default value: `up`
        /// </summary>
        [Input("adminState")]
        public Input<string>? AdminState { get; set; }

        /// <summary>
        /// Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
        /// </summary>
        [Input("autoNegotiation")]
        public Input<string>? AutoNegotiation { get; set; }

        /// <summary>
        /// The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
        /// value: `0`
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
        /// </summary>
        [Input("delay")]
        public Input<int>? Delay { get; set; }

        /// <summary>
        /// Interface description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
        /// </summary>
        [Input("duplex")]
        public Input<string>? Duplex { get; set; }

        /// <summary>
        /// FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
        /// </summary>
        [Input("fecMode")]
        public Input<string>? FecMode { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        /// <summary>
        /// Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
        /// </summary>
        [Input("layer")]
        public Input<string>? Layer { get; set; }

        /// <summary>
        /// Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
        /// </summary>
        [Input("linkDebounceDown")]
        public Input<int>? LinkDebounceDown { get; set; }

        /// <summary>
        /// Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
        /// </summary>
        [Input("linkDebounceUp")]
        public Input<int>? LinkDebounceUp { get; set; }

        /// <summary>
        /// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        /// </summary>
        [Input("linkLogging")]
        public Input<string>? LinkLogging { get; set; }

        /// <summary>
        /// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        /// </summary>
        [Input("medium")]
        public Input<string>? Medium { get; set; }

        /// <summary>
        /// Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
        /// `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        /// </summary>
        [Input("nativeVlan")]
        public Input<string>? NativeVlan { get; set; }

        /// <summary>
        /// Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
        /// `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
        /// `auto`
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
        /// </summary>
        [Input("speedGroup")]
        public Input<string>? SpeedGroup { get; set; }

        /// <summary>
        /// List of trunk VLANs. - Default value: `1-4094`
        /// </summary>
        [Input("trunkVlans")]
        public Input<string>? TrunkVlans { get; set; }

        /// <summary>
        /// UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
        /// </summary>
        [Input("uniDirectionalEthernet")]
        public Input<string>? UniDirectionalEthernet { get; set; }

        /// <summary>
        /// Port User Config Flags.
        /// </summary>
        [Input("userConfiguredFlags")]
        public Input<string>? UserConfiguredFlags { get; set; }

        public PhysicalInterfaceArgs()
        {
        }
        public static new PhysicalInterfaceArgs Empty => new PhysicalInterfaceArgs();
    }

    public sealed class PhysicalInterfaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        /// </summary>
        [Input("accessVlan")]
        public Input<string>? AccessVlan { get; set; }

        /// <summary>
        /// Administrative port state. - Choices: `up`, `down` - Default value: `up`
        /// </summary>
        [Input("adminState")]
        public Input<string>? AdminState { get; set; }

        /// <summary>
        /// Administrative port auto-negotiation. - Choices: `on`, `off`, `25G` - Default value: `on`
        /// </summary>
        [Input("autoNegotiation")]
        public Input<string>? AutoNegotiation { get; set; }

        /// <summary>
        /// The bandwidth parameter for a routed interface, port channel, or subinterface. - Range: `0`-`3200000000` - Default
        /// value: `0`
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// The administrative port delay time. - Range: `1`-`16777215` - Default value: `1`
        /// </summary>
        [Input("delay")]
        public Input<int>? Delay { get; set; }

        /// <summary>
        /// Interface description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Duplex. - Choices: `auto`, `full`, `half` - Default value: `auto`
        /// </summary>
        [Input("duplex")]
        public Input<string>? Duplex { get; set; }

        /// <summary>
        /// FEC mode. - Choices: `fc-fec`, `rs-fec`, `fec-off`, `auto`, `rs-ieee`, `rs-cons16`, `kp-fec` - Default value: `auto`
        /// </summary>
        [Input("fecMode")]
        public Input<string>? FecMode { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId")]
        public Input<string>? InterfaceId { get; set; }

        /// <summary>
        /// Administrative port layer. - Choices: `Layer2`, `Layer3` - Default value: `Layer2`
        /// </summary>
        [Input("layer")]
        public Input<string>? Layer { get; set; }

        /// <summary>
        /// Administrative port link debounce interval. - Range: `0`-`20000` - Default value: `100`
        /// </summary>
        [Input("linkDebounceDown")]
        public Input<int>? LinkDebounceDown { get; set; }

        /// <summary>
        /// Link Debounce Interval - LinkUp Event. - Range: `0`-`20000` - Default value: `0`
        /// </summary>
        [Input("linkDebounceUp")]
        public Input<int>? LinkDebounceUp { get; set; }

        /// <summary>
        /// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        /// </summary>
        [Input("linkLogging")]
        public Input<string>? LinkLogging { get; set; }

        /// <summary>
        /// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        /// </summary>
        [Input("medium")]
        public Input<string>? Medium { get; set; }

        /// <summary>
        /// Administrative port mode. - Choices: `access`, `trunk`, `fex-fabric`, `dot1q-tunnel`, `promiscuous`, `host`,
        /// `trunk_secondary`, `trunk_promiscuous`, `vntag` - Default value: `access`
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `vlan-1`
        /// </summary>
        [Input("nativeVlan")]
        public Input<string>? NativeVlan { get; set; }

        /// <summary>
        /// Administrative port speed. - Choices: `unknown`, `100M`, `1G`, `10G`, `40G`, `auto`, `auto 100M`, `auto 100M 1G`,
        /// `100G`, `25G`, `10M`, `50G`, `200G`, `400G`, `2.5G`, `5G`, `auto 2.5G 5G 10G`, `auto 100M 1G 2.5G 5G` - Default value:
        /// `auto`
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Speed group. - Choices: `unknown`, `1000`, `10000`, `40000`, `auto`, `25000` - Default value: `auto`
        /// </summary>
        [Input("speedGroup")]
        public Input<string>? SpeedGroup { get; set; }

        /// <summary>
        /// List of trunk VLANs. - Default value: `1-4094`
        /// </summary>
        [Input("trunkVlans")]
        public Input<string>? TrunkVlans { get; set; }

        /// <summary>
        /// UDE (Uni-Directional Ethernet). - Choices: `disable`, `send-only`, `receive-only` - Default value: `disable`
        /// </summary>
        [Input("uniDirectionalEthernet")]
        public Input<string>? UniDirectionalEthernet { get; set; }

        /// <summary>
        /// Port User Config Flags.
        /// </summary>
        [Input("userConfiguredFlags")]
        public Input<string>? UserConfiguredFlags { get; set; }

        public PhysicalInterfaceState()
        {
        }
        public static new PhysicalInterfaceState Empty => new PhysicalInterfaceState();
    }
}
