// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetOspfArea
    {
        /// <summary>
        /// This data source can read the OSPF Area configuration.
        /// 
        /// - API Documentation: [ospfArea](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:Area/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetOspfArea.Invoke(new()
        ///     {
        ///         AreaId = "0.0.0.10",
        ///         InstanceName = "OSPF1",
        ///         VrfName = "VRF1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOspfAreaResult> InvokeAsync(GetOspfAreaArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOspfAreaResult>("nxos:index/getOspfArea:getOspfArea", args ?? new GetOspfAreaArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the OSPF Area configuration.
        /// 
        /// - API Documentation: [ospfArea](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/ospf:Area/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetOspfArea.Invoke(new()
        ///     {
        ///         AreaId = "0.0.0.10",
        ///         InstanceName = "OSPF1",
        ///         VrfName = "VRF1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetOspfAreaResult> Invoke(GetOspfAreaInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOspfAreaResult>("nxos:index/getOspfArea:getOspfArea", args ?? new GetOspfAreaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOspfAreaArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Area identifier to which a network or interface belongs in IPv4 address format.
        /// </summary>
        [Input("areaId", required: true)]
        public string AreaId { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// OSPF instance name.
        /// </summary>
        [Input("instanceName", required: true)]
        public string InstanceName { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrfName", required: true)]
        public string VrfName { get; set; } = null!;

        public GetOspfAreaArgs()
        {
        }
        public static new GetOspfAreaArgs Empty => new GetOspfAreaArgs();
    }

    public sealed class GetOspfAreaInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Area identifier to which a network or interface belongs in IPv4 address format.
        /// </summary>
        [Input("areaId", required: true)]
        public Input<string> AreaId { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// OSPF instance name.
        /// </summary>
        [Input("instanceName", required: true)]
        public Input<string> InstanceName { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrfName", required: true)]
        public Input<string> VrfName { get; set; } = null!;

        public GetOspfAreaInvokeArgs()
        {
        }
        public static new GetOspfAreaInvokeArgs Empty => new GetOspfAreaInvokeArgs();
    }


    [OutputType]
    public sealed class GetOspfAreaResult
    {
        /// <summary>
        /// Area identifier to which a network or interface belongs in IPv4 address format.
        /// </summary>
        public readonly string AreaId;
        /// <summary>
        /// Authentication type.
        /// </summary>
        public readonly string AuthenticationType;
        /// <summary>
        /// Area cost, specifies cost for default summary LSAs. Used with nssa/stub area types.
        /// </summary>
        public readonly int Cost;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// OSPF instance name.
        /// </summary>
        public readonly string InstanceName;
        /// <summary>
        /// Area type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// VRF name.
        /// </summary>
        public readonly string VrfName;

        [OutputConstructor]
        private GetOspfAreaResult(
            string areaId,

            string authenticationType,

            int cost,

            string? device,

            string id,

            string instanceName,

            string type,

            string vrfName)
        {
            AreaId = areaId;
            AuthenticationType = authenticationType;
            Cost = cost;
            Device = device;
            Id = id;
            InstanceName = instanceName;
            Type = type;
            VrfName = vrfName;
        }
    }
}
