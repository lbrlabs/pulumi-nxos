// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetIpv4AccessListEntry
    {
        /// <summary>
        /// This data source can read IPv4 Access List Entries.
        /// 
        /// - API Documentation: [ipv4aclACE](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Security%20and%20Policing/ipv4acl:ACE/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetIpv4AccessListEntry.Invoke(new()
        ///     {
        ///         Name = "ACL1",
        ///         SequenceNumber = 10,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIpv4AccessListEntryResult> InvokeAsync(GetIpv4AccessListEntryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpv4AccessListEntryResult>("nxos:index/getIpv4AccessListEntry:getIpv4AccessListEntry", args ?? new GetIpv4AccessListEntryArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read IPv4 Access List Entries.
        /// 
        /// - API Documentation: [ipv4aclACE](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Security%20and%20Policing/ipv4acl:ACE/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetIpv4AccessListEntry.Invoke(new()
        ///     {
        ///         Name = "ACL1",
        ///         SequenceNumber = 10,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIpv4AccessListEntryResult> Invoke(GetIpv4AccessListEntryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpv4AccessListEntryResult>("nxos:index/getIpv4AccessListEntry:getIpv4AccessListEntry", args ?? new GetIpv4AccessListEntryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpv4AccessListEntryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Access list name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Sequence number.
        /// </summary>
        [Input("sequenceNumber", required: true)]
        public int SequenceNumber { get; set; }

        public GetIpv4AccessListEntryArgs()
        {
        }
        public static new GetIpv4AccessListEntryArgs Empty => new GetIpv4AccessListEntryArgs();
    }

    public sealed class GetIpv4AccessListEntryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Access list name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Sequence number.
        /// </summary>
        [Input("sequenceNumber", required: true)]
        public Input<int> SequenceNumber { get; set; } = null!;

        public GetIpv4AccessListEntryInvokeArgs()
        {
        }
        public static new GetIpv4AccessListEntryInvokeArgs Empty => new GetIpv4AccessListEntryInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpv4AccessListEntryResult
    {
        /// <summary>
        /// Match TCP ACK flag.
        /// </summary>
        public readonly bool Ack;
        /// <summary>
        /// Action.
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// Destination address group.
        /// </summary>
        public readonly string DestinationAddressGroup;
        /// <summary>
        /// First destination port number or name.
        /// </summary>
        public readonly string DestinationPort1;
        /// <summary>
        /// Second destination port number or name.
        /// </summary>
        public readonly string DestinationPort2;
        /// <summary>
        /// Destination port group.
        /// </summary>
        public readonly string DestinationPortGroup;
        /// <summary>
        /// Destination port mask number or name.
        /// </summary>
        public readonly string DestinationPortMask;
        /// <summary>
        /// Destination port operator.
        /// </summary>
        public readonly string DestinationPortOperator;
        /// <summary>
        /// Destination prefix.
        /// </summary>
        public readonly string DestinationPrefix;
        /// <summary>
        /// Destination prefix length.
        /// </summary>
        public readonly string DestinationPrefixLength;
        /// <summary>
        /// Destination prefix mask.
        /// </summary>
        public readonly string DestinationPrefixMask;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Match DSCP.
        /// </summary>
        public readonly int Dscp;
        /// <summary>
        /// Match TCP EST flag.
        /// </summary>
        public readonly bool Est;
        /// <summary>
        /// Match TCP FIN flag.
        /// </summary>
        public readonly bool Fin;
        /// <summary>
        /// Match non-initial fragment.
        /// </summary>
        public readonly bool Fragment;
        /// <summary>
        /// HTTP option method.
        /// </summary>
        public readonly string HttpOptionType;
        /// <summary>
        /// ICMP code.
        /// </summary>
        public readonly int IcmpCode;
        /// <summary>
        /// ICMP type.
        /// </summary>
        public readonly int IcmpType;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Log matches against ACL entry.
        /// </summary>
        public readonly bool Logging;
        /// <summary>
        /// Access list name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// First packet length. Either `invalid` or a number between 19 and 9210.
        /// </summary>
        public readonly string PacketLength1;
        /// <summary>
        /// Second packet length. Either `invalid` or a number between 19 and 9210.
        /// </summary>
        public readonly string PacketLength2;
        /// <summary>
        /// Packet length operator.
        /// </summary>
        public readonly string PacketLengthOperator;
        /// <summary>
        /// Precedence. Either `unspecified` or a number between 0 and 7.
        /// </summary>
        public readonly string Precedence;
        /// <summary>
        /// Protocol name or number.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// Protocol mask name or number.
        /// </summary>
        public readonly string ProtocolMask;
        /// <summary>
        /// Match TCP PSH flag.
        /// </summary>
        public readonly bool Psh;
        /// <summary>
        /// Redirect action.
        /// </summary>
        public readonly string Redirect;
        /// <summary>
        /// ACL comment.
        /// </summary>
        public readonly string Remark;
        /// <summary>
        /// Match TCP REV flag.
        /// </summary>
        public readonly bool Rev;
        /// <summary>
        /// Match TCP RST flag.
        /// </summary>
        public readonly bool Rst;
        /// <summary>
        /// Sequence number.
        /// </summary>
        public readonly int SequenceNumber;
        /// <summary>
        /// Source address group.
        /// </summary>
        public readonly string SourceAddressGroup;
        /// <summary>
        /// First source port name or number.
        /// </summary>
        public readonly string SourcePort1;
        /// <summary>
        /// Second source port name or number.
        /// </summary>
        public readonly string SourcePort2;
        /// <summary>
        /// Source port group.
        /// </summary>
        public readonly string SourcePortGroup;
        /// <summary>
        /// Source port mask name or number.
        /// </summary>
        public readonly string SourcePortMask;
        /// <summary>
        /// Source port operator.
        /// </summary>
        public readonly string SourcePortOperator;
        /// <summary>
        /// Source prefix.
        /// </summary>
        public readonly string SourcePrefix;
        /// <summary>
        /// Source prefix length.
        /// </summary>
        public readonly string SourcePrefixLength;
        /// <summary>
        /// Source prefix mask.
        /// </summary>
        public readonly string SourcePrefixMask;
        /// <summary>
        /// Match TCP SYN flag.
        /// </summary>
        public readonly bool Syn;
        /// <summary>
        /// Time range name.
        /// </summary>
        public readonly string TimeRange;
        /// <summary>
        /// TTL.
        /// </summary>
        public readonly int Ttl;
        /// <summary>
        /// Match TCP URG flag.
        /// </summary>
        public readonly bool Urg;
        /// <summary>
        /// VLAN ID.
        /// </summary>
        public readonly int Vlan;
        /// <summary>
        /// NVE VNI ID. Either `invalid` or a number between 0 and 16777216.
        /// </summary>
        public readonly string Vni;

        [OutputConstructor]
        private GetIpv4AccessListEntryResult(
            bool ack,

            string action,

            string destinationAddressGroup,

            string destinationPort1,

            string destinationPort2,

            string destinationPortGroup,

            string destinationPortMask,

            string destinationPortOperator,

            string destinationPrefix,

            string destinationPrefixLength,

            string destinationPrefixMask,

            string? device,

            int dscp,

            bool est,

            bool fin,

            bool fragment,

            string httpOptionType,

            int icmpCode,

            int icmpType,

            string id,

            bool logging,

            string name,

            string packetLength1,

            string packetLength2,

            string packetLengthOperator,

            string precedence,

            string protocol,

            string protocolMask,

            bool psh,

            string redirect,

            string remark,

            bool rev,

            bool rst,

            int sequenceNumber,

            string sourceAddressGroup,

            string sourcePort1,

            string sourcePort2,

            string sourcePortGroup,

            string sourcePortMask,

            string sourcePortOperator,

            string sourcePrefix,

            string sourcePrefixLength,

            string sourcePrefixMask,

            bool syn,

            string timeRange,

            int ttl,

            bool urg,

            int vlan,

            string vni)
        {
            Ack = ack;
            Action = action;
            DestinationAddressGroup = destinationAddressGroup;
            DestinationPort1 = destinationPort1;
            DestinationPort2 = destinationPort2;
            DestinationPortGroup = destinationPortGroup;
            DestinationPortMask = destinationPortMask;
            DestinationPortOperator = destinationPortOperator;
            DestinationPrefix = destinationPrefix;
            DestinationPrefixLength = destinationPrefixLength;
            DestinationPrefixMask = destinationPrefixMask;
            Device = device;
            Dscp = dscp;
            Est = est;
            Fin = fin;
            Fragment = fragment;
            HttpOptionType = httpOptionType;
            IcmpCode = icmpCode;
            IcmpType = icmpType;
            Id = id;
            Logging = logging;
            Name = name;
            PacketLength1 = packetLength1;
            PacketLength2 = packetLength2;
            PacketLengthOperator = packetLengthOperator;
            Precedence = precedence;
            Protocol = protocol;
            ProtocolMask = protocolMask;
            Psh = psh;
            Redirect = redirect;
            Remark = remark;
            Rev = rev;
            Rst = rst;
            SequenceNumber = sequenceNumber;
            SourceAddressGroup = sourceAddressGroup;
            SourcePort1 = sourcePort1;
            SourcePort2 = sourcePort2;
            SourcePortGroup = sourcePortGroup;
            SourcePortMask = sourcePortMask;
            SourcePortOperator = sourcePortOperator;
            SourcePrefix = sourcePrefix;
            SourcePrefixLength = sourcePrefixLength;
            SourcePrefixMask = sourcePrefixMask;
            Syn = syn;
            TimeRange = timeRange;
            Ttl = ttl;
            Urg = urg;
            Vlan = vlan;
            Vni = vni;
        }
    }
}
