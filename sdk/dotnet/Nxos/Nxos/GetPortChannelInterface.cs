// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos.Nxos
{
    public static class GetPortChannelInterface
    {
        public static Task<GetPortChannelInterfaceResult> InvokeAsync(GetPortChannelInterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPortChannelInterfaceResult>("nxos:nxos/getPortChannelInterface:getPortChannelInterface", args ?? new GetPortChannelInterfaceArgs(), options.WithDefaults());

        public static Output<GetPortChannelInterfaceResult> Invoke(GetPortChannelInterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPortChannelInterfaceResult>("nxos:nxos/getPortChannelInterface:getPortChannelInterface", args ?? new GetPortChannelInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPortChannelInterfaceArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("interfaceId", required: true)]
        public string InterfaceId { get; set; } = null!;

        public GetPortChannelInterfaceArgs()
        {
        }
        public static new GetPortChannelInterfaceArgs Empty => new GetPortChannelInterfaceArgs();
    }

    public sealed class GetPortChannelInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        public GetPortChannelInterfaceInvokeArgs()
        {
        }
        public static new GetPortChannelInterfaceInvokeArgs Empty => new GetPortChannelInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetPortChannelInterfaceResult
    {
        public readonly string AccessVlan;
        public readonly string AdminState;
        public readonly string AutoNegotiation;
        public readonly int Bandwidth;
        public readonly int Delay;
        public readonly string Description;
        public readonly string? Device;
        public readonly string Duplex;
        public readonly string Id;
        public readonly string InterfaceId;
        public readonly string Layer;
        public readonly string LinkLogging;
        public readonly int MaximumLinks;
        public readonly string Medium;
        public readonly int MinimumLinks;
        public readonly string Mode;
        public readonly int Mtu;
        public readonly string NativeVlan;
        public readonly string PortChannelMode;
        public readonly string Speed;
        public readonly string SuspendIndividual;
        public readonly string TrunkVlans;
        public readonly string UserConfiguredFlags;

        [OutputConstructor]
        private GetPortChannelInterfaceResult(
            string accessVlan,

            string adminState,

            string autoNegotiation,

            int bandwidth,

            int delay,

            string description,

            string? device,

            string duplex,

            string id,

            string interfaceId,

            string layer,

            string linkLogging,

            int maximumLinks,

            string medium,

            int minimumLinks,

            string mode,

            int mtu,

            string nativeVlan,

            string portChannelMode,

            string speed,

            string suspendIndividual,

            string trunkVlans,

            string userConfiguredFlags)
        {
            AccessVlan = accessVlan;
            AdminState = adminState;
            AutoNegotiation = autoNegotiation;
            Bandwidth = bandwidth;
            Delay = delay;
            Description = description;
            Device = device;
            Duplex = duplex;
            Id = id;
            InterfaceId = interfaceId;
            Layer = layer;
            LinkLogging = linkLogging;
            MaximumLinks = maximumLinks;
            Medium = medium;
            MinimumLinks = minimumLinks;
            Mode = mode;
            Mtu = mtu;
            NativeVlan = nativeVlan;
            PortChannelMode = portChannelMode;
            Speed = speed;
            SuspendIndividual = suspendIndividual;
            TrunkVlans = trunkVlans;
            UserConfiguredFlags = userConfiguredFlags;
        }
    }
}
