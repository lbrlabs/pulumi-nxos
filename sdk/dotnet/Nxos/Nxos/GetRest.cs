// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos.Nxos
{
    public static class GetRest
    {
        public static Task<GetRestResult> InvokeAsync(GetRestArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRestResult>("nxos:nxos/getRest:getRest", args ?? new GetRestArgs(), options.WithDefaults());

        public static Output<GetRestResult> Invoke(GetRestInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRestResult>("nxos:nxos/getRest:getRest", args ?? new GetRestInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRestArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("dn", required: true)]
        public string Dn { get; set; } = null!;

        public GetRestArgs()
        {
        }
        public static new GetRestArgs Empty => new GetRestArgs();
    }

    public sealed class GetRestInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("dn", required: true)]
        public Input<string> Dn { get; set; } = null!;

        public GetRestInvokeArgs()
        {
        }
        public static new GetRestInvokeArgs Empty => new GetRestInvokeArgs();
    }


    [OutputType]
    public sealed class GetRestResult
    {
        public readonly string ClassName;
        public readonly ImmutableDictionary<string, string> Content;
        public readonly string? Device;
        public readonly string Dn;
        public readonly string Id;

        [OutputConstructor]
        private GetRestResult(
            string className,

            ImmutableDictionary<string, string> content,

            string? device,

            string dn,

            string id)
        {
            ClassName = className;
            Content = content;
            Device = device;
            Dn = dn;
            Id = id;
        }
    }
}
