// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos.Nxos
{
    public static class GetPhysicalInterface
    {
        public static Task<GetPhysicalInterfaceResult> InvokeAsync(GetPhysicalInterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPhysicalInterfaceResult>("nxos:nxos/getPhysicalInterface:getPhysicalInterface", args ?? new GetPhysicalInterfaceArgs(), options.WithDefaults());

        public static Output<GetPhysicalInterfaceResult> Invoke(GetPhysicalInterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPhysicalInterfaceResult>("nxos:nxos/getPhysicalInterface:getPhysicalInterface", args ?? new GetPhysicalInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPhysicalInterfaceArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("interfaceId", required: true)]
        public string InterfaceId { get; set; } = null!;

        public GetPhysicalInterfaceArgs()
        {
        }
        public static new GetPhysicalInterfaceArgs Empty => new GetPhysicalInterfaceArgs();
    }

    public sealed class GetPhysicalInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        public GetPhysicalInterfaceInvokeArgs()
        {
        }
        public static new GetPhysicalInterfaceInvokeArgs Empty => new GetPhysicalInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetPhysicalInterfaceResult
    {
        public readonly string AccessVlan;
        public readonly string AdminState;
        public readonly string AutoNegotiation;
        public readonly int Bandwidth;
        public readonly int Delay;
        public readonly string Description;
        public readonly string? Device;
        public readonly string Duplex;
        public readonly string FecMode;
        public readonly string Id;
        public readonly string InterfaceId;
        public readonly string Layer;
        public readonly int LinkDebounceDown;
        public readonly int LinkDebounceUp;
        public readonly string LinkLogging;
        public readonly string Medium;
        public readonly string Mode;
        public readonly int Mtu;
        public readonly string NativeVlan;
        public readonly string Speed;
        public readonly string SpeedGroup;
        public readonly string TrunkVlans;
        public readonly string UniDirectionalEthernet;
        public readonly string UserConfiguredFlags;

        [OutputConstructor]
        private GetPhysicalInterfaceResult(
            string accessVlan,

            string adminState,

            string autoNegotiation,

            int bandwidth,

            int delay,

            string description,

            string? device,

            string duplex,

            string fecMode,

            string id,

            string interfaceId,

            string layer,

            int linkDebounceDown,

            int linkDebounceUp,

            string linkLogging,

            string medium,

            string mode,

            int mtu,

            string nativeVlan,

            string speed,

            string speedGroup,

            string trunkVlans,

            string uniDirectionalEthernet,

            string userConfiguredFlags)
        {
            AccessVlan = accessVlan;
            AdminState = adminState;
            AutoNegotiation = autoNegotiation;
            Bandwidth = bandwidth;
            Delay = delay;
            Description = description;
            Device = device;
            Duplex = duplex;
            FecMode = fecMode;
            Id = id;
            InterfaceId = interfaceId;
            Layer = layer;
            LinkDebounceDown = linkDebounceDown;
            LinkDebounceUp = linkDebounceUp;
            LinkLogging = linkLogging;
            Medium = medium;
            Mode = mode;
            Mtu = mtu;
            NativeVlan = nativeVlan;
            Speed = speed;
            SpeedGroup = speedGroup;
            TrunkVlans = trunkVlans;
            UniDirectionalEthernet = uniDirectionalEthernet;
            UserConfiguredFlags = userConfiguredFlags;
        }
    }
}
