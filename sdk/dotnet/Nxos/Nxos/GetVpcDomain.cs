// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos.Nxos
{
    public static class GetVpcDomain
    {
        public static Task<GetVpcDomainResult> InvokeAsync(GetVpcDomainArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcDomainResult>("nxos:nxos/getVpcDomain:getVpcDomain", args ?? new GetVpcDomainArgs(), options.WithDefaults());

        public static Output<GetVpcDomainResult> Invoke(GetVpcDomainInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcDomainResult>("nxos:nxos/getVpcDomain:getVpcDomain", args ?? new GetVpcDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcDomainArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        public GetVpcDomainArgs()
        {
        }
        public static new GetVpcDomainArgs Empty => new GetVpcDomainArgs();
    }

    public sealed class GetVpcDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetVpcDomainInvokeArgs()
        {
        }
        public static new GetVpcDomainInvokeArgs Empty => new GetVpcDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcDomainResult
    {
        public readonly string AdminState;
        public readonly string AutoRecovery;
        public readonly int AutoRecoveryInterval;
        public readonly int DelayRestoreOrphanPort;
        public readonly int DelayRestoreSvi;
        public readonly int DelayRestoreVpc;
        public readonly string? Device;
        public readonly int DomainId;
        public readonly int Dscp;
        public readonly string FastConvergence;
        public readonly string GracefulConsistencyCheck;
        public readonly string Id;
        public readonly string L3PeerRouter;
        public readonly string L3PeerRouterSyslog;
        public readonly int L3PeerRouterSyslogInterval;
        public readonly string PeerGateway;
        public readonly string PeerIp;
        public readonly string PeerSwitch;
        public readonly int RolePriority;
        public readonly string SysMac;
        public readonly int SystemPriority;
        public readonly int Track;
        public readonly string VirtualIp;

        [OutputConstructor]
        private GetVpcDomainResult(
            string adminState,

            string autoRecovery,

            int autoRecoveryInterval,

            int delayRestoreOrphanPort,

            int delayRestoreSvi,

            int delayRestoreVpc,

            string? device,

            int domainId,

            int dscp,

            string fastConvergence,

            string gracefulConsistencyCheck,

            string id,

            string l3PeerRouter,

            string l3PeerRouterSyslog,

            int l3PeerRouterSyslogInterval,

            string peerGateway,

            string peerIp,

            string peerSwitch,

            int rolePriority,

            string sysMac,

            int systemPriority,

            int track,

            string virtualIp)
        {
            AdminState = adminState;
            AutoRecovery = autoRecovery;
            AutoRecoveryInterval = autoRecoveryInterval;
            DelayRestoreOrphanPort = delayRestoreOrphanPort;
            DelayRestoreSvi = delayRestoreSvi;
            DelayRestoreVpc = delayRestoreVpc;
            Device = device;
            DomainId = domainId;
            Dscp = dscp;
            FastConvergence = fastConvergence;
            GracefulConsistencyCheck = gracefulConsistencyCheck;
            Id = id;
            L3PeerRouter = l3PeerRouter;
            L3PeerRouterSyslog = l3PeerRouterSyslog;
            L3PeerRouterSyslogInterval = l3PeerRouterSyslogInterval;
            PeerGateway = peerGateway;
            PeerIp = peerIp;
            PeerSwitch = peerSwitch;
            RolePriority = rolePriority;
            SysMac = sysMac;
            SystemPriority = systemPriority;
            Track = track;
            VirtualIp = virtualIp;
        }
    }
}
