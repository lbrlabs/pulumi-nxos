// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos.Nxos
{
    public static class GetIsisInterface
    {
        public static Task<GetIsisInterfaceResult> InvokeAsync(GetIsisInterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIsisInterfaceResult>("nxos:nxos/getIsisInterface:getIsisInterface", args ?? new GetIsisInterfaceArgs(), options.WithDefaults());

        public static Output<GetIsisInterfaceResult> Invoke(GetIsisInterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIsisInterfaceResult>("nxos:nxos/getIsisInterface:getIsisInterface", args ?? new GetIsisInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIsisInterfaceArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("interfaceId", required: true)]
        public string InterfaceId { get; set; } = null!;

        public GetIsisInterfaceArgs()
        {
        }
        public static new GetIsisInterfaceArgs Empty => new GetIsisInterfaceArgs();
    }

    public sealed class GetIsisInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        public GetIsisInterfaceInvokeArgs()
        {
        }
        public static new GetIsisInterfaceInvokeArgs Empty => new GetIsisInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetIsisInterfaceResult
    {
        public readonly bool AuthenticationCheck;
        public readonly bool AuthenticationCheckL1;
        public readonly bool AuthenticationCheckL2;
        public readonly string AuthenticationKey;
        public readonly string AuthenticationKeyL1;
        public readonly string AuthenticationKeyL2;
        public readonly string AuthenticationType;
        public readonly string AuthenticationTypeL1;
        public readonly string AuthenticationTypeL2;
        public readonly string CircuitType;
        public readonly string? Device;
        public readonly int HelloInterval;
        public readonly int HelloIntervalL1;
        public readonly int HelloIntervalL2;
        public readonly int HelloMultiplier;
        public readonly int HelloMultiplierL1;
        public readonly int HelloMultiplierL2;
        public readonly string HelloPadding;
        public readonly string Id;
        public readonly string InterfaceId;
        public readonly int MetricL1;
        public readonly int MetricL2;
        public readonly bool MtuCheck;
        public readonly bool MtuCheckL1;
        public readonly bool MtuCheckL2;
        public readonly string NetworkTypeP2p;
        public readonly string Passive;
        public readonly int PriorityL1;
        public readonly int PriorityL2;
        public readonly string Vrf;

        [OutputConstructor]
        private GetIsisInterfaceResult(
            bool authenticationCheck,

            bool authenticationCheckL1,

            bool authenticationCheckL2,

            string authenticationKey,

            string authenticationKeyL1,

            string authenticationKeyL2,

            string authenticationType,

            string authenticationTypeL1,

            string authenticationTypeL2,

            string circuitType,

            string? device,

            int helloInterval,

            int helloIntervalL1,

            int helloIntervalL2,

            int helloMultiplier,

            int helloMultiplierL1,

            int helloMultiplierL2,

            string helloPadding,

            string id,

            string interfaceId,

            int metricL1,

            int metricL2,

            bool mtuCheck,

            bool mtuCheckL1,

            bool mtuCheckL2,

            string networkTypeP2p,

            string passive,

            int priorityL1,

            int priorityL2,

            string vrf)
        {
            AuthenticationCheck = authenticationCheck;
            AuthenticationCheckL1 = authenticationCheckL1;
            AuthenticationCheckL2 = authenticationCheckL2;
            AuthenticationKey = authenticationKey;
            AuthenticationKeyL1 = authenticationKeyL1;
            AuthenticationKeyL2 = authenticationKeyL2;
            AuthenticationType = authenticationType;
            AuthenticationTypeL1 = authenticationTypeL1;
            AuthenticationTypeL2 = authenticationTypeL2;
            CircuitType = circuitType;
            Device = device;
            HelloInterval = helloInterval;
            HelloIntervalL1 = helloIntervalL1;
            HelloIntervalL2 = helloIntervalL2;
            HelloMultiplier = helloMultiplier;
            HelloMultiplierL1 = helloMultiplierL1;
            HelloMultiplierL2 = helloMultiplierL2;
            HelloPadding = helloPadding;
            Id = id;
            InterfaceId = interfaceId;
            MetricL1 = metricL1;
            MetricL2 = metricL2;
            MtuCheck = mtuCheck;
            MtuCheckL1 = mtuCheckL1;
            MtuCheckL2 = mtuCheckL2;
            NetworkTypeP2p = networkTypeP2p;
            Passive = passive;
            PriorityL1 = priorityL1;
            PriorityL2 = priorityL2;
            Vrf = vrf;
        }
    }
}
