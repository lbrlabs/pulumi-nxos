// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos.Nxos
{
    [NxosResourceType("nxos:nxos/rest:Rest")]
    public partial class Rest : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of children.
        /// </summary>
        [Output("childrens")]
        public Output<ImmutableArray<Outputs.RestChildren>> Childrens { get; private set; } = null!;

        /// <summary>
        /// Which class object is being created. (Make sure there is no colon in the classname)
        /// </summary>
        [Output("className")]
        public Output<string> ClassName { get; private set; } = null!;

        /// <summary>
        /// Map of key-value pairs that need to be passed to the Model object as parameters.
        /// </summary>
        [Output("content")]
        public Output<ImmutableDictionary<string, string>?> Content { get; private set; } = null!;

        /// <summary>
        /// Delete object during destroy operation. Default value is `true`.
        /// </summary>
        [Output("delete")]
        public Output<bool> Delete { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Distinguished name of object being managed including its relative name, e.g. sys/intf/phys-[eth1/1].
        /// </summary>
        [Output("dn")]
        public Output<string> Dn { get; private set; } = null!;


        /// <summary>
        /// Create a Rest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Rest(string name, RestArgs args, CustomResourceOptions? options = null)
            : base("nxos:nxos/rest:Rest", name, args ?? new RestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Rest(string name, Input<string> id, RestState? state = null, CustomResourceOptions? options = null)
            : base("nxos:nxos/rest:Rest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Rest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Rest Get(string name, Input<string> id, RestState? state = null, CustomResourceOptions? options = null)
        {
            return new Rest(name, id, state, options);
        }
    }

    public sealed class RestArgs : global::Pulumi.ResourceArgs
    {
        [Input("childrens")]
        private InputList<Inputs.RestChildrenArgs>? _childrens;

        /// <summary>
        /// List of children.
        /// </summary>
        public InputList<Inputs.RestChildrenArgs> Childrens
        {
            get => _childrens ?? (_childrens = new InputList<Inputs.RestChildrenArgs>());
            set => _childrens = value;
        }

        /// <summary>
        /// Which class object is being created. (Make sure there is no colon in the classname)
        /// </summary>
        [Input("className", required: true)]
        public Input<string> ClassName { get; set; } = null!;

        [Input("content")]
        private InputMap<string>? _content;

        /// <summary>
        /// Map of key-value pairs that need to be passed to the Model object as parameters.
        /// </summary>
        public InputMap<string> Content
        {
            get => _content ?? (_content = new InputMap<string>());
            set => _content = value;
        }

        /// <summary>
        /// Delete object during destroy operation. Default value is `true`.
        /// </summary>
        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Distinguished name of object being managed including its relative name, e.g. sys/intf/phys-[eth1/1].
        /// </summary>
        [Input("dn", required: true)]
        public Input<string> Dn { get; set; } = null!;

        public RestArgs()
        {
        }
        public static new RestArgs Empty => new RestArgs();
    }

    public sealed class RestState : global::Pulumi.ResourceArgs
    {
        [Input("childrens")]
        private InputList<Inputs.RestChildrenGetArgs>? _childrens;

        /// <summary>
        /// List of children.
        /// </summary>
        public InputList<Inputs.RestChildrenGetArgs> Childrens
        {
            get => _childrens ?? (_childrens = new InputList<Inputs.RestChildrenGetArgs>());
            set => _childrens = value;
        }

        /// <summary>
        /// Which class object is being created. (Make sure there is no colon in the classname)
        /// </summary>
        [Input("className")]
        public Input<string>? ClassName { get; set; }

        [Input("content")]
        private InputMap<string>? _content;

        /// <summary>
        /// Map of key-value pairs that need to be passed to the Model object as parameters.
        /// </summary>
        public InputMap<string> Content
        {
            get => _content ?? (_content = new InputMap<string>());
            set => _content = value;
        }

        /// <summary>
        /// Delete object during destroy operation. Default value is `true`.
        /// </summary>
        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Distinguished name of object being managed including its relative name, e.g. sys/intf/phys-[eth1/1].
        /// </summary>
        [Input("dn")]
        public Input<string>? Dn { get; set; }

        public RestState()
        {
        }
        public static new RestState Empty => new RestState();
    }
}
