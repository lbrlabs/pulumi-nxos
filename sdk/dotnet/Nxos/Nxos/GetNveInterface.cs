// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos.Nxos
{
    public static class GetNveInterface
    {
        public static Task<GetNveInterfaceResult> InvokeAsync(GetNveInterfaceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNveInterfaceResult>("nxos:nxos/getNveInterface:getNveInterface", args ?? new GetNveInterfaceArgs(), options.WithDefaults());

        public static Output<GetNveInterfaceResult> Invoke(GetNveInterfaceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNveInterfaceResult>("nxos:nxos/getNveInterface:getNveInterface", args ?? new GetNveInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNveInterfaceArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        public GetNveInterfaceArgs()
        {
        }
        public static new GetNveInterfaceArgs Empty => new GetNveInterfaceArgs();
    }

    public sealed class GetNveInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetNveInterfaceInvokeArgs()
        {
        }
        public static new GetNveInterfaceInvokeArgs Empty => new GetNveInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetNveInterfaceResult
    {
        public readonly string AdminState;
        public readonly bool AdvertiseVirtualMac;
        public readonly string? Device;
        public readonly int HoldDownTime;
        public readonly string HostReachabilityProtocol;
        public readonly string Id;
        public readonly bool IngressReplicationProtocolBgp;
        public readonly string MulticastGroupL2;
        public readonly string MulticastGroupL3;
        public readonly string MultisiteSourceInterface;
        public readonly string SourceInterface;
        public readonly bool SuppressArp;
        public readonly bool SuppressMacRoute;

        [OutputConstructor]
        private GetNveInterfaceResult(
            string adminState,

            bool advertiseVirtualMac,

            string? device,

            int holdDownTime,

            string hostReachabilityProtocol,

            string id,

            bool ingressReplicationProtocolBgp,

            string multicastGroupL2,

            string multicastGroupL3,

            string multisiteSourceInterface,

            string sourceInterface,

            bool suppressArp,

            bool suppressMacRoute)
        {
            AdminState = adminState;
            AdvertiseVirtualMac = advertiseVirtualMac;
            Device = device;
            HoldDownTime = holdDownTime;
            HostReachabilityProtocol = hostReachabilityProtocol;
            Id = id;
            IngressReplicationProtocolBgp = ingressReplicationProtocolBgp;
            MulticastGroupL2 = multicastGroupL2;
            MulticastGroupL3 = multicastGroupL3;
            MultisiteSourceInterface = multisiteSourceInterface;
            SourceInterface = sourceInterface;
            SuppressArp = suppressArp;
            SuppressMacRoute = suppressMacRoute;
        }
    }
}
