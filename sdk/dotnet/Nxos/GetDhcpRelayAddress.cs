// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetDhcpRelayAddress
    {
        /// <summary>
        /// This data source can read a DHCP relay address.
        /// 
        /// - API Documentation: [dhcpRelayAddr](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/DHCP/dhcp:RelayAddr/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetDhcpRelayAddress.Invoke(new()
        ///     {
        ///         Address = "1.1.1.1",
        ///         InterfaceId = "eth1/10",
        ///         Vrf = "VRF1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDhcpRelayAddressResult> InvokeAsync(GetDhcpRelayAddressArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDhcpRelayAddressResult>("nxos:index/getDhcpRelayAddress:getDhcpRelayAddress", args ?? new GetDhcpRelayAddressArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read a DHCP relay address.
        /// 
        /// - API Documentation: [dhcpRelayAddr](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/DHCP/dhcp:RelayAddr/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetDhcpRelayAddress.Invoke(new()
        ///     {
        ///         Address = "1.1.1.1",
        ///         InterfaceId = "eth1/10",
        ///         Vrf = "VRF1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDhcpRelayAddressResult> Invoke(GetDhcpRelayAddressInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDhcpRelayAddressResult>("nxos:index/getDhcpRelayAddress:getDhcpRelayAddress", args ?? new GetDhcpRelayAddressInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDhcpRelayAddressArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IPv4 or IPv6 address.
        /// </summary>
        [Input("address", required: true)]
        public string Address { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public string InterfaceId { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrf", required: true)]
        public string Vrf { get; set; } = null!;

        public GetDhcpRelayAddressArgs()
        {
        }
        public static new GetDhcpRelayAddressArgs Empty => new GetDhcpRelayAddressArgs();
    }

    public sealed class GetDhcpRelayAddressInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IPv4 or IPv6 address.
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrf", required: true)]
        public Input<string> Vrf { get; set; } = null!;

        public GetDhcpRelayAddressInvokeArgs()
        {
        }
        public static new GetDhcpRelayAddressInvokeArgs Empty => new GetDhcpRelayAddressInvokeArgs();
    }


    [OutputType]
    public sealed class GetDhcpRelayAddressResult
    {
        /// <summary>
        /// IPv4 or IPv6 address.
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        public readonly string InterfaceId;
        /// <summary>
        /// VRF name.
        /// </summary>
        public readonly string Vrf;

        [OutputConstructor]
        private GetDhcpRelayAddressResult(
            string address,

            string? device,

            string id,

            string interfaceId,

            string vrf)
        {
            Address = address;
            Device = device;
            Id = id;
            InterfaceId = interfaceId;
            Vrf = vrf;
        }
    }
}
