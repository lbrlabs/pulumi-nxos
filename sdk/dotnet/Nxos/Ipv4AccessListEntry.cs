// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    /// <summary>
    /// This resource can manage IPv4 Access List Entries.
    /// 
    /// - API Documentation: [ipv4aclACE](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Security%20and%20Policing/ipv4acl:ACE/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nxos = Lbrlabs.PulumiPackage.Nxos;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Nxos.Ipv4AccessListEntry("example", new()
    ///     {
    ///         Ack = false,
    ///         Action = "permit",
    ///         DestinationAddressGroup = "AG1",
    ///         DestinationPort1 = "443",
    ///         DestinationPort2 = "0",
    ///         DestinationPortGroup = "PG1",
    ///         DestinationPortMask = "0",
    ///         DestinationPortOperator = "eq",
    ///         DestinationPrefix = "10.1.1.0",
    ///         DestinationPrefixLength = "24",
    ///         DestinationPrefixMask = "255.255.255.0",
    ///         Dscp = 0,
    ///         Est = false,
    ///         Fin = false,
    ///         Fragment = false,
    ///         HttpOptionType = "invalid",
    ///         IcmpCode = 0,
    ///         IcmpType = 0,
    ///         Logging = true,
    ///         PacketLength1 = "19",
    ///         PacketLength2 = "9210",
    ///         PacketLengthOperator = "range",
    ///         Precedence = "0",
    ///         Protocol = "tcp",
    ///         ProtocolMask = "tcp",
    ///         Psh = false,
    ///         Redirect = "RD",
    ///         Remark = "Line1",
    ///         Rev = false,
    ///         Rst = false,
    ///         SequenceNumber = 10,
    ///         SourceAddressGroup = "AG2",
    ///         SourcePort1 = "443",
    ///         SourcePort2 = "0",
    ///         SourcePortGroup = "PG2",
    ///         SourcePortMask = "0",
    ///         SourcePortOperator = "eq",
    ///         SourcePrefix = "20.1.0.0",
    ///         SourcePrefixLength = "16",
    ///         SourcePrefixMask = "255.255.0.0",
    ///         Syn = false,
    ///         TimeRange = "TR1",
    ///         Ttl = 0,
    ///         Urg = false,
    ///         Vlan = 4095,
    ///         Vni = "invalid",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import nxos:index/ipv4AccessListEntry:Ipv4AccessListEntry example "sys/acl/ipv4/name-[ACL1]/seq-[10]"
    /// ```
    /// </summary>
    [NxosResourceType("nxos:index/ipv4AccessListEntry:Ipv4AccessListEntry")]
    public partial class Ipv4AccessListEntry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Match TCP ACK flag.
        /// </summary>
        [Output("ack")]
        public Output<bool?> Ack { get; private set; } = null!;

        /// <summary>
        /// Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// Destination address group.
        /// </summary>
        [Output("destinationAddressGroup")]
        public Output<string?> DestinationAddressGroup { get; private set; } = null!;

        /// <summary>
        /// First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Output("destinationPort1")]
        public Output<string?> DestinationPort1 { get; private set; } = null!;

        /// <summary>
        /// Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Output("destinationPort2")]
        public Output<string?> DestinationPort2 { get; private set; } = null!;

        /// <summary>
        /// Destination port group.
        /// </summary>
        [Output("destinationPortGroup")]
        public Output<string?> DestinationPortGroup { get; private set; } = null!;

        /// <summary>
        /// Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Output("destinationPortMask")]
        public Output<string?> DestinationPortMask { get; private set; } = null!;

        /// <summary>
        /// Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        /// </summary>
        [Output("destinationPortOperator")]
        public Output<string> DestinationPortOperator { get; private set; } = null!;

        /// <summary>
        /// Destination prefix.
        /// </summary>
        [Output("destinationPrefix")]
        public Output<string?> DestinationPrefix { get; private set; } = null!;

        /// <summary>
        /// Destination prefix length.
        /// </summary>
        [Output("destinationPrefixLength")]
        public Output<string?> DestinationPrefixLength { get; private set; } = null!;

        /// <summary>
        /// Destination prefix mask.
        /// </summary>
        [Output("destinationPrefixMask")]
        public Output<string?> DestinationPrefixMask { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Match DSCP. - Range: `0`-`63`
        /// </summary>
        [Output("dscp")]
        public Output<int?> Dscp { get; private set; } = null!;

        /// <summary>
        /// Match TCP EST flag.
        /// </summary>
        [Output("est")]
        public Output<bool?> Est { get; private set; } = null!;

        /// <summary>
        /// Match TCP FIN flag.
        /// </summary>
        [Output("fin")]
        public Output<bool?> Fin { get; private set; } = null!;

        /// <summary>
        /// Match non-initial fragment.
        /// </summary>
        [Output("fragment")]
        public Output<bool?> Fragment { get; private set; } = null!;

        /// <summary>
        /// HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
        /// `invalid`
        /// </summary>
        [Output("httpOptionType")]
        public Output<string> HttpOptionType { get; private set; } = null!;

        /// <summary>
        /// ICMP code. - Range: `0`-`256` - Default value: `256`
        /// </summary>
        [Output("icmpCode")]
        public Output<int> IcmpCode { get; private set; } = null!;

        /// <summary>
        /// ICMP type. - Range: `0`-`256` - Default value: `256`
        /// </summary>
        [Output("icmpType")]
        public Output<int> IcmpType { get; private set; } = null!;

        /// <summary>
        /// Log matches against ACL entry. - Default value: `false`
        /// </summary>
        [Output("logging")]
        public Output<bool> Logging { get; private set; } = null!;

        /// <summary>
        /// Access list name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        /// </summary>
        [Output("packetLength1")]
        public Output<string> PacketLength1 { get; private set; } = null!;

        /// <summary>
        /// Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        /// </summary>
        [Output("packetLength2")]
        public Output<string> PacketLength2 { get; private set; } = null!;

        /// <summary>
        /// Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        /// </summary>
        [Output("packetLengthOperator")]
        public Output<string> PacketLengthOperator { get; private set; } = null!;

        /// <summary>
        /// Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
        /// </summary>
        [Output("precedence")]
        public Output<string> Precedence { get; private set; } = null!;

        /// <summary>
        /// Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
        /// `pim`, `pcp`, `udf`
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
        /// `nos`, `pim`, `pcp`, `udf`
        /// </summary>
        [Output("protocolMask")]
        public Output<string?> ProtocolMask { get; private set; } = null!;

        /// <summary>
        /// Match TCP PSH flag.
        /// </summary>
        [Output("psh")]
        public Output<bool?> Psh { get; private set; } = null!;

        /// <summary>
        /// Redirect action.
        /// </summary>
        [Output("redirect")]
        public Output<string?> Redirect { get; private set; } = null!;

        /// <summary>
        /// ACL comment.
        /// </summary>
        [Output("remark")]
        public Output<string?> Remark { get; private set; } = null!;

        /// <summary>
        /// Match TCP REV flag.
        /// </summary>
        [Output("rev")]
        public Output<bool?> Rev { get; private set; } = null!;

        /// <summary>
        /// Match TCP RST flag.
        /// </summary>
        [Output("rst")]
        public Output<bool?> Rst { get; private set; } = null!;

        /// <summary>
        /// Sequence number.
        /// </summary>
        [Output("sequenceNumber")]
        public Output<int> SequenceNumber { get; private set; } = null!;

        /// <summary>
        /// Source address group.
        /// </summary>
        [Output("sourceAddressGroup")]
        public Output<string?> SourceAddressGroup { get; private set; } = null!;

        /// <summary>
        /// First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Output("sourcePort1")]
        public Output<string?> SourcePort1 { get; private set; } = null!;

        /// <summary>
        /// Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Output("sourcePort2")]
        public Output<string?> SourcePort2 { get; private set; } = null!;

        /// <summary>
        /// Source port group.
        /// </summary>
        [Output("sourcePortGroup")]
        public Output<string?> SourcePortGroup { get; private set; } = null!;

        /// <summary>
        /// Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Output("sourcePortMask")]
        public Output<string?> SourcePortMask { get; private set; } = null!;

        /// <summary>
        /// Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        /// </summary>
        [Output("sourcePortOperator")]
        public Output<string> SourcePortOperator { get; private set; } = null!;

        /// <summary>
        /// Source prefix.
        /// </summary>
        [Output("sourcePrefix")]
        public Output<string?> SourcePrefix { get; private set; } = null!;

        /// <summary>
        /// Source prefix length.
        /// </summary>
        [Output("sourcePrefixLength")]
        public Output<string?> SourcePrefixLength { get; private set; } = null!;

        /// <summary>
        /// Source prefix mask.
        /// </summary>
        [Output("sourcePrefixMask")]
        public Output<string?> SourcePrefixMask { get; private set; } = null!;

        /// <summary>
        /// Match TCP SYN flag.
        /// </summary>
        [Output("syn")]
        public Output<bool?> Syn { get; private set; } = null!;

        /// <summary>
        /// Time range name.
        /// </summary>
        [Output("timeRange")]
        public Output<string?> TimeRange { get; private set; } = null!;

        /// <summary>
        /// TTL. - Range: `0`-`255` - Default value: `0`
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;

        /// <summary>
        /// Match TCP URG flag.
        /// </summary>
        [Output("urg")]
        public Output<bool?> Urg { get; private set; } = null!;

        /// <summary>
        /// VLAN ID. - Range: `0`-`4095` - Default value: `4095`
        /// </summary>
        [Output("vlan")]
        public Output<int> Vlan { get; private set; } = null!;

        /// <summary>
        /// NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
        /// </summary>
        [Output("vni")]
        public Output<string> Vni { get; private set; } = null!;


        /// <summary>
        /// Create a Ipv4AccessListEntry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ipv4AccessListEntry(string name, Ipv4AccessListEntryArgs args, CustomResourceOptions? options = null)
            : base("nxos:index/ipv4AccessListEntry:Ipv4AccessListEntry", name, args ?? new Ipv4AccessListEntryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ipv4AccessListEntry(string name, Input<string> id, Ipv4AccessListEntryState? state = null, CustomResourceOptions? options = null)
            : base("nxos:index/ipv4AccessListEntry:Ipv4AccessListEntry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ipv4AccessListEntry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ipv4AccessListEntry Get(string name, Input<string> id, Ipv4AccessListEntryState? state = null, CustomResourceOptions? options = null)
        {
            return new Ipv4AccessListEntry(name, id, state, options);
        }
    }

    public sealed class Ipv4AccessListEntryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Match TCP ACK flag.
        /// </summary>
        [Input("ack")]
        public Input<bool>? Ack { get; set; }

        /// <summary>
        /// Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Destination address group.
        /// </summary>
        [Input("destinationAddressGroup")]
        public Input<string>? DestinationAddressGroup { get; set; }

        /// <summary>
        /// First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Input("destinationPort1")]
        public Input<string>? DestinationPort1 { get; set; }

        /// <summary>
        /// Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Input("destinationPort2")]
        public Input<string>? DestinationPort2 { get; set; }

        /// <summary>
        /// Destination port group.
        /// </summary>
        [Input("destinationPortGroup")]
        public Input<string>? DestinationPortGroup { get; set; }

        /// <summary>
        /// Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Input("destinationPortMask")]
        public Input<string>? DestinationPortMask { get; set; }

        /// <summary>
        /// Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        /// </summary>
        [Input("destinationPortOperator")]
        public Input<string>? DestinationPortOperator { get; set; }

        /// <summary>
        /// Destination prefix.
        /// </summary>
        [Input("destinationPrefix")]
        public Input<string>? DestinationPrefix { get; set; }

        /// <summary>
        /// Destination prefix length.
        /// </summary>
        [Input("destinationPrefixLength")]
        public Input<string>? DestinationPrefixLength { get; set; }

        /// <summary>
        /// Destination prefix mask.
        /// </summary>
        [Input("destinationPrefixMask")]
        public Input<string>? DestinationPrefixMask { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Match DSCP. - Range: `0`-`63`
        /// </summary>
        [Input("dscp")]
        public Input<int>? Dscp { get; set; }

        /// <summary>
        /// Match TCP EST flag.
        /// </summary>
        [Input("est")]
        public Input<bool>? Est { get; set; }

        /// <summary>
        /// Match TCP FIN flag.
        /// </summary>
        [Input("fin")]
        public Input<bool>? Fin { get; set; }

        /// <summary>
        /// Match non-initial fragment.
        /// </summary>
        [Input("fragment")]
        public Input<bool>? Fragment { get; set; }

        /// <summary>
        /// HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
        /// `invalid`
        /// </summary>
        [Input("httpOptionType")]
        public Input<string>? HttpOptionType { get; set; }

        /// <summary>
        /// ICMP code. - Range: `0`-`256` - Default value: `256`
        /// </summary>
        [Input("icmpCode")]
        public Input<int>? IcmpCode { get; set; }

        /// <summary>
        /// ICMP type. - Range: `0`-`256` - Default value: `256`
        /// </summary>
        [Input("icmpType")]
        public Input<int>? IcmpType { get; set; }

        /// <summary>
        /// Log matches against ACL entry. - Default value: `false`
        /// </summary>
        [Input("logging")]
        public Input<bool>? Logging { get; set; }

        /// <summary>
        /// Access list name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        /// </summary>
        [Input("packetLength1")]
        public Input<string>? PacketLength1 { get; set; }

        /// <summary>
        /// Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        /// </summary>
        [Input("packetLength2")]
        public Input<string>? PacketLength2 { get; set; }

        /// <summary>
        /// Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        /// </summary>
        [Input("packetLengthOperator")]
        public Input<string>? PacketLengthOperator { get; set; }

        /// <summary>
        /// Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
        /// </summary>
        [Input("precedence")]
        public Input<string>? Precedence { get; set; }

        /// <summary>
        /// Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
        /// `pim`, `pcp`, `udf`
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
        /// `nos`, `pim`, `pcp`, `udf`
        /// </summary>
        [Input("protocolMask")]
        public Input<string>? ProtocolMask { get; set; }

        /// <summary>
        /// Match TCP PSH flag.
        /// </summary>
        [Input("psh")]
        public Input<bool>? Psh { get; set; }

        /// <summary>
        /// Redirect action.
        /// </summary>
        [Input("redirect")]
        public Input<string>? Redirect { get; set; }

        /// <summary>
        /// ACL comment.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// Match TCP REV flag.
        /// </summary>
        [Input("rev")]
        public Input<bool>? Rev { get; set; }

        /// <summary>
        /// Match TCP RST flag.
        /// </summary>
        [Input("rst")]
        public Input<bool>? Rst { get; set; }

        /// <summary>
        /// Sequence number.
        /// </summary>
        [Input("sequenceNumber", required: true)]
        public Input<int> SequenceNumber { get; set; } = null!;

        /// <summary>
        /// Source address group.
        /// </summary>
        [Input("sourceAddressGroup")]
        public Input<string>? SourceAddressGroup { get; set; }

        /// <summary>
        /// First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Input("sourcePort1")]
        public Input<string>? SourcePort1 { get; set; }

        /// <summary>
        /// Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Input("sourcePort2")]
        public Input<string>? SourcePort2 { get; set; }

        /// <summary>
        /// Source port group.
        /// </summary>
        [Input("sourcePortGroup")]
        public Input<string>? SourcePortGroup { get; set; }

        /// <summary>
        /// Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Input("sourcePortMask")]
        public Input<string>? SourcePortMask { get; set; }

        /// <summary>
        /// Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        /// </summary>
        [Input("sourcePortOperator")]
        public Input<string>? SourcePortOperator { get; set; }

        /// <summary>
        /// Source prefix.
        /// </summary>
        [Input("sourcePrefix")]
        public Input<string>? SourcePrefix { get; set; }

        /// <summary>
        /// Source prefix length.
        /// </summary>
        [Input("sourcePrefixLength")]
        public Input<string>? SourcePrefixLength { get; set; }

        /// <summary>
        /// Source prefix mask.
        /// </summary>
        [Input("sourcePrefixMask")]
        public Input<string>? SourcePrefixMask { get; set; }

        /// <summary>
        /// Match TCP SYN flag.
        /// </summary>
        [Input("syn")]
        public Input<bool>? Syn { get; set; }

        /// <summary>
        /// Time range name.
        /// </summary>
        [Input("timeRange")]
        public Input<string>? TimeRange { get; set; }

        /// <summary>
        /// TTL. - Range: `0`-`255` - Default value: `0`
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// Match TCP URG flag.
        /// </summary>
        [Input("urg")]
        public Input<bool>? Urg { get; set; }

        /// <summary>
        /// VLAN ID. - Range: `0`-`4095` - Default value: `4095`
        /// </summary>
        [Input("vlan")]
        public Input<int>? Vlan { get; set; }

        /// <summary>
        /// NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
        /// </summary>
        [Input("vni")]
        public Input<string>? Vni { get; set; }

        public Ipv4AccessListEntryArgs()
        {
        }
        public static new Ipv4AccessListEntryArgs Empty => new Ipv4AccessListEntryArgs();
    }

    public sealed class Ipv4AccessListEntryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Match TCP ACK flag.
        /// </summary>
        [Input("ack")]
        public Input<bool>? Ack { get; set; }

        /// <summary>
        /// Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Destination address group.
        /// </summary>
        [Input("destinationAddressGroup")]
        public Input<string>? DestinationAddressGroup { get; set; }

        /// <summary>
        /// First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Input("destinationPort1")]
        public Input<string>? DestinationPort1 { get; set; }

        /// <summary>
        /// Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Input("destinationPort2")]
        public Input<string>? DestinationPort2 { get; set; }

        /// <summary>
        /// Destination port group.
        /// </summary>
        [Input("destinationPortGroup")]
        public Input<string>? DestinationPortGroup { get; set; }

        /// <summary>
        /// Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Input("destinationPortMask")]
        public Input<string>? DestinationPortMask { get; set; }

        /// <summary>
        /// Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        /// </summary>
        [Input("destinationPortOperator")]
        public Input<string>? DestinationPortOperator { get; set; }

        /// <summary>
        /// Destination prefix.
        /// </summary>
        [Input("destinationPrefix")]
        public Input<string>? DestinationPrefix { get; set; }

        /// <summary>
        /// Destination prefix length.
        /// </summary>
        [Input("destinationPrefixLength")]
        public Input<string>? DestinationPrefixLength { get; set; }

        /// <summary>
        /// Destination prefix mask.
        /// </summary>
        [Input("destinationPrefixMask")]
        public Input<string>? DestinationPrefixMask { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Match DSCP. - Range: `0`-`63`
        /// </summary>
        [Input("dscp")]
        public Input<int>? Dscp { get; set; }

        /// <summary>
        /// Match TCP EST flag.
        /// </summary>
        [Input("est")]
        public Input<bool>? Est { get; set; }

        /// <summary>
        /// Match TCP FIN flag.
        /// </summary>
        [Input("fin")]
        public Input<bool>? Fin { get; set; }

        /// <summary>
        /// Match non-initial fragment.
        /// </summary>
        [Input("fragment")]
        public Input<bool>? Fragment { get; set; }

        /// <summary>
        /// HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
        /// `invalid`
        /// </summary>
        [Input("httpOptionType")]
        public Input<string>? HttpOptionType { get; set; }

        /// <summary>
        /// ICMP code. - Range: `0`-`256` - Default value: `256`
        /// </summary>
        [Input("icmpCode")]
        public Input<int>? IcmpCode { get; set; }

        /// <summary>
        /// ICMP type. - Range: `0`-`256` - Default value: `256`
        /// </summary>
        [Input("icmpType")]
        public Input<int>? IcmpType { get; set; }

        /// <summary>
        /// Log matches against ACL entry. - Default value: `false`
        /// </summary>
        [Input("logging")]
        public Input<bool>? Logging { get; set; }

        /// <summary>
        /// Access list name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        /// </summary>
        [Input("packetLength1")]
        public Input<string>? PacketLength1 { get; set; }

        /// <summary>
        /// Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
        /// </summary>
        [Input("packetLength2")]
        public Input<string>? PacketLength2 { get; set; }

        /// <summary>
        /// Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        /// </summary>
        [Input("packetLengthOperator")]
        public Input<string>? PacketLengthOperator { get; set; }

        /// <summary>
        /// Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
        /// </summary>
        [Input("precedence")]
        public Input<string>? Precedence { get; set; }

        /// <summary>
        /// Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
        /// `pim`, `pcp`, `udf`
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
        /// `nos`, `pim`, `pcp`, `udf`
        /// </summary>
        [Input("protocolMask")]
        public Input<string>? ProtocolMask { get; set; }

        /// <summary>
        /// Match TCP PSH flag.
        /// </summary>
        [Input("psh")]
        public Input<bool>? Psh { get; set; }

        /// <summary>
        /// Redirect action.
        /// </summary>
        [Input("redirect")]
        public Input<string>? Redirect { get; set; }

        /// <summary>
        /// ACL comment.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// Match TCP REV flag.
        /// </summary>
        [Input("rev")]
        public Input<bool>? Rev { get; set; }

        /// <summary>
        /// Match TCP RST flag.
        /// </summary>
        [Input("rst")]
        public Input<bool>? Rst { get; set; }

        /// <summary>
        /// Sequence number.
        /// </summary>
        [Input("sequenceNumber")]
        public Input<int>? SequenceNumber { get; set; }

        /// <summary>
        /// Source address group.
        /// </summary>
        [Input("sourceAddressGroup")]
        public Input<string>? SourceAddressGroup { get; set; }

        /// <summary>
        /// First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Input("sourcePort1")]
        public Input<string>? SourcePort1 { get; set; }

        /// <summary>
        /// Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Input("sourcePort2")]
        public Input<string>? SourcePort2 { get; set; }

        /// <summary>
        /// Source port group.
        /// </summary>
        [Input("sourcePortGroup")]
        public Input<string>? SourcePortGroup { get; set; }

        /// <summary>
        /// Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
        /// `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
        /// `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
        /// `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
        /// `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
        /// </summary>
        [Input("sourcePortMask")]
        public Input<string>? SourcePortMask { get; set; }

        /// <summary>
        /// Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
        /// </summary>
        [Input("sourcePortOperator")]
        public Input<string>? SourcePortOperator { get; set; }

        /// <summary>
        /// Source prefix.
        /// </summary>
        [Input("sourcePrefix")]
        public Input<string>? SourcePrefix { get; set; }

        /// <summary>
        /// Source prefix length.
        /// </summary>
        [Input("sourcePrefixLength")]
        public Input<string>? SourcePrefixLength { get; set; }

        /// <summary>
        /// Source prefix mask.
        /// </summary>
        [Input("sourcePrefixMask")]
        public Input<string>? SourcePrefixMask { get; set; }

        /// <summary>
        /// Match TCP SYN flag.
        /// </summary>
        [Input("syn")]
        public Input<bool>? Syn { get; set; }

        /// <summary>
        /// Time range name.
        /// </summary>
        [Input("timeRange")]
        public Input<string>? TimeRange { get; set; }

        /// <summary>
        /// TTL. - Range: `0`-`255` - Default value: `0`
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// Match TCP URG flag.
        /// </summary>
        [Input("urg")]
        public Input<bool>? Urg { get; set; }

        /// <summary>
        /// VLAN ID. - Range: `0`-`4095` - Default value: `4095`
        /// </summary>
        [Input("vlan")]
        public Input<int>? Vlan { get; set; }

        /// <summary>
        /// NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
        /// </summary>
        [Input("vni")]
        public Input<string>? Vni { get; set; }

        public Ipv4AccessListEntryState()
        {
        }
        public static new Ipv4AccessListEntryState Empty => new Ipv4AccessListEntryState();
    }
}
