// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetIpv4InterfaceAddress
    {
        /// <summary>
        /// This data source can read an IPv4 interface address.
        /// 
        /// - API Documentation: [ipv4Addr](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:Addr/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetIpv4InterfaceAddress.Invoke(new()
        ///     {
        ///         Address = "24.63.46.49/30",
        ///         InterfaceId = "eth1/10",
        ///         Vrf = "default",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIpv4InterfaceAddressResult> InvokeAsync(GetIpv4InterfaceAddressArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpv4InterfaceAddressResult>("nxos:index/getIpv4InterfaceAddress:getIpv4InterfaceAddress", args ?? new GetIpv4InterfaceAddressArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read an IPv4 interface address.
        /// 
        /// - API Documentation: [ipv4Addr](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/ipv4:Addr/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetIpv4InterfaceAddress.Invoke(new()
        ///     {
        ///         Address = "24.63.46.49/30",
        ///         InterfaceId = "eth1/10",
        ///         Vrf = "default",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIpv4InterfaceAddressResult> Invoke(GetIpv4InterfaceAddressInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpv4InterfaceAddressResult>("nxos:index/getIpv4InterfaceAddress:getIpv4InterfaceAddress", args ?? new GetIpv4InterfaceAddressInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpv4InterfaceAddressArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IPv4 address.
        /// </summary>
        [Input("address", required: true)]
        public string Address { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public string InterfaceId { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrf", required: true)]
        public string Vrf { get; set; } = null!;

        public GetIpv4InterfaceAddressArgs()
        {
        }
        public static new GetIpv4InterfaceAddressArgs Empty => new GetIpv4InterfaceAddressArgs();
    }

    public sealed class GetIpv4InterfaceAddressInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IPv4 address.
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrf", required: true)]
        public Input<string> Vrf { get; set; } = null!;

        public GetIpv4InterfaceAddressInvokeArgs()
        {
        }
        public static new GetIpv4InterfaceAddressInvokeArgs Empty => new GetIpv4InterfaceAddressInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpv4InterfaceAddressResult
    {
        /// <summary>
        /// IPv4 address.
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        public readonly string InterfaceId;
        /// <summary>
        /// Address type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// VRF name.
        /// </summary>
        public readonly string Vrf;

        [OutputConstructor]
        private GetIpv4InterfaceAddressResult(
            string address,

            string? device,

            string id,

            string interfaceId,

            string type,

            string vrf)
        {
            Address = address;
            Device = device;
            Id = id;
            InterfaceId = interfaceId;
            Type = type;
            Vrf = vrf;
        }
    }
}
