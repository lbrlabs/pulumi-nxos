// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetDefaultQosPolicyMapMatchClassMapPolice
    {
        /// <summary>
        /// This data source can read the default QoS policy map match class map police configuration.
        /// 
        /// - API Documentation: [ipqosPolice](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Qos/ipqos:Police/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetDefaultQosPolicyMapMatchClassMapPolice.Invoke(new()
        ///     {
        ///         ClassMapName = "Voice",
        ///         PolicyMapName = "PM1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDefaultQosPolicyMapMatchClassMapPoliceResult> InvokeAsync(GetDefaultQosPolicyMapMatchClassMapPoliceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDefaultQosPolicyMapMatchClassMapPoliceResult>("nxos:index/getDefaultQosPolicyMapMatchClassMapPolice:getDefaultQosPolicyMapMatchClassMapPolice", args ?? new GetDefaultQosPolicyMapMatchClassMapPoliceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the default QoS policy map match class map police configuration.
        /// 
        /// - API Documentation: [ipqosPolice](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Qos/ipqos:Police/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetDefaultQosPolicyMapMatchClassMapPolice.Invoke(new()
        ///     {
        ///         ClassMapName = "Voice",
        ///         PolicyMapName = "PM1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDefaultQosPolicyMapMatchClassMapPoliceResult> Invoke(GetDefaultQosPolicyMapMatchClassMapPoliceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDefaultQosPolicyMapMatchClassMapPoliceResult>("nxos:index/getDefaultQosPolicyMapMatchClassMapPolice:getDefaultQosPolicyMapMatchClassMapPolice", args ?? new GetDefaultQosPolicyMapMatchClassMapPoliceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDefaultQosPolicyMapMatchClassMapPoliceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Class map name.
        /// </summary>
        [Input("classMapName", required: true)]
        public string ClassMapName { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Policy map name.
        /// </summary>
        [Input("policyMapName", required: true)]
        public string PolicyMapName { get; set; } = null!;

        public GetDefaultQosPolicyMapMatchClassMapPoliceArgs()
        {
        }
        public static new GetDefaultQosPolicyMapMatchClassMapPoliceArgs Empty => new GetDefaultQosPolicyMapMatchClassMapPoliceArgs();
    }

    public sealed class GetDefaultQosPolicyMapMatchClassMapPoliceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Class map name.
        /// </summary>
        [Input("classMapName", required: true)]
        public Input<string> ClassMapName { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Policy map name.
        /// </summary>
        [Input("policyMapName", required: true)]
        public Input<string> PolicyMapName { get; set; } = null!;

        public GetDefaultQosPolicyMapMatchClassMapPoliceInvokeArgs()
        {
        }
        public static new GetDefaultQosPolicyMapMatchClassMapPoliceInvokeArgs Empty => new GetDefaultQosPolicyMapMatchClassMapPoliceInvokeArgs();
    }


    [OutputType]
    public sealed class GetDefaultQosPolicyMapMatchClassMapPoliceResult
    {
        /// <summary>
        /// CIR burst rate.
        /// </summary>
        public readonly int BcRate;
        /// <summary>
        /// CIR burst rate unit.
        /// </summary>
        public readonly string BcUnit;
        /// <summary>
        /// PIR burst rate.
        /// </summary>
        public readonly int BeRate;
        /// <summary>
        /// PIR burst rate unit.
        /// </summary>
        public readonly string BeUnit;
        /// <summary>
        /// CIR rate.
        /// </summary>
        public readonly int CirRate;
        /// <summary>
        /// CIR rate unit.
        /// </summary>
        public readonly string CirUnit;
        /// <summary>
        /// Class map name.
        /// </summary>
        public readonly string ClassMapName;
        /// <summary>
        /// Conform action.
        /// </summary>
        public readonly string ConformAction;
        /// <summary>
        /// Set CoS for conforming traffic.
        /// </summary>
        public readonly int ConformSetCos;
        /// <summary>
        /// Set DSCP for conforming traffic.
        /// </summary>
        public readonly int ConformSetDscp;
        /// <summary>
        /// Set precedence for conforming traffic.
        /// </summary>
        public readonly string ConformSetPrecedence;
        /// <summary>
        /// Set qos-group for conforming traffic.
        /// </summary>
        public readonly int ConformSetQosGroup;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Exceed action.
        /// </summary>
        public readonly string ExceedAction;
        /// <summary>
        /// Set CoS for exceeding traffic.
        /// </summary>
        public readonly int ExceedSetCos;
        /// <summary>
        /// Set DSCP for exceeding traffic.
        /// </summary>
        public readonly int ExceedSetDscp;
        /// <summary>
        /// Set precedence for exceeding traffic.
        /// </summary>
        public readonly string ExceedSetPrecedence;
        /// <summary>
        /// Set qos-group for exceeding traffic.
        /// </summary>
        public readonly int ExceedSetQosGroup;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// PIR rate.
        /// </summary>
        public readonly int PirRate;
        /// <summary>
        /// PIR rate unit.
        /// </summary>
        public readonly string PirUnit;
        /// <summary>
        /// Policy map name.
        /// </summary>
        public readonly string PolicyMapName;
        /// <summary>
        /// Violate action.
        /// </summary>
        public readonly string ViolateAction;
        /// <summary>
        /// Set CoS for violating traffic.
        /// </summary>
        public readonly int ViolateSetCos;
        /// <summary>
        /// Set DSCP for violating traffic.
        /// </summary>
        public readonly int ViolateSetDscp;
        /// <summary>
        /// Set precedence for violating traffic.
        /// </summary>
        public readonly string ViolateSetPrecedence;
        /// <summary>
        /// Set qos-group for violating traffic.
        /// </summary>
        public readonly int ViolateSetQosGroup;

        [OutputConstructor]
        private GetDefaultQosPolicyMapMatchClassMapPoliceResult(
            int bcRate,

            string bcUnit,

            int beRate,

            string beUnit,

            int cirRate,

            string cirUnit,

            string classMapName,

            string conformAction,

            int conformSetCos,

            int conformSetDscp,

            string conformSetPrecedence,

            int conformSetQosGroup,

            string? device,

            string exceedAction,

            int exceedSetCos,

            int exceedSetDscp,

            string exceedSetPrecedence,

            int exceedSetQosGroup,

            string id,

            int pirRate,

            string pirUnit,

            string policyMapName,

            string violateAction,

            int violateSetCos,

            int violateSetDscp,

            string violateSetPrecedence,

            int violateSetQosGroup)
        {
            BcRate = bcRate;
            BcUnit = bcUnit;
            BeRate = beRate;
            BeUnit = beUnit;
            CirRate = cirRate;
            CirUnit = cirUnit;
            ClassMapName = classMapName;
            ConformAction = conformAction;
            ConformSetCos = conformSetCos;
            ConformSetDscp = conformSetDscp;
            ConformSetPrecedence = conformSetPrecedence;
            ConformSetQosGroup = conformSetQosGroup;
            Device = device;
            ExceedAction = exceedAction;
            ExceedSetCos = exceedSetCos;
            ExceedSetDscp = exceedSetDscp;
            ExceedSetPrecedence = exceedSetPrecedence;
            ExceedSetQosGroup = exceedSetQosGroup;
            Id = id;
            PirRate = pirRate;
            PirUnit = pirUnit;
            PolicyMapName = policyMapName;
            ViolateAction = violateAction;
            ViolateSetCos = violateSetCos;
            ViolateSetDscp = violateSetDscp;
            ViolateSetPrecedence = violateSetPrecedence;
            ViolateSetQosGroup = violateSetQosGroup;
        }
    }
}
