// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetIsisVrf
    {
        /// <summary>
        /// This data source can read the IS-IS VRF configuration.
        /// 
        /// - API Documentation: [isisDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:Dom/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetIsisVrf.Invoke(new()
        ///     {
        ///         InstanceName = "ISIS1",
        ///         Name = "default",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIsisVrfResult> InvokeAsync(GetIsisVrfArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIsisVrfResult>("nxos:index/getIsisVrf:getIsisVrf", args ?? new GetIsisVrfArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the IS-IS VRF configuration.
        /// 
        /// - API Documentation: [isisDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:Dom/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetIsisVrf.Invoke(new()
        ///     {
        ///         InstanceName = "ISIS1",
        ///         Name = "default",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIsisVrfResult> Invoke(GetIsisVrfInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIsisVrfResult>("nxos:index/getIsisVrf:getIsisVrf", args ?? new GetIsisVrfInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIsisVrfArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// IS-IS instance name.
        /// </summary>
        [Input("instanceName", required: true)]
        public string InstanceName { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetIsisVrfArgs()
        {
        }
        public static new GetIsisVrfArgs Empty => new GetIsisVrfArgs();
    }

    public sealed class GetIsisVrfInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// IS-IS instance name.
        /// </summary>
        [Input("instanceName", required: true)]
        public Input<string> InstanceName { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetIsisVrfInvokeArgs()
        {
        }
        public static new GetIsisVrfInvokeArgs Empty => new GetIsisVrfInvokeArgs();
    }


    [OutputType]
    public sealed class GetIsisVrfResult
    {
        /// <summary>
        /// Administrative state.
        /// </summary>
        public readonly string AdminState;
        /// <summary>
        /// Authentication Check for ISIS on Level-1.
        /// </summary>
        public readonly bool AuthenticationCheckL1;
        /// <summary>
        /// Authentication Check for ISIS on Level-2.
        /// </summary>
        public readonly bool AuthenticationCheckL2;
        /// <summary>
        /// Authentication Key for IS-IS on Level-1.
        /// </summary>
        public readonly string AuthenticationKeyL1;
        /// <summary>
        /// Authentication Key for IS-IS on Level-2.
        /// </summary>
        public readonly string AuthenticationKeyL2;
        /// <summary>
        /// IS-IS Authentication-Type for Level-1.
        /// </summary>
        public readonly string AuthenticationTypeL1;
        /// <summary>
        /// IS-IS Authentication-Type for Level-2.
        /// </summary>
        public readonly string AuthenticationTypeL2;
        /// <summary>
        /// The IS-IS domain bandwidth reference. This sets the default reference bandwidth used for calculating the IS-IS cost metric.
        /// </summary>
        public readonly int BandwidthReference;
        /// <summary>
        /// Bandwidth reference unit.
        /// </summary>
        public readonly string BanwidthReferenceUnit;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IS-IS instance name.
        /// </summary>
        public readonly string InstanceName;
        /// <summary>
        /// IS-IS domain type.
        /// </summary>
        public readonly string IsType;
        /// <summary>
        /// IS-IS metric type.
        /// </summary>
        public readonly string MetricType;
        /// <summary>
        /// The configuration of link-state packet (LSP) maximum transmission units (MTU) is supported. You can enable up to 4352 bytes.
        /// </summary>
        public readonly int Mtu;
        /// <summary>
        /// VRF name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Holds IS-IS domain NET (address) value.
        /// </summary>
        public readonly string Net;
        /// <summary>
        /// IS-IS Domain passive-interface default level.
        /// </summary>
        public readonly string PassiveDefault;

        [OutputConstructor]
        private GetIsisVrfResult(
            string adminState,

            bool authenticationCheckL1,

            bool authenticationCheckL2,

            string authenticationKeyL1,

            string authenticationKeyL2,

            string authenticationTypeL1,

            string authenticationTypeL2,

            int bandwidthReference,

            string banwidthReferenceUnit,

            string? device,

            string id,

            string instanceName,

            string isType,

            string metricType,

            int mtu,

            string name,

            string net,

            string passiveDefault)
        {
            AdminState = adminState;
            AuthenticationCheckL1 = authenticationCheckL1;
            AuthenticationCheckL2 = authenticationCheckL2;
            AuthenticationKeyL1 = authenticationKeyL1;
            AuthenticationKeyL2 = authenticationKeyL2;
            AuthenticationTypeL1 = authenticationTypeL1;
            AuthenticationTypeL2 = authenticationTypeL2;
            BandwidthReference = bandwidthReference;
            BanwidthReferenceUnit = banwidthReferenceUnit;
            Device = device;
            Id = id;
            InstanceName = instanceName;
            IsType = isType;
            MetricType = metricType;
            Mtu = mtu;
            Name = name;
            Net = net;
            PassiveDefault = passiveDefault;
        }
    }
}
