// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetNveInterface
    {
        /// <summary>
        /// This data source can read the NVE interface configuration.
        /// 
        /// - API Documentation: [nvoEp](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Network%20Virtualization/nvo:Ep/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetNveInterface.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNveInterfaceResult> InvokeAsync(GetNveInterfaceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNveInterfaceResult>("nxos:index/getNveInterface:getNveInterface", args ?? new GetNveInterfaceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the NVE interface configuration.
        /// 
        /// - API Documentation: [nvoEp](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Network%20Virtualization/nvo:Ep/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetNveInterface.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNveInterfaceResult> Invoke(GetNveInterfaceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNveInterfaceResult>("nxos:index/getNveInterface:getNveInterface", args ?? new GetNveInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNveInterfaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetNveInterfaceArgs()
        {
        }
        public static new GetNveInterfaceArgs Empty => new GetNveInterfaceArgs();
    }

    public sealed class GetNveInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetNveInterfaceInvokeArgs()
        {
        }
        public static new GetNveInterfaceInvokeArgs Empty => new GetNveInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetNveInterfaceResult
    {
        /// <summary>
        /// Administrative state.
        /// </summary>
        public readonly string AdminState;
        /// <summary>
        /// Enable or disable Virtual MAC Advertisement in VPC mode.
        /// </summary>
        public readonly bool AdvertiseVirtualMac;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Hold Down Time.
        /// </summary>
        public readonly int HoldDownTime;
        /// <summary>
        /// Host Reachability Protocol.
        /// </summary>
        public readonly string HostReachabilityProtocol;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// VxLAN Ingress Replication Protocol BGP.
        /// </summary>
        public readonly bool IngressReplicationProtocolBgp;
        /// <summary>
        /// Base multicast group address for L2.
        /// </summary>
        public readonly string MulticastGroupL2;
        /// <summary>
        /// Base multicast group address for L3.
        /// </summary>
        public readonly string MulticastGroupL3;
        /// <summary>
        /// Interface representing the Multisite Border Gateway. Must match first field in the output of `show int brief`.
        /// </summary>
        public readonly string MultisiteSourceInterface;
        /// <summary>
        /// Source Interface associated with the NVE. Must match first field in the output of `show int brief`.
        /// </summary>
        public readonly string SourceInterface;
        /// <summary>
        /// Suppress ARP.
        /// </summary>
        public readonly bool SuppressArp;
        /// <summary>
        /// Suppress MAC Route.
        /// </summary>
        public readonly bool SuppressMacRoute;

        [OutputConstructor]
        private GetNveInterfaceResult(
            string adminState,

            bool advertiseVirtualMac,

            string? device,

            int holdDownTime,

            string hostReachabilityProtocol,

            string id,

            bool ingressReplicationProtocolBgp,

            string multicastGroupL2,

            string multicastGroupL3,

            string multisiteSourceInterface,

            string sourceInterface,

            bool suppressArp,

            bool suppressMacRoute)
        {
            AdminState = adminState;
            AdvertiseVirtualMac = advertiseVirtualMac;
            Device = device;
            HoldDownTime = holdDownTime;
            HostReachabilityProtocol = hostReachabilityProtocol;
            Id = id;
            IngressReplicationProtocolBgp = ingressReplicationProtocolBgp;
            MulticastGroupL2 = multicastGroupL2;
            MulticastGroupL3 = multicastGroupL3;
            MultisiteSourceInterface = multisiteSourceInterface;
            SourceInterface = sourceInterface;
            SuppressArp = suppressArp;
            SuppressMacRoute = suppressMacRoute;
        }
    }
}
