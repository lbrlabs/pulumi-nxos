// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetPortChannelInterface
    {
        /// <summary>
        /// This data source can read the configuration of a port-channel interface.
        /// 
        /// - API Documentation: [pcAggrIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Interfaces/pc:AggrIf/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetPortChannelInterface.Invoke(new()
        ///     {
        ///         InterfaceId = "po1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPortChannelInterfaceResult> InvokeAsync(GetPortChannelInterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPortChannelInterfaceResult>("nxos:index/getPortChannelInterface:getPortChannelInterface", args ?? new GetPortChannelInterfaceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the configuration of a port-channel interface.
        /// 
        /// - API Documentation: [pcAggrIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Interfaces/pc:AggrIf/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetPortChannelInterface.Invoke(new()
        ///     {
        ///         InterfaceId = "po1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPortChannelInterfaceResult> Invoke(GetPortChannelInterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPortChannelInterfaceResult>("nxos:index/getPortChannelInterface:getPortChannelInterface", args ?? new GetPortChannelInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPortChannelInterfaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `po1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public string InterfaceId { get; set; } = null!;

        public GetPortChannelInterfaceArgs()
        {
        }
        public static new GetPortChannelInterfaceArgs Empty => new GetPortChannelInterfaceArgs();
    }

    public sealed class GetPortChannelInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `po1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        public GetPortChannelInterfaceInvokeArgs()
        {
        }
        public static new GetPortChannelInterfaceInvokeArgs Empty => new GetPortChannelInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetPortChannelInterfaceResult
    {
        /// <summary>
        /// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        /// </summary>
        public readonly string AccessVlan;
        /// <summary>
        /// Administrative port state.
        /// </summary>
        public readonly string AdminState;
        /// <summary>
        /// Administrative port auto-negotiation.
        /// </summary>
        public readonly string AutoNegotiation;
        /// <summary>
        /// The bandwidth parameter for a routed interface, port channel, or subinterface.
        /// </summary>
        public readonly int Bandwidth;
        /// <summary>
        /// The administrative port delay time.
        /// </summary>
        public readonly int Delay;
        /// <summary>
        /// Interface description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Duplex.
        /// </summary>
        public readonly string Duplex;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `po1`.
        /// </summary>
        public readonly string InterfaceId;
        /// <summary>
        /// Administrative port layer.
        /// </summary>
        public readonly string Layer;
        /// <summary>
        /// Administrative link logging.
        /// </summary>
        public readonly string LinkLogging;
        /// <summary>
        /// Maximum links.
        /// </summary>
        public readonly int MaximumLinks;
        /// <summary>
        /// The administrative port medium type.
        /// </summary>
        public readonly string Medium;
        /// <summary>
        /// Minimum links.
        /// </summary>
        public readonly int MinimumLinks;
        /// <summary>
        /// Administrative port mode.
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// Administrative port MTU.
        /// </summary>
        public readonly int Mtu;
        /// <summary>
        /// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        /// </summary>
        public readonly string NativeVlan;
        /// <summary>
        /// The aggregated interface protocol channel mode.
        /// </summary>
        public readonly string PortChannelMode;
        /// <summary>
        /// Administrative port speed.
        /// </summary>
        public readonly string Speed;
        /// <summary>
        /// Suspend Individual Port.
        /// </summary>
        public readonly string SuspendIndividual;
        /// <summary>
        /// List of trunk VLANs.
        /// </summary>
        public readonly string TrunkVlans;
        /// <summary>
        /// Port User Config Flags.
        /// </summary>
        public readonly string UserConfiguredFlags;

        [OutputConstructor]
        private GetPortChannelInterfaceResult(
            string accessVlan,

            string adminState,

            string autoNegotiation,

            int bandwidth,

            int delay,

            string description,

            string? device,

            string duplex,

            string id,

            string interfaceId,

            string layer,

            string linkLogging,

            int maximumLinks,

            string medium,

            int minimumLinks,

            string mode,

            int mtu,

            string nativeVlan,

            string portChannelMode,

            string speed,

            string suspendIndividual,

            string trunkVlans,

            string userConfiguredFlags)
        {
            AccessVlan = accessVlan;
            AdminState = adminState;
            AutoNegotiation = autoNegotiation;
            Bandwidth = bandwidth;
            Delay = delay;
            Description = description;
            Device = device;
            Duplex = duplex;
            Id = id;
            InterfaceId = interfaceId;
            Layer = layer;
            LinkLogging = linkLogging;
            MaximumLinks = maximumLinks;
            Medium = medium;
            MinimumLinks = minimumLinks;
            Mode = mode;
            Mtu = mtu;
            NativeVlan = nativeVlan;
            PortChannelMode = portChannelMode;
            Speed = speed;
            SuspendIndividual = suspendIndividual;
            TrunkVlans = trunkVlans;
            UserConfiguredFlags = userConfiguredFlags;
        }
    }
}
