// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetIsisInterface
    {
        /// <summary>
        /// This data source can read the IS-IS interface configuration.
        /// 
        /// - API Documentation: [isisInternalIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:InternalIf/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetIsisInterface.Invoke(new()
        ///     {
        ///         InterfaceId = "eth1/10",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIsisInterfaceResult> InvokeAsync(GetIsisInterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIsisInterfaceResult>("nxos:index/getIsisInterface:getIsisInterface", args ?? new GetIsisInterfaceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the IS-IS interface configuration.
        /// 
        /// - API Documentation: [isisInternalIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/isis:InternalIf/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetIsisInterface.Invoke(new()
        ///     {
        ///         InterfaceId = "eth1/10",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIsisInterfaceResult> Invoke(GetIsisInterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIsisInterfaceResult>("nxos:index/getIsisInterface:getIsisInterface", args ?? new GetIsisInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIsisInterfaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public string InterfaceId { get; set; } = null!;

        public GetIsisInterfaceArgs()
        {
        }
        public static new GetIsisInterfaceArgs Empty => new GetIsisInterfaceArgs();
    }

    public sealed class GetIsisInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        public GetIsisInterfaceInvokeArgs()
        {
        }
        public static new GetIsisInterfaceInvokeArgs Empty => new GetIsisInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetIsisInterfaceResult
    {
        /// <summary>
        /// Authentication Check for ISIS without specific level.
        /// </summary>
        public readonly bool AuthenticationCheck;
        /// <summary>
        /// Authentication Check for ISIS on Level-1.
        /// </summary>
        public readonly bool AuthenticationCheckL1;
        /// <summary>
        /// Authentication Check for ISIS on Level-2.
        /// </summary>
        public readonly bool AuthenticationCheckL2;
        /// <summary>
        /// Authentication Key for IS-IS without specific level.
        /// </summary>
        public readonly string AuthenticationKey;
        /// <summary>
        /// Authentication Key for IS-IS on Level-1.
        /// </summary>
        public readonly string AuthenticationKeyL1;
        /// <summary>
        /// Authentication Key for IS-IS on Level-2.
        /// </summary>
        public readonly string AuthenticationKeyL2;
        /// <summary>
        /// IS-IS Authentication-Type without specific level.
        /// </summary>
        public readonly string AuthenticationType;
        /// <summary>
        /// IS-IS Authentication-Type for Level-1.
        /// </summary>
        public readonly string AuthenticationTypeL1;
        /// <summary>
        /// IS-IS Authentication-Type for Level-2.
        /// </summary>
        public readonly string AuthenticationTypeL2;
        /// <summary>
        /// Circuit type.
        /// </summary>
        public readonly string CircuitType;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Hello interval.
        /// </summary>
        public readonly int HelloInterval;
        /// <summary>
        /// Hello interval Level-1.
        /// </summary>
        public readonly int HelloIntervalL1;
        /// <summary>
        /// Hello interval Level-2.
        /// </summary>
        public readonly int HelloIntervalL2;
        /// <summary>
        /// Hello multiplier.
        /// </summary>
        public readonly int HelloMultiplier;
        /// <summary>
        /// Hello multiplier Level-1.
        /// </summary>
        public readonly int HelloMultiplierL1;
        /// <summary>
        /// Hello multiplier Level-2.
        /// </summary>
        public readonly int HelloMultiplierL2;
        /// <summary>
        /// Hello padding.
        /// </summary>
        public readonly string HelloPadding;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        public readonly string InterfaceId;
        /// <summary>
        /// Interface metric Level-1.
        /// </summary>
        public readonly int MetricL1;
        /// <summary>
        /// Interface metric Level-2.
        /// </summary>
        public readonly int MetricL2;
        /// <summary>
        /// MTU Check for IS-IS without specific level.
        /// </summary>
        public readonly bool MtuCheck;
        /// <summary>
        /// MTU Check for IS-IS on Level-1.
        /// </summary>
        public readonly bool MtuCheckL1;
        /// <summary>
        /// MTU Check for IS-IS on Level-2.
        /// </summary>
        public readonly bool MtuCheckL2;
        /// <summary>
        /// Enabling Point-to-Point Network Type on IS-IS Interface.
        /// </summary>
        public readonly string NetworkTypeP2p;
        /// <summary>
        /// IS-IS Passive Interface Info.
        /// </summary>
        public readonly string Passive;
        /// <summary>
        /// Circuit priority.
        /// </summary>
        public readonly int PriorityL1;
        /// <summary>
        /// Circuit priority.
        /// </summary>
        public readonly int PriorityL2;
        /// <summary>
        /// VRF.
        /// </summary>
        public readonly string Vrf;

        [OutputConstructor]
        private GetIsisInterfaceResult(
            bool authenticationCheck,

            bool authenticationCheckL1,

            bool authenticationCheckL2,

            string authenticationKey,

            string authenticationKeyL1,

            string authenticationKeyL2,

            string authenticationType,

            string authenticationTypeL1,

            string authenticationTypeL2,

            string circuitType,

            string? device,

            int helloInterval,

            int helloIntervalL1,

            int helloIntervalL2,

            int helloMultiplier,

            int helloMultiplierL1,

            int helloMultiplierL2,

            string helloPadding,

            string id,

            string interfaceId,

            int metricL1,

            int metricL2,

            bool mtuCheck,

            bool mtuCheckL1,

            bool mtuCheckL2,

            string networkTypeP2p,

            string passive,

            int priorityL1,

            int priorityL2,

            string vrf)
        {
            AuthenticationCheck = authenticationCheck;
            AuthenticationCheckL1 = authenticationCheckL1;
            AuthenticationCheckL2 = authenticationCheckL2;
            AuthenticationKey = authenticationKey;
            AuthenticationKeyL1 = authenticationKeyL1;
            AuthenticationKeyL2 = authenticationKeyL2;
            AuthenticationType = authenticationType;
            AuthenticationTypeL1 = authenticationTypeL1;
            AuthenticationTypeL2 = authenticationTypeL2;
            CircuitType = circuitType;
            Device = device;
            HelloInterval = helloInterval;
            HelloIntervalL1 = helloIntervalL1;
            HelloIntervalL2 = helloIntervalL2;
            HelloMultiplier = helloMultiplier;
            HelloMultiplierL1 = helloMultiplierL1;
            HelloMultiplierL2 = helloMultiplierL2;
            HelloPadding = helloPadding;
            Id = id;
            InterfaceId = interfaceId;
            MetricL1 = metricL1;
            MetricL2 = metricL2;
            MtuCheck = mtuCheck;
            MtuCheckL1 = mtuCheckL1;
            MtuCheckL2 = mtuCheckL2;
            NetworkTypeP2p = networkTypeP2p;
            Passive = passive;
            PriorityL1 = priorityL1;
            PriorityL2 = priorityL2;
            Vrf = vrf;
        }
    }
}
