// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetVpcDomain
    {
        /// <summary>
        /// This data source can read the vPC domain configuration.
        /// 
        /// - API Documentation: [vpcDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/vpc:Dom/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetVpcDomain.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVpcDomainResult> InvokeAsync(GetVpcDomainArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcDomainResult>("nxos:index/getVpcDomain:getVpcDomain", args ?? new GetVpcDomainArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the vPC domain configuration.
        /// 
        /// - API Documentation: [vpcDom](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/vpc:Dom/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetVpcDomain.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVpcDomainResult> Invoke(GetVpcDomainInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcDomainResult>("nxos:index/getVpcDomain:getVpcDomain", args ?? new GetVpcDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcDomainArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetVpcDomainArgs()
        {
        }
        public static new GetVpcDomainArgs Empty => new GetVpcDomainArgs();
    }

    public sealed class GetVpcDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetVpcDomainInvokeArgs()
        {
        }
        public static new GetVpcDomainInvokeArgs Empty => new GetVpcDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcDomainResult
    {
        /// <summary>
        /// vPC suspend locally.
        /// </summary>
        public readonly string AdminState;
        /// <summary>
        /// Auto Recovery.
        /// </summary>
        public readonly string AutoRecovery;
        /// <summary>
        /// Auto Recovery interval.
        /// </summary>
        public readonly int AutoRecoveryInterval;
        /// <summary>
        /// Delay restore for orphan ports.
        /// </summary>
        public readonly int DelayRestoreOrphanPort;
        /// <summary>
        /// Delay restore for SVI.
        /// </summary>
        public readonly int DelayRestoreSvi;
        /// <summary>
        /// Delay restore for vPC links.
        /// </summary>
        public readonly int DelayRestoreVpc;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Domain id.
        /// </summary>
        public readonly int DomainId;
        /// <summary>
        /// DSCP.
        /// </summary>
        public readonly int Dscp;
        /// <summary>
        /// Fast Convergence.
        /// </summary>
        public readonly string FastConvergence;
        /// <summary>
        /// Graceful Type-1 Consistency Check.
        /// </summary>
        public readonly string GracefulConsistencyCheck;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// L3 Peer Router.
        /// </summary>
        public readonly string L3PeerRouter;
        /// <summary>
        /// L3 Peer Router Syslog.
        /// </summary>
        public readonly string L3PeerRouterSyslog;
        /// <summary>
        /// L3 Peer Router Syslog Interval.
        /// </summary>
        public readonly int L3PeerRouterSyslogInterval;
        /// <summary>
        /// Peer Gateway.
        /// </summary>
        public readonly string PeerGateway;
        /// <summary>
        /// vPC peer IP address.
        /// </summary>
        public readonly string PeerIp;
        /// <summary>
        /// vPC pair switches.
        /// </summary>
        public readonly string PeerSwitch;
        /// <summary>
        /// Role priority.
        /// </summary>
        public readonly int RolePriority;
        /// <summary>
        /// System MAC.
        /// </summary>
        public readonly string SysMac;
        /// <summary>
        /// System priority.
        /// </summary>
        public readonly int SystemPriority;
        /// <summary>
        /// Tracking object to suspend vPC if object goes down.
        /// </summary>
        public readonly int Track;
        /// <summary>
        /// vPC virtual IP address (vIP).
        /// </summary>
        public readonly string VirtualIp;

        [OutputConstructor]
        private GetVpcDomainResult(
            string adminState,

            string autoRecovery,

            int autoRecoveryInterval,

            int delayRestoreOrphanPort,

            int delayRestoreSvi,

            int delayRestoreVpc,

            string? device,

            int domainId,

            int dscp,

            string fastConvergence,

            string gracefulConsistencyCheck,

            string id,

            string l3PeerRouter,

            string l3PeerRouterSyslog,

            int l3PeerRouterSyslogInterval,

            string peerGateway,

            string peerIp,

            string peerSwitch,

            int rolePriority,

            string sysMac,

            int systemPriority,

            int track,

            string virtualIp)
        {
            AdminState = adminState;
            AutoRecovery = autoRecovery;
            AutoRecoveryInterval = autoRecoveryInterval;
            DelayRestoreOrphanPort = delayRestoreOrphanPort;
            DelayRestoreSvi = delayRestoreSvi;
            DelayRestoreVpc = delayRestoreVpc;
            Device = device;
            DomainId = domainId;
            Dscp = dscp;
            FastConvergence = fastConvergence;
            GracefulConsistencyCheck = gracefulConsistencyCheck;
            Id = id;
            L3PeerRouter = l3PeerRouter;
            L3PeerRouterSyslog = l3PeerRouterSyslog;
            L3PeerRouterSyslogInterval = l3PeerRouterSyslogInterval;
            PeerGateway = peerGateway;
            PeerIp = peerIp;
            PeerSwitch = peerSwitch;
            RolePriority = rolePriority;
            SysMac = sysMac;
            SystemPriority = systemPriority;
            Track = track;
            VirtualIp = virtualIp;
        }
    }
}
