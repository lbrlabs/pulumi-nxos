// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetVrfRouteTargetAddressFamily
    {
        /// <summary>
        /// This data source can read a VRF Route Target Address Family.
        /// 
        /// - API Documentation: [rtctrlAfCtrl](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtctrl:AfCtrl/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetVrfRouteTargetAddressFamily.Invoke(new()
        ///     {
        ///         AddressFamily = "ipv4-ucast",
        ///         RouteTargetAddressFamily = "ipv4-ucast",
        ///         Vrf = "VRF1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVrfRouteTargetAddressFamilyResult> InvokeAsync(GetVrfRouteTargetAddressFamilyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVrfRouteTargetAddressFamilyResult>("nxos:index/getVrfRouteTargetAddressFamily:getVrfRouteTargetAddressFamily", args ?? new GetVrfRouteTargetAddressFamilyArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read a VRF Route Target Address Family.
        /// 
        /// - API Documentation: [rtctrlAfCtrl](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtctrl:AfCtrl/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetVrfRouteTargetAddressFamily.Invoke(new()
        ///     {
        ///         AddressFamily = "ipv4-ucast",
        ///         RouteTargetAddressFamily = "ipv4-ucast",
        ///         Vrf = "VRF1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVrfRouteTargetAddressFamilyResult> Invoke(GetVrfRouteTargetAddressFamilyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVrfRouteTargetAddressFamilyResult>("nxos:index/getVrfRouteTargetAddressFamily:getVrfRouteTargetAddressFamily", args ?? new GetVrfRouteTargetAddressFamilyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVrfRouteTargetAddressFamilyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Address family.
        /// </summary>
        [Input("addressFamily", required: true)]
        public string AddressFamily { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Route Target Address Family.
        /// </summary>
        [Input("routeTargetAddressFamily", required: true)]
        public string RouteTargetAddressFamily { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrf", required: true)]
        public string Vrf { get; set; } = null!;

        public GetVrfRouteTargetAddressFamilyArgs()
        {
        }
        public static new GetVrfRouteTargetAddressFamilyArgs Empty => new GetVrfRouteTargetAddressFamilyArgs();
    }

    public sealed class GetVrfRouteTargetAddressFamilyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Address family.
        /// </summary>
        [Input("addressFamily", required: true)]
        public Input<string> AddressFamily { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Route Target Address Family.
        /// </summary>
        [Input("routeTargetAddressFamily", required: true)]
        public Input<string> RouteTargetAddressFamily { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrf", required: true)]
        public Input<string> Vrf { get; set; } = null!;

        public GetVrfRouteTargetAddressFamilyInvokeArgs()
        {
        }
        public static new GetVrfRouteTargetAddressFamilyInvokeArgs Empty => new GetVrfRouteTargetAddressFamilyInvokeArgs();
    }


    [OutputType]
    public sealed class GetVrfRouteTargetAddressFamilyResult
    {
        /// <summary>
        /// Address family.
        /// </summary>
        public readonly string AddressFamily;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Route Target Address Family.
        /// </summary>
        public readonly string RouteTargetAddressFamily;
        /// <summary>
        /// VRF name.
        /// </summary>
        public readonly string Vrf;

        [OutputConstructor]
        private GetVrfRouteTargetAddressFamilyResult(
            string addressFamily,

            string? device,

            string id,

            string routeTargetAddressFamily,

            string vrf)
        {
            AddressFamily = addressFamily;
            Device = device;
            Id = id;
            RouteTargetAddressFamily = routeTargetAddressFamily;
            Vrf = vrf;
        }
    }
}
