// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    /// <summary>
    /// This resource can manage a subinterface.
    /// 
    /// - API Documentation: [l3EncRtdIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Layer%203/l3:EncRtdIf/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nxos = Lbrlabs.PulumiPackage.Nxos;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Nxos.Subinterface("example", new()
    ///     {
    ///         AdminState = "down",
    ///         Bandwidth = 1000,
    ///         Delay = 10,
    ///         Description = "My Description",
    ///         Encap = "vlan-124",
    ///         InterfaceId = "eth1/10.124",
    ///         LinkLogging = "enable",
    ///         Medium = "broadcast",
    ///         Mtu = 1500,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import nxos:index/subinterface:Subinterface example "sys/intf/encrtd-[eth1/10.124]"
    /// ```
    /// </summary>
    [NxosResourceType("nxos:index/subinterface:Subinterface")]
    public partial class Subinterface : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Administrative state. - Choices: `up`, `down` - Default value: `up`
        /// </summary>
        [Output("adminState")]
        public Output<string> AdminState { get; private set; } = null!;

        /// <summary>
        /// Specifies the administrative port bandwidth. - Range: `0`-`3200000000` - Default value: `0`
        /// </summary>
        [Output("bandwidth")]
        public Output<int> Bandwidth { get; private set; } = null!;

        /// <summary>
        /// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
        /// </summary>
        [Output("delay")]
        public Output<int> Delay { get; private set; } = null!;

        /// <summary>
        /// Interface description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Subinterface encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
        /// </summary>
        [Output("encap")]
        public Output<string> Encap { get; private set; } = null!;

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
        /// </summary>
        [Output("interfaceId")]
        public Output<string> InterfaceId { get; private set; } = null!;

        /// <summary>
        /// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        /// </summary>
        [Output("linkLogging")]
        public Output<string> LinkLogging { get; private set; } = null!;

        /// <summary>
        /// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        /// </summary>
        [Output("medium")]
        public Output<string> Medium { get; private set; } = null!;

        /// <summary>
        /// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Output("mtu")]
        public Output<int> Mtu { get; private set; } = null!;


        /// <summary>
        /// Create a Subinterface resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subinterface(string name, SubinterfaceArgs args, CustomResourceOptions? options = null)
            : base("nxos:index/subinterface:Subinterface", name, args ?? new SubinterfaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Subinterface(string name, Input<string> id, SubinterfaceState? state = null, CustomResourceOptions? options = null)
            : base("nxos:index/subinterface:Subinterface", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subinterface resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subinterface Get(string name, Input<string> id, SubinterfaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Subinterface(name, id, state, options);
        }
    }

    public sealed class SubinterfaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Administrative state. - Choices: `up`, `down` - Default value: `up`
        /// </summary>
        [Input("adminState")]
        public Input<string>? AdminState { get; set; }

        /// <summary>
        /// Specifies the administrative port bandwidth. - Range: `0`-`3200000000` - Default value: `0`
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
        /// </summary>
        [Input("delay")]
        public Input<int>? Delay { get; set; }

        /// <summary>
        /// Interface description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Subinterface encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
        /// </summary>
        [Input("encap")]
        public Input<string>? Encap { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        /// <summary>
        /// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        /// </summary>
        [Input("linkLogging")]
        public Input<string>? LinkLogging { get; set; }

        /// <summary>
        /// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        /// </summary>
        [Input("medium")]
        public Input<string>? Medium { get; set; }

        /// <summary>
        /// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        public SubinterfaceArgs()
        {
        }
        public static new SubinterfaceArgs Empty => new SubinterfaceArgs();
    }

    public sealed class SubinterfaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Administrative state. - Choices: `up`, `down` - Default value: `up`
        /// </summary>
        [Input("adminState")]
        public Input<string>? AdminState { get; set; }

        /// <summary>
        /// Specifies the administrative port bandwidth. - Range: `0`-`3200000000` - Default value: `0`
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
        /// </summary>
        [Input("delay")]
        public Input<int>? Delay { get; set; }

        /// <summary>
        /// Interface description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Subinterface encapsulation. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`. - Default value: `unknown`
        /// </summary>
        [Input("encap")]
        public Input<string>? Encap { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1.10`.
        /// </summary>
        [Input("interfaceId")]
        public Input<string>? InterfaceId { get; set; }

        /// <summary>
        /// Administrative link logging. - Choices: `default`, `enable`, `disable` - Default value: `default`
        /// </summary>
        [Input("linkLogging")]
        public Input<string>? LinkLogging { get; set; }

        /// <summary>
        /// The administrative port medium type. - Choices: `broadcast`, `p2p` - Default value: `broadcast`
        /// </summary>
        [Input("medium")]
        public Input<string>? Medium { get; set; }

        /// <summary>
        /// Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        public SubinterfaceState()
        {
        }
        public static new SubinterfaceState Empty => new SubinterfaceState();
    }
}
