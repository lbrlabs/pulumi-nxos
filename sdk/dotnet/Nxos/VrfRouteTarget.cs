// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    /// <summary>
    /// This resource can manage a VRF Route Target Entry.
    /// 
    /// - API Documentation: [rtctrlRttEntry](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Routing%20and%20Forwarding/rtctrl:RttEntry/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Nxos = Lbrlabs.PulumiPackage.Nxos;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Nxos.VrfRouteTarget("example", new()
    ///     {
    ///         AddressFamily = "ipv4-ucast",
    ///         Direction = "import",
    ///         RouteTarget = "route-target:as2-nn2:2:2",
    ///         RouteTargetAddressFamily = "ipv4-ucast",
    ///         Vrf = "VRF1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import nxos:index/vrfRouteTarget:VrfRouteTarget example "sys/inst-[VRF1]/dom-[VRF1]/af-[ipv4-ucast]/ctrl-[ipv4-ucast]/rttp-[import]/ent-[route-target:as2-nn2:2:2]"
    /// ```
    /// </summary>
    [NxosResourceType("nxos:index/vrfRouteTarget:VrfRouteTarget")]
    public partial class VrfRouteTarget : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
        /// </summary>
        [Output("addressFamily")]
        public Output<string> AddressFamily { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Route Target direction. - Choices: `import`, `export`
        /// </summary>
        [Output("direction")]
        public Output<string> Direction { get; private set; } = null!;

        /// <summary>
        /// Route Target in NX-OS DME format.
        /// </summary>
        [Output("routeTarget")]
        public Output<string> RouteTarget { get; private set; } = null!;

        /// <summary>
        /// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
        /// </summary>
        [Output("routeTargetAddressFamily")]
        public Output<string> RouteTargetAddressFamily { get; private set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Output("vrf")]
        public Output<string> Vrf { get; private set; } = null!;


        /// <summary>
        /// Create a VrfRouteTarget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VrfRouteTarget(string name, VrfRouteTargetArgs args, CustomResourceOptions? options = null)
            : base("nxos:index/vrfRouteTarget:VrfRouteTarget", name, args ?? new VrfRouteTargetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VrfRouteTarget(string name, Input<string> id, VrfRouteTargetState? state = null, CustomResourceOptions? options = null)
            : base("nxos:index/vrfRouteTarget:VrfRouteTarget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VrfRouteTarget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VrfRouteTarget Get(string name, Input<string> id, VrfRouteTargetState? state = null, CustomResourceOptions? options = null)
        {
            return new VrfRouteTarget(name, id, state, options);
        }
    }

    public sealed class VrfRouteTargetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
        /// </summary>
        [Input("addressFamily", required: true)]
        public Input<string> AddressFamily { get; set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Route Target direction. - Choices: `import`, `export`
        /// </summary>
        [Input("direction", required: true)]
        public Input<string> Direction { get; set; } = null!;

        /// <summary>
        /// Route Target in NX-OS DME format.
        /// </summary>
        [Input("routeTarget", required: true)]
        public Input<string> RouteTarget { get; set; } = null!;

        /// <summary>
        /// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
        /// </summary>
        [Input("routeTargetAddressFamily", required: true)]
        public Input<string> RouteTargetAddressFamily { get; set; } = null!;

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrf", required: true)]
        public Input<string> Vrf { get; set; } = null!;

        public VrfRouteTargetArgs()
        {
        }
        public static new VrfRouteTargetArgs Empty => new VrfRouteTargetArgs();
    }

    public sealed class VrfRouteTargetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
        /// </summary>
        [Input("addressFamily")]
        public Input<string>? AddressFamily { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Route Target direction. - Choices: `import`, `export`
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// Route Target in NX-OS DME format.
        /// </summary>
        [Input("routeTarget")]
        public Input<string>? RouteTarget { get; set; }

        /// <summary>
        /// Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
        /// </summary>
        [Input("routeTargetAddressFamily")]
        public Input<string>? RouteTargetAddressFamily { get; set; }

        /// <summary>
        /// VRF name.
        /// </summary>
        [Input("vrf")]
        public Input<string>? Vrf { get; set; }

        public VrfRouteTargetState()
        {
        }
        public static new VrfRouteTargetState Empty => new VrfRouteTargetState();
    }
}
