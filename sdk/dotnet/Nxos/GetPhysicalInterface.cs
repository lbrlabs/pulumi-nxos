// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Nxos
{
    public static class GetPhysicalInterface
    {
        /// <summary>
        /// This data source can read the configuration of a physical interface.
        /// 
        /// - API Documentation: [l1PhysIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/l1:PhysIf/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetPhysicalInterface.Invoke(new()
        ///     {
        ///         InterfaceId = "eth1/10",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPhysicalInterfaceResult> InvokeAsync(GetPhysicalInterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPhysicalInterfaceResult>("nxos:index/getPhysicalInterface:getPhysicalInterface", args ?? new GetPhysicalInterfaceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the configuration of a physical interface.
        /// 
        /// - API Documentation: [l1PhysIf](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/System/l1:PhysIf/)
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Nxos = Pulumi.Nxos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Nxos.GetPhysicalInterface.Invoke(new()
        ///     {
        ///         InterfaceId = "eth1/10",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPhysicalInterfaceResult> Invoke(GetPhysicalInterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPhysicalInterfaceResult>("nxos:index/getPhysicalInterface:getPhysicalInterface", args ?? new GetPhysicalInterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPhysicalInterfaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public string InterfaceId { get; set; } = null!;

        public GetPhysicalInterfaceArgs()
        {
        }
        public static new GetPhysicalInterfaceArgs Empty => new GetPhysicalInterfaceArgs();
    }

    public sealed class GetPhysicalInterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        [Input("interfaceId", required: true)]
        public Input<string> InterfaceId { get; set; } = null!;

        public GetPhysicalInterfaceInvokeArgs()
        {
        }
        public static new GetPhysicalInterfaceInvokeArgs Empty => new GetPhysicalInterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetPhysicalInterfaceResult
    {
        /// <summary>
        /// Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        /// </summary>
        public readonly string AccessVlan;
        /// <summary>
        /// Administrative port state.
        /// </summary>
        public readonly string AdminState;
        /// <summary>
        /// Administrative port auto-negotiation.
        /// </summary>
        public readonly string AutoNegotiation;
        /// <summary>
        /// The bandwidth parameter for a routed interface, port channel, or subinterface.
        /// </summary>
        public readonly int Bandwidth;
        /// <summary>
        /// The administrative port delay time.
        /// </summary>
        public readonly int Delay;
        /// <summary>
        /// Interface description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Duplex.
        /// </summary>
        public readonly string Duplex;
        /// <summary>
        /// FEC mode.
        /// </summary>
        public readonly string FecMode;
        /// <summary>
        /// The distinguished name of the object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Must match first field in the output of `show intf brief`. Example: `eth1/1`.
        /// </summary>
        public readonly string InterfaceId;
        /// <summary>
        /// Administrative port layer.
        /// </summary>
        public readonly string Layer;
        /// <summary>
        /// Administrative port link debounce interval.
        /// </summary>
        public readonly int LinkDebounceDown;
        /// <summary>
        /// Link Debounce Interval - LinkUp Event.
        /// </summary>
        public readonly int LinkDebounceUp;
        /// <summary>
        /// Administrative link logging.
        /// </summary>
        public readonly string LinkLogging;
        /// <summary>
        /// The administrative port medium type.
        /// </summary>
        public readonly string Medium;
        /// <summary>
        /// Administrative port mode.
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// Administrative port MTU.
        /// </summary>
        public readonly int Mtu;
        /// <summary>
        /// Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
        /// </summary>
        public readonly string NativeVlan;
        /// <summary>
        /// Administrative port speed.
        /// </summary>
        public readonly string Speed;
        /// <summary>
        /// Speed group.
        /// </summary>
        public readonly string SpeedGroup;
        /// <summary>
        /// List of trunk VLANs.
        /// </summary>
        public readonly string TrunkVlans;
        /// <summary>
        /// UDE (Uni-Directional Ethernet).
        /// </summary>
        public readonly string UniDirectionalEthernet;
        /// <summary>
        /// Port User Config Flags.
        /// </summary>
        public readonly string UserConfiguredFlags;

        [OutputConstructor]
        private GetPhysicalInterfaceResult(
            string accessVlan,

            string adminState,

            string autoNegotiation,

            int bandwidth,

            int delay,

            string description,

            string? device,

            string duplex,

            string fecMode,

            string id,

            string interfaceId,

            string layer,

            int linkDebounceDown,

            int linkDebounceUp,

            string linkLogging,

            string medium,

            string mode,

            int mtu,

            string nativeVlan,

            string speed,

            string speedGroup,

            string trunkVlans,

            string uniDirectionalEthernet,

            string userConfiguredFlags)
        {
            AccessVlan = accessVlan;
            AdminState = adminState;
            AutoNegotiation = autoNegotiation;
            Bandwidth = bandwidth;
            Delay = delay;
            Description = description;
            Device = device;
            Duplex = duplex;
            FecMode = fecMode;
            Id = id;
            InterfaceId = interfaceId;
            Layer = layer;
            LinkDebounceDown = linkDebounceDown;
            LinkDebounceUp = linkDebounceUp;
            LinkLogging = linkLogging;
            Medium = medium;
            Mode = mode;
            Mtu = mtu;
            NativeVlan = nativeVlan;
            Speed = speed;
            SpeedGroup = speedGroup;
            TrunkVlans = trunkVlans;
            UniDirectionalEthernet = uniDirectionalEthernet;
            UserConfiguredFlags = userConfiguredFlags;
        }
    }
}
