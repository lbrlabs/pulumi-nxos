// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This data source can read IPv4 Access List Entries.
 *
 * - API Documentation: [ipv4aclACE](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Security%20and%20Policing/ipv4acl:ACE/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nxos from "@pulumi/nxos";
 *
 * const example = nxos.getIpv4AccessListEntry({
 *     name: "ACL1",
 *     sequenceNumber: 10,
 * });
 * ```
 */
export function getIpv4AccessListEntry(args: GetIpv4AccessListEntryArgs, opts?: pulumi.InvokeOptions): Promise<GetIpv4AccessListEntryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nxos:index/getIpv4AccessListEntry:getIpv4AccessListEntry", {
        "device": args.device,
        "name": args.name,
        "sequenceNumber": args.sequenceNumber,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpv4AccessListEntry.
 */
export interface GetIpv4AccessListEntryArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: string;
    /**
     * Access list name.
     */
    name: string;
    /**
     * Sequence number.
     */
    sequenceNumber: number;
}

/**
 * A collection of values returned by getIpv4AccessListEntry.
 */
export interface GetIpv4AccessListEntryResult {
    /**
     * Match TCP ACK flag.
     */
    readonly ack: boolean;
    /**
     * Action.
     */
    readonly action: string;
    /**
     * Destination address group.
     */
    readonly destinationAddressGroup: string;
    /**
     * First destination port number or name.
     */
    readonly destinationPort1: string;
    /**
     * Second destination port number or name.
     */
    readonly destinationPort2: string;
    /**
     * Destination port group.
     */
    readonly destinationPortGroup: string;
    /**
     * Destination port mask number or name.
     */
    readonly destinationPortMask: string;
    /**
     * Destination port operator.
     */
    readonly destinationPortOperator: string;
    /**
     * Destination prefix.
     */
    readonly destinationPrefix: string;
    /**
     * Destination prefix length.
     */
    readonly destinationPrefixLength: string;
    /**
     * Destination prefix mask.
     */
    readonly destinationPrefixMask: string;
    /**
     * A device name from the provider configuration.
     */
    readonly device?: string;
    /**
     * Match DSCP.
     */
    readonly dscp: number;
    /**
     * Match TCP EST flag.
     */
    readonly est: boolean;
    /**
     * Match TCP FIN flag.
     */
    readonly fin: boolean;
    /**
     * Match non-initial fragment.
     */
    readonly fragment: boolean;
    /**
     * HTTP option method.
     */
    readonly httpOptionType: string;
    /**
     * ICMP code.
     */
    readonly icmpCode: number;
    /**
     * ICMP type.
     */
    readonly icmpType: number;
    /**
     * The distinguished name of the object.
     */
    readonly id: string;
    /**
     * Log matches against ACL entry.
     */
    readonly logging: boolean;
    /**
     * Access list name.
     */
    readonly name: string;
    /**
     * First packet length. Either `invalid` or a number between 19 and 9210.
     */
    readonly packetLength1: string;
    /**
     * Second packet length. Either `invalid` or a number between 19 and 9210.
     */
    readonly packetLength2: string;
    /**
     * Packet length operator.
     */
    readonly packetLengthOperator: string;
    /**
     * Precedence. Either `unspecified` or a number between 0 and 7.
     */
    readonly precedence: string;
    /**
     * Protocol name or number.
     */
    readonly protocol: string;
    /**
     * Protocol mask name or number.
     */
    readonly protocolMask: string;
    /**
     * Match TCP PSH flag.
     */
    readonly psh: boolean;
    /**
     * Redirect action.
     */
    readonly redirect: string;
    /**
     * ACL comment.
     */
    readonly remark: string;
    /**
     * Match TCP REV flag.
     */
    readonly rev: boolean;
    /**
     * Match TCP RST flag.
     */
    readonly rst: boolean;
    /**
     * Sequence number.
     */
    readonly sequenceNumber: number;
    /**
     * Source address group.
     */
    readonly sourceAddressGroup: string;
    /**
     * First source port name or number.
     */
    readonly sourcePort1: string;
    /**
     * Second source port name or number.
     */
    readonly sourcePort2: string;
    /**
     * Source port group.
     */
    readonly sourcePortGroup: string;
    /**
     * Source port mask name or number.
     */
    readonly sourcePortMask: string;
    /**
     * Source port operator.
     */
    readonly sourcePortOperator: string;
    /**
     * Source prefix.
     */
    readonly sourcePrefix: string;
    /**
     * Source prefix length.
     */
    readonly sourcePrefixLength: string;
    /**
     * Source prefix mask.
     */
    readonly sourcePrefixMask: string;
    /**
     * Match TCP SYN flag.
     */
    readonly syn: boolean;
    /**
     * Time range name.
     */
    readonly timeRange: string;
    /**
     * TTL.
     */
    readonly ttl: number;
    /**
     * Match TCP URG flag.
     */
    readonly urg: boolean;
    /**
     * VLAN ID.
     */
    readonly vlan: number;
    /**
     * NVE VNI ID. Either `invalid` or a number between 0 and 16777216.
     */
    readonly vni: string;
}
/**
 * This data source can read IPv4 Access List Entries.
 *
 * - API Documentation: [ipv4aclACE](https://pubhub.devnetcloud.com/media/dme-docs-10-2-2/docs/Security%20and%20Policing/ipv4acl:ACE/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as nxos from "@pulumi/nxos";
 *
 * const example = nxos.getIpv4AccessListEntry({
 *     name: "ACL1",
 *     sequenceNumber: 10,
 * });
 * ```
 */
export function getIpv4AccessListEntryOutput(args: GetIpv4AccessListEntryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIpv4AccessListEntryResult> {
    return pulumi.output(args).apply((a: any) => getIpv4AccessListEntry(a, opts))
}

/**
 * A collection of arguments for invoking getIpv4AccessListEntry.
 */
export interface GetIpv4AccessListEntryOutputArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Access list name.
     */
    name: pulumi.Input<string>;
    /**
     * Sequence number.
     */
    sequenceNumber: pulumi.Input<number>;
}
