// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nxos.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetIpv4PrefixListRuleEntryPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetIpv4PrefixListRuleEntryPlainArgs Empty = new GetIpv4PrefixListRuleEntryPlainArgs();

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable String device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * IPv4 Prefix List Rule Entry order.
     * 
     */
    @Import(name="order", required=true)
    private Integer order;

    /**
     * @return IPv4 Prefix List Rule Entry order.
     * 
     */
    public Integer order() {
        return this.order;
    }

    /**
     * IPv4 Prefix List Rule name.
     * 
     */
    @Import(name="ruleName", required=true)
    private String ruleName;

    /**
     * @return IPv4 Prefix List Rule name.
     * 
     */
    public String ruleName() {
        return this.ruleName;
    }

    private GetIpv4PrefixListRuleEntryPlainArgs() {}

    private GetIpv4PrefixListRuleEntryPlainArgs(GetIpv4PrefixListRuleEntryPlainArgs $) {
        this.device = $.device;
        this.order = $.order;
        this.ruleName = $.ruleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetIpv4PrefixListRuleEntryPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetIpv4PrefixListRuleEntryPlainArgs $;

        public Builder() {
            $ = new GetIpv4PrefixListRuleEntryPlainArgs();
        }

        public Builder(GetIpv4PrefixListRuleEntryPlainArgs defaults) {
            $ = new GetIpv4PrefixListRuleEntryPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable String device) {
            $.device = device;
            return this;
        }

        /**
         * @param order IPv4 Prefix List Rule Entry order.
         * 
         * @return builder
         * 
         */
        public Builder order(Integer order) {
            $.order = order;
            return this;
        }

        /**
         * @param ruleName IPv4 Prefix List Rule name.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        public GetIpv4PrefixListRuleEntryPlainArgs build() {
            $.order = Objects.requireNonNull($.order, "expected parameter 'order' to be non-null");
            $.ruleName = Objects.requireNonNull($.ruleName, "expected parameter 'ruleName' to be non-null");
            return $;
        }
    }

}
