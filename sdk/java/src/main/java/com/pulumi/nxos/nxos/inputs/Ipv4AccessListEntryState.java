// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nxos.nxos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class Ipv4AccessListEntryState extends com.pulumi.resources.ResourceArgs {

    public static final Ipv4AccessListEntryState Empty = new Ipv4AccessListEntryState();

    /**
     * Match TCP ACK flag.
     * 
     */
    @Import(name="ack")
    private @Nullable Output<Boolean> ack;

    /**
     * @return Match TCP ACK flag.
     * 
     */
    public Optional<Output<Boolean>> ack() {
        return Optional.ofNullable(this.ack);
    }

    /**
     * Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Destination address group.
     * 
     */
    @Import(name="destinationAddressGroup")
    private @Nullable Output<String> destinationAddressGroup;

    /**
     * @return Destination address group.
     * 
     */
    public Optional<Output<String>> destinationAddressGroup() {
        return Optional.ofNullable(this.destinationAddressGroup);
    }

    /**
     * First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     * 
     */
    @Import(name="destinationPort1")
    private @Nullable Output<String> destinationPort1;

    /**
     * @return First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     * 
     */
    public Optional<Output<String>> destinationPort1() {
        return Optional.ofNullable(this.destinationPort1);
    }

    /**
     * Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     * 
     */
    @Import(name="destinationPort2")
    private @Nullable Output<String> destinationPort2;

    /**
     * @return Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     * 
     */
    public Optional<Output<String>> destinationPort2() {
        return Optional.ofNullable(this.destinationPort2);
    }

    /**
     * Destination port group.
     * 
     */
    @Import(name="destinationPortGroup")
    private @Nullable Output<String> destinationPortGroup;

    /**
     * @return Destination port group.
     * 
     */
    public Optional<Output<String>> destinationPortGroup() {
        return Optional.ofNullable(this.destinationPortGroup);
    }

    /**
     * Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     * 
     */
    @Import(name="destinationPortMask")
    private @Nullable Output<String> destinationPortMask;

    /**
     * @return Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     * 
     */
    public Optional<Output<String>> destinationPortMask() {
        return Optional.ofNullable(this.destinationPortMask);
    }

    /**
     * Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     * 
     */
    @Import(name="destinationPortOperator")
    private @Nullable Output<String> destinationPortOperator;

    /**
     * @return Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     * 
     */
    public Optional<Output<String>> destinationPortOperator() {
        return Optional.ofNullable(this.destinationPortOperator);
    }

    /**
     * Destination prefix.
     * 
     */
    @Import(name="destinationPrefix")
    private @Nullable Output<String> destinationPrefix;

    /**
     * @return Destination prefix.
     * 
     */
    public Optional<Output<String>> destinationPrefix() {
        return Optional.ofNullable(this.destinationPrefix);
    }

    /**
     * Destination prefix length.
     * 
     */
    @Import(name="destinationPrefixLength")
    private @Nullable Output<String> destinationPrefixLength;

    /**
     * @return Destination prefix length.
     * 
     */
    public Optional<Output<String>> destinationPrefixLength() {
        return Optional.ofNullable(this.destinationPrefixLength);
    }

    /**
     * Destination prefix mask.
     * 
     */
    @Import(name="destinationPrefixMask")
    private @Nullable Output<String> destinationPrefixMask;

    /**
     * @return Destination prefix mask.
     * 
     */
    public Optional<Output<String>> destinationPrefixMask() {
        return Optional.ofNullable(this.destinationPrefixMask);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Match DSCP. - Range: `0`-`63`
     * 
     */
    @Import(name="dscp")
    private @Nullable Output<Integer> dscp;

    /**
     * @return Match DSCP. - Range: `0`-`63`
     * 
     */
    public Optional<Output<Integer>> dscp() {
        return Optional.ofNullable(this.dscp);
    }

    /**
     * Match TCP EST flag.
     * 
     */
    @Import(name="est")
    private @Nullable Output<Boolean> est;

    /**
     * @return Match TCP EST flag.
     * 
     */
    public Optional<Output<Boolean>> est() {
        return Optional.ofNullable(this.est);
    }

    /**
     * Match TCP FIN flag.
     * 
     */
    @Import(name="fin")
    private @Nullable Output<Boolean> fin;

    /**
     * @return Match TCP FIN flag.
     * 
     */
    public Optional<Output<Boolean>> fin() {
        return Optional.ofNullable(this.fin);
    }

    /**
     * Match non-initial fragment.
     * 
     */
    @Import(name="fragment")
    private @Nullable Output<Boolean> fragment;

    /**
     * @return Match non-initial fragment.
     * 
     */
    public Optional<Output<Boolean>> fragment() {
        return Optional.ofNullable(this.fragment);
    }

    /**
     * HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
     * `invalid`
     * 
     */
    @Import(name="httpOptionType")
    private @Nullable Output<String> httpOptionType;

    /**
     * @return HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
     * `invalid`
     * 
     */
    public Optional<Output<String>> httpOptionType() {
        return Optional.ofNullable(this.httpOptionType);
    }

    /**
     * ICMP code. - Range: `0`-`256` - Default value: `256`
     * 
     */
    @Import(name="icmpCode")
    private @Nullable Output<Integer> icmpCode;

    /**
     * @return ICMP code. - Range: `0`-`256` - Default value: `256`
     * 
     */
    public Optional<Output<Integer>> icmpCode() {
        return Optional.ofNullable(this.icmpCode);
    }

    /**
     * ICMP type. - Range: `0`-`256` - Default value: `256`
     * 
     */
    @Import(name="icmpType")
    private @Nullable Output<Integer> icmpType;

    /**
     * @return ICMP type. - Range: `0`-`256` - Default value: `256`
     * 
     */
    public Optional<Output<Integer>> icmpType() {
        return Optional.ofNullable(this.icmpType);
    }

    /**
     * Log matches against ACL entry. - Default value: `false`
     * 
     */
    @Import(name="logging")
    private @Nullable Output<Boolean> logging;

    /**
     * @return Log matches against ACL entry. - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> logging() {
        return Optional.ofNullable(this.logging);
    }

    /**
     * Access list name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Access list name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
     * 
     */
    @Import(name="packetLength1")
    private @Nullable Output<String> packetLength1;

    /**
     * @return First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
     * 
     */
    public Optional<Output<String>> packetLength1() {
        return Optional.ofNullable(this.packetLength1);
    }

    /**
     * Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
     * 
     */
    @Import(name="packetLength2")
    private @Nullable Output<String> packetLength2;

    /**
     * @return Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
     * 
     */
    public Optional<Output<String>> packetLength2() {
        return Optional.ofNullable(this.packetLength2);
    }

    /**
     * Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     * 
     */
    @Import(name="packetLengthOperator")
    private @Nullable Output<String> packetLengthOperator;

    /**
     * @return Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     * 
     */
    public Optional<Output<String>> packetLengthOperator() {
        return Optional.ofNullable(this.packetLengthOperator);
    }

    /**
     * Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
     * 
     */
    @Import(name="precedence")
    private @Nullable Output<String> precedence;

    /**
     * @return Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
     * 
     */
    public Optional<Output<String>> precedence() {
        return Optional.ofNullable(this.precedence);
    }

    /**
     * Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
     * `pim`, `pcp`, `udf`
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
     * `pim`, `pcp`, `udf`
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
     * `nos`, `pim`, `pcp`, `udf`
     * 
     */
    @Import(name="protocolMask")
    private @Nullable Output<String> protocolMask;

    /**
     * @return Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
     * `nos`, `pim`, `pcp`, `udf`
     * 
     */
    public Optional<Output<String>> protocolMask() {
        return Optional.ofNullable(this.protocolMask);
    }

    /**
     * Match TCP PSH flag.
     * 
     */
    @Import(name="psh")
    private @Nullable Output<Boolean> psh;

    /**
     * @return Match TCP PSH flag.
     * 
     */
    public Optional<Output<Boolean>> psh() {
        return Optional.ofNullable(this.psh);
    }

    /**
     * Redirect action.
     * 
     */
    @Import(name="redirect")
    private @Nullable Output<String> redirect;

    /**
     * @return Redirect action.
     * 
     */
    public Optional<Output<String>> redirect() {
        return Optional.ofNullable(this.redirect);
    }

    /**
     * ACL comment.
     * 
     */
    @Import(name="remark")
    private @Nullable Output<String> remark;

    /**
     * @return ACL comment.
     * 
     */
    public Optional<Output<String>> remark() {
        return Optional.ofNullable(this.remark);
    }

    /**
     * Match TCP REV flag.
     * 
     */
    @Import(name="rev")
    private @Nullable Output<Boolean> rev;

    /**
     * @return Match TCP REV flag.
     * 
     */
    public Optional<Output<Boolean>> rev() {
        return Optional.ofNullable(this.rev);
    }

    /**
     * Match TCP RST flag.
     * 
     */
    @Import(name="rst")
    private @Nullable Output<Boolean> rst;

    /**
     * @return Match TCP RST flag.
     * 
     */
    public Optional<Output<Boolean>> rst() {
        return Optional.ofNullable(this.rst);
    }

    /**
     * Sequence number.
     * 
     */
    @Import(name="sequenceNumber")
    private @Nullable Output<Integer> sequenceNumber;

    /**
     * @return Sequence number.
     * 
     */
    public Optional<Output<Integer>> sequenceNumber() {
        return Optional.ofNullable(this.sequenceNumber);
    }

    /**
     * Source address group.
     * 
     */
    @Import(name="sourceAddressGroup")
    private @Nullable Output<String> sourceAddressGroup;

    /**
     * @return Source address group.
     * 
     */
    public Optional<Output<String>> sourceAddressGroup() {
        return Optional.ofNullable(this.sourceAddressGroup);
    }

    /**
     * First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     * 
     */
    @Import(name="sourcePort1")
    private @Nullable Output<String> sourcePort1;

    /**
     * @return First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     * 
     */
    public Optional<Output<String>> sourcePort1() {
        return Optional.ofNullable(this.sourcePort1);
    }

    /**
     * Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     * 
     */
    @Import(name="sourcePort2")
    private @Nullable Output<String> sourcePort2;

    /**
     * @return Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     * 
     */
    public Optional<Output<String>> sourcePort2() {
        return Optional.ofNullable(this.sourcePort2);
    }

    /**
     * Source port group.
     * 
     */
    @Import(name="sourcePortGroup")
    private @Nullable Output<String> sourcePortGroup;

    /**
     * @return Source port group.
     * 
     */
    public Optional<Output<String>> sourcePortGroup() {
        return Optional.ofNullable(this.sourcePortGroup);
    }

    /**
     * Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     * 
     */
    @Import(name="sourcePortMask")
    private @Nullable Output<String> sourcePortMask;

    /**
     * @return Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
     * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
     * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
     * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
     * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
     * 
     */
    public Optional<Output<String>> sourcePortMask() {
        return Optional.ofNullable(this.sourcePortMask);
    }

    /**
     * Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     * 
     */
    @Import(name="sourcePortOperator")
    private @Nullable Output<String> sourcePortOperator;

    /**
     * @return Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
     * 
     */
    public Optional<Output<String>> sourcePortOperator() {
        return Optional.ofNullable(this.sourcePortOperator);
    }

    /**
     * Source prefix.
     * 
     */
    @Import(name="sourcePrefix")
    private @Nullable Output<String> sourcePrefix;

    /**
     * @return Source prefix.
     * 
     */
    public Optional<Output<String>> sourcePrefix() {
        return Optional.ofNullable(this.sourcePrefix);
    }

    /**
     * Source prefix length.
     * 
     */
    @Import(name="sourcePrefixLength")
    private @Nullable Output<String> sourcePrefixLength;

    /**
     * @return Source prefix length.
     * 
     */
    public Optional<Output<String>> sourcePrefixLength() {
        return Optional.ofNullable(this.sourcePrefixLength);
    }

    /**
     * Source prefix mask.
     * 
     */
    @Import(name="sourcePrefixMask")
    private @Nullable Output<String> sourcePrefixMask;

    /**
     * @return Source prefix mask.
     * 
     */
    public Optional<Output<String>> sourcePrefixMask() {
        return Optional.ofNullable(this.sourcePrefixMask);
    }

    /**
     * Match TCP SYN flag.
     * 
     */
    @Import(name="syn")
    private @Nullable Output<Boolean> syn;

    /**
     * @return Match TCP SYN flag.
     * 
     */
    public Optional<Output<Boolean>> syn() {
        return Optional.ofNullable(this.syn);
    }

    /**
     * Time range name.
     * 
     */
    @Import(name="timeRange")
    private @Nullable Output<String> timeRange;

    /**
     * @return Time range name.
     * 
     */
    public Optional<Output<String>> timeRange() {
        return Optional.ofNullable(this.timeRange);
    }

    /**
     * TTL. - Range: `0`-`255` - Default value: `0`
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return TTL. - Range: `0`-`255` - Default value: `0`
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * Match TCP URG flag.
     * 
     */
    @Import(name="urg")
    private @Nullable Output<Boolean> urg;

    /**
     * @return Match TCP URG flag.
     * 
     */
    public Optional<Output<Boolean>> urg() {
        return Optional.ofNullable(this.urg);
    }

    /**
     * VLAN ID. - Range: `0`-`4095` - Default value: `4095`
     * 
     */
    @Import(name="vlan")
    private @Nullable Output<Integer> vlan;

    /**
     * @return VLAN ID. - Range: `0`-`4095` - Default value: `4095`
     * 
     */
    public Optional<Output<Integer>> vlan() {
        return Optional.ofNullable(this.vlan);
    }

    /**
     * NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
     * 
     */
    @Import(name="vni")
    private @Nullable Output<String> vni;

    /**
     * @return NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
     * 
     */
    public Optional<Output<String>> vni() {
        return Optional.ofNullable(this.vni);
    }

    private Ipv4AccessListEntryState() {}

    private Ipv4AccessListEntryState(Ipv4AccessListEntryState $) {
        this.ack = $.ack;
        this.action = $.action;
        this.destinationAddressGroup = $.destinationAddressGroup;
        this.destinationPort1 = $.destinationPort1;
        this.destinationPort2 = $.destinationPort2;
        this.destinationPortGroup = $.destinationPortGroup;
        this.destinationPortMask = $.destinationPortMask;
        this.destinationPortOperator = $.destinationPortOperator;
        this.destinationPrefix = $.destinationPrefix;
        this.destinationPrefixLength = $.destinationPrefixLength;
        this.destinationPrefixMask = $.destinationPrefixMask;
        this.device = $.device;
        this.dscp = $.dscp;
        this.est = $.est;
        this.fin = $.fin;
        this.fragment = $.fragment;
        this.httpOptionType = $.httpOptionType;
        this.icmpCode = $.icmpCode;
        this.icmpType = $.icmpType;
        this.logging = $.logging;
        this.name = $.name;
        this.packetLength1 = $.packetLength1;
        this.packetLength2 = $.packetLength2;
        this.packetLengthOperator = $.packetLengthOperator;
        this.precedence = $.precedence;
        this.protocol = $.protocol;
        this.protocolMask = $.protocolMask;
        this.psh = $.psh;
        this.redirect = $.redirect;
        this.remark = $.remark;
        this.rev = $.rev;
        this.rst = $.rst;
        this.sequenceNumber = $.sequenceNumber;
        this.sourceAddressGroup = $.sourceAddressGroup;
        this.sourcePort1 = $.sourcePort1;
        this.sourcePort2 = $.sourcePort2;
        this.sourcePortGroup = $.sourcePortGroup;
        this.sourcePortMask = $.sourcePortMask;
        this.sourcePortOperator = $.sourcePortOperator;
        this.sourcePrefix = $.sourcePrefix;
        this.sourcePrefixLength = $.sourcePrefixLength;
        this.sourcePrefixMask = $.sourcePrefixMask;
        this.syn = $.syn;
        this.timeRange = $.timeRange;
        this.ttl = $.ttl;
        this.urg = $.urg;
        this.vlan = $.vlan;
        this.vni = $.vni;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Ipv4AccessListEntryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Ipv4AccessListEntryState $;

        public Builder() {
            $ = new Ipv4AccessListEntryState();
        }

        public Builder(Ipv4AccessListEntryState defaults) {
            $ = new Ipv4AccessListEntryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param ack Match TCP ACK flag.
         * 
         * @return builder
         * 
         */
        public Builder ack(@Nullable Output<Boolean> ack) {
            $.ack = ack;
            return this;
        }

        /**
         * @param ack Match TCP ACK flag.
         * 
         * @return builder
         * 
         */
        public Builder ack(Boolean ack) {
            return ack(Output.of(ack));
        }

        /**
         * @param action Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action. - Choices: `invalid`, `permit`, `deny` - Default value: `invalid`
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param destinationAddressGroup Destination address group.
         * 
         * @return builder
         * 
         */
        public Builder destinationAddressGroup(@Nullable Output<String> destinationAddressGroup) {
            $.destinationAddressGroup = destinationAddressGroup;
            return this;
        }

        /**
         * @param destinationAddressGroup Destination address group.
         * 
         * @return builder
         * 
         */
        public Builder destinationAddressGroup(String destinationAddressGroup) {
            return destinationAddressGroup(Output.of(destinationAddressGroup));
        }

        /**
         * @param destinationPort1 First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
         * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
         * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
         * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
         * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
         * 
         * @return builder
         * 
         */
        public Builder destinationPort1(@Nullable Output<String> destinationPort1) {
            $.destinationPort1 = destinationPort1;
            return this;
        }

        /**
         * @param destinationPort1 First destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
         * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
         * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
         * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
         * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
         * 
         * @return builder
         * 
         */
        public Builder destinationPort1(String destinationPort1) {
            return destinationPort1(Output.of(destinationPort1));
        }

        /**
         * @param destinationPort2 Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
         * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
         * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
         * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
         * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
         * 
         * @return builder
         * 
         */
        public Builder destinationPort2(@Nullable Output<String> destinationPort2) {
            $.destinationPort2 = destinationPort2;
            return this;
        }

        /**
         * @param destinationPort2 Second destination port number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
         * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
         * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
         * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
         * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
         * 
         * @return builder
         * 
         */
        public Builder destinationPort2(String destinationPort2) {
            return destinationPort2(Output.of(destinationPort2));
        }

        /**
         * @param destinationPortGroup Destination port group.
         * 
         * @return builder
         * 
         */
        public Builder destinationPortGroup(@Nullable Output<String> destinationPortGroup) {
            $.destinationPortGroup = destinationPortGroup;
            return this;
        }

        /**
         * @param destinationPortGroup Destination port group.
         * 
         * @return builder
         * 
         */
        public Builder destinationPortGroup(String destinationPortGroup) {
            return destinationPortGroup(Output.of(destinationPortGroup));
        }

        /**
         * @param destinationPortMask Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
         * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
         * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
         * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
         * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
         * 
         * @return builder
         * 
         */
        public Builder destinationPortMask(@Nullable Output<String> destinationPortMask) {
            $.destinationPortMask = destinationPortMask;
            return this;
        }

        /**
         * @param destinationPortMask Destination port mask number or name. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
         * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
         * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
         * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
         * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
         * 
         * @return builder
         * 
         */
        public Builder destinationPortMask(String destinationPortMask) {
            return destinationPortMask(Output.of(destinationPortMask));
        }

        /**
         * @param destinationPortOperator Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder destinationPortOperator(@Nullable Output<String> destinationPortOperator) {
            $.destinationPortOperator = destinationPortOperator;
            return this;
        }

        /**
         * @param destinationPortOperator Destination port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder destinationPortOperator(String destinationPortOperator) {
            return destinationPortOperator(Output.of(destinationPortOperator));
        }

        /**
         * @param destinationPrefix Destination prefix.
         * 
         * @return builder
         * 
         */
        public Builder destinationPrefix(@Nullable Output<String> destinationPrefix) {
            $.destinationPrefix = destinationPrefix;
            return this;
        }

        /**
         * @param destinationPrefix Destination prefix.
         * 
         * @return builder
         * 
         */
        public Builder destinationPrefix(String destinationPrefix) {
            return destinationPrefix(Output.of(destinationPrefix));
        }

        /**
         * @param destinationPrefixLength Destination prefix length.
         * 
         * @return builder
         * 
         */
        public Builder destinationPrefixLength(@Nullable Output<String> destinationPrefixLength) {
            $.destinationPrefixLength = destinationPrefixLength;
            return this;
        }

        /**
         * @param destinationPrefixLength Destination prefix length.
         * 
         * @return builder
         * 
         */
        public Builder destinationPrefixLength(String destinationPrefixLength) {
            return destinationPrefixLength(Output.of(destinationPrefixLength));
        }

        /**
         * @param destinationPrefixMask Destination prefix mask.
         * 
         * @return builder
         * 
         */
        public Builder destinationPrefixMask(@Nullable Output<String> destinationPrefixMask) {
            $.destinationPrefixMask = destinationPrefixMask;
            return this;
        }

        /**
         * @param destinationPrefixMask Destination prefix mask.
         * 
         * @return builder
         * 
         */
        public Builder destinationPrefixMask(String destinationPrefixMask) {
            return destinationPrefixMask(Output.of(destinationPrefixMask));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param dscp Match DSCP. - Range: `0`-`63`
         * 
         * @return builder
         * 
         */
        public Builder dscp(@Nullable Output<Integer> dscp) {
            $.dscp = dscp;
            return this;
        }

        /**
         * @param dscp Match DSCP. - Range: `0`-`63`
         * 
         * @return builder
         * 
         */
        public Builder dscp(Integer dscp) {
            return dscp(Output.of(dscp));
        }

        /**
         * @param est Match TCP EST flag.
         * 
         * @return builder
         * 
         */
        public Builder est(@Nullable Output<Boolean> est) {
            $.est = est;
            return this;
        }

        /**
         * @param est Match TCP EST flag.
         * 
         * @return builder
         * 
         */
        public Builder est(Boolean est) {
            return est(Output.of(est));
        }

        /**
         * @param fin Match TCP FIN flag.
         * 
         * @return builder
         * 
         */
        public Builder fin(@Nullable Output<Boolean> fin) {
            $.fin = fin;
            return this;
        }

        /**
         * @param fin Match TCP FIN flag.
         * 
         * @return builder
         * 
         */
        public Builder fin(Boolean fin) {
            return fin(Output.of(fin));
        }

        /**
         * @param fragment Match non-initial fragment.
         * 
         * @return builder
         * 
         */
        public Builder fragment(@Nullable Output<Boolean> fragment) {
            $.fragment = fragment;
            return this;
        }

        /**
         * @param fragment Match non-initial fragment.
         * 
         * @return builder
         * 
         */
        public Builder fragment(Boolean fragment) {
            return fragment(Output.of(fragment));
        }

        /**
         * @param httpOptionType HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
         * `invalid`
         * 
         * @return builder
         * 
         */
        public Builder httpOptionType(@Nullable Output<String> httpOptionType) {
            $.httpOptionType = httpOptionType;
            return this;
        }

        /**
         * @param httpOptionType HTTP option method. - Choices: `invalid`, `get`, `put`, `head`, `post`, `delete`, `trace`, `connect` - Default value:
         * `invalid`
         * 
         * @return builder
         * 
         */
        public Builder httpOptionType(String httpOptionType) {
            return httpOptionType(Output.of(httpOptionType));
        }

        /**
         * @param icmpCode ICMP code. - Range: `0`-`256` - Default value: `256`
         * 
         * @return builder
         * 
         */
        public Builder icmpCode(@Nullable Output<Integer> icmpCode) {
            $.icmpCode = icmpCode;
            return this;
        }

        /**
         * @param icmpCode ICMP code. - Range: `0`-`256` - Default value: `256`
         * 
         * @return builder
         * 
         */
        public Builder icmpCode(Integer icmpCode) {
            return icmpCode(Output.of(icmpCode));
        }

        /**
         * @param icmpType ICMP type. - Range: `0`-`256` - Default value: `256`
         * 
         * @return builder
         * 
         */
        public Builder icmpType(@Nullable Output<Integer> icmpType) {
            $.icmpType = icmpType;
            return this;
        }

        /**
         * @param icmpType ICMP type. - Range: `0`-`256` - Default value: `256`
         * 
         * @return builder
         * 
         */
        public Builder icmpType(Integer icmpType) {
            return icmpType(Output.of(icmpType));
        }

        /**
         * @param logging Log matches against ACL entry. - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder logging(@Nullable Output<Boolean> logging) {
            $.logging = logging;
            return this;
        }

        /**
         * @param logging Log matches against ACL entry. - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder logging(Boolean logging) {
            return logging(Output.of(logging));
        }

        /**
         * @param name Access list name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Access list name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param packetLength1 First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
         * 
         * @return builder
         * 
         */
        public Builder packetLength1(@Nullable Output<String> packetLength1) {
            $.packetLength1 = packetLength1;
            return this;
        }

        /**
         * @param packetLength1 First packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
         * 
         * @return builder
         * 
         */
        public Builder packetLength1(String packetLength1) {
            return packetLength1(Output.of(packetLength1));
        }

        /**
         * @param packetLength2 Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
         * 
         * @return builder
         * 
         */
        public Builder packetLength2(@Nullable Output<String> packetLength2) {
            $.packetLength2 = packetLength2;
            return this;
        }

        /**
         * @param packetLength2 Second packet length. Either `invalid` or a number between 19 and 9210. - Default value: `invalid`
         * 
         * @return builder
         * 
         */
        public Builder packetLength2(String packetLength2) {
            return packetLength2(Output.of(packetLength2));
        }

        /**
         * @param packetLengthOperator Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder packetLengthOperator(@Nullable Output<String> packetLengthOperator) {
            $.packetLengthOperator = packetLengthOperator;
            return this;
        }

        /**
         * @param packetLengthOperator Packet length operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder packetLengthOperator(String packetLengthOperator) {
            return packetLengthOperator(Output.of(packetLengthOperator));
        }

        /**
         * @param precedence Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
         * 
         * @return builder
         * 
         */
        public Builder precedence(@Nullable Output<String> precedence) {
            $.precedence = precedence;
            return this;
        }

        /**
         * @param precedence Precedence. Either `unspecified` or a number between 0 and 7. - Default value: `unspecified`
         * 
         * @return builder
         * 
         */
        public Builder precedence(String precedence) {
            return precedence(Output.of(precedence));
        }

        /**
         * @param protocol Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
         * `pim`, `pcp`, `udf`
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`, `nos`,
         * `pim`, `pcp`, `udf`
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param protocolMask Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
         * `nos`, `pim`, `pcp`, `udf`
         * 
         * @return builder
         * 
         */
        public Builder protocolMask(@Nullable Output<String> protocolMask) {
            $.protocolMask = protocolMask;
            return this;
        }

        /**
         * @param protocolMask Protocol mask name or number. - Choices: `ip`, `icmp`, `igmp`, `tcp`, `udp`, `gre`, `esp`, `ahp`, `eigrp`, `ospf`,
         * `nos`, `pim`, `pcp`, `udf`
         * 
         * @return builder
         * 
         */
        public Builder protocolMask(String protocolMask) {
            return protocolMask(Output.of(protocolMask));
        }

        /**
         * @param psh Match TCP PSH flag.
         * 
         * @return builder
         * 
         */
        public Builder psh(@Nullable Output<Boolean> psh) {
            $.psh = psh;
            return this;
        }

        /**
         * @param psh Match TCP PSH flag.
         * 
         * @return builder
         * 
         */
        public Builder psh(Boolean psh) {
            return psh(Output.of(psh));
        }

        /**
         * @param redirect Redirect action.
         * 
         * @return builder
         * 
         */
        public Builder redirect(@Nullable Output<String> redirect) {
            $.redirect = redirect;
            return this;
        }

        /**
         * @param redirect Redirect action.
         * 
         * @return builder
         * 
         */
        public Builder redirect(String redirect) {
            return redirect(Output.of(redirect));
        }

        /**
         * @param remark ACL comment.
         * 
         * @return builder
         * 
         */
        public Builder remark(@Nullable Output<String> remark) {
            $.remark = remark;
            return this;
        }

        /**
         * @param remark ACL comment.
         * 
         * @return builder
         * 
         */
        public Builder remark(String remark) {
            return remark(Output.of(remark));
        }

        /**
         * @param rev Match TCP REV flag.
         * 
         * @return builder
         * 
         */
        public Builder rev(@Nullable Output<Boolean> rev) {
            $.rev = rev;
            return this;
        }

        /**
         * @param rev Match TCP REV flag.
         * 
         * @return builder
         * 
         */
        public Builder rev(Boolean rev) {
            return rev(Output.of(rev));
        }

        /**
         * @param rst Match TCP RST flag.
         * 
         * @return builder
         * 
         */
        public Builder rst(@Nullable Output<Boolean> rst) {
            $.rst = rst;
            return this;
        }

        /**
         * @param rst Match TCP RST flag.
         * 
         * @return builder
         * 
         */
        public Builder rst(Boolean rst) {
            return rst(Output.of(rst));
        }

        /**
         * @param sequenceNumber Sequence number.
         * 
         * @return builder
         * 
         */
        public Builder sequenceNumber(@Nullable Output<Integer> sequenceNumber) {
            $.sequenceNumber = sequenceNumber;
            return this;
        }

        /**
         * @param sequenceNumber Sequence number.
         * 
         * @return builder
         * 
         */
        public Builder sequenceNumber(Integer sequenceNumber) {
            return sequenceNumber(Output.of(sequenceNumber));
        }

        /**
         * @param sourceAddressGroup Source address group.
         * 
         * @return builder
         * 
         */
        public Builder sourceAddressGroup(@Nullable Output<String> sourceAddressGroup) {
            $.sourceAddressGroup = sourceAddressGroup;
            return this;
        }

        /**
         * @param sourceAddressGroup Source address group.
         * 
         * @return builder
         * 
         */
        public Builder sourceAddressGroup(String sourceAddressGroup) {
            return sourceAddressGroup(Output.of(sourceAddressGroup));
        }

        /**
         * @param sourcePort1 First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
         * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
         * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
         * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
         * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
         * 
         * @return builder
         * 
         */
        public Builder sourcePort1(@Nullable Output<String> sourcePort1) {
            $.sourcePort1 = sourcePort1;
            return this;
        }

        /**
         * @param sourcePort1 First source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
         * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
         * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
         * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
         * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
         * 
         * @return builder
         * 
         */
        public Builder sourcePort1(String sourcePort1) {
            return sourcePort1(Output.of(sourcePort1));
        }

        /**
         * @param sourcePort2 Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
         * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
         * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
         * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
         * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
         * 
         * @return builder
         * 
         */
        public Builder sourcePort2(@Nullable Output<String> sourcePort2) {
            $.sourcePort2 = sourcePort2;
            return this;
        }

        /**
         * @param sourcePort2 Second source port name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
         * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
         * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
         * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
         * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
         * 
         * @return builder
         * 
         */
        public Builder sourcePort2(String sourcePort2) {
            return sourcePort2(Output.of(sourcePort2));
        }

        /**
         * @param sourcePortGroup Source port group.
         * 
         * @return builder
         * 
         */
        public Builder sourcePortGroup(@Nullable Output<String> sourcePortGroup) {
            $.sourcePortGroup = sourcePortGroup;
            return this;
        }

        /**
         * @param sourcePortGroup Source port group.
         * 
         * @return builder
         * 
         */
        public Builder sourcePortGroup(String sourcePortGroup) {
            return sourcePortGroup(Output.of(sourcePortGroup));
        }

        /**
         * @param sourcePortMask Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
         * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
         * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
         * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
         * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
         * 
         * @return builder
         * 
         */
        public Builder sourcePortMask(@Nullable Output<String> sourcePortMask) {
            $.sourcePortMask = sourcePortMask;
            return this;
        }

        /**
         * @param sourcePortMask Source port mask name or number. - Choices: `echo`, `discard`, `daytime`, `chargen`, `ftp-data`, `ftp`, `telnet`,
         * `smtp`, `time`, `nameserver`, `whois`, `tacacs`, `domain`, `bootps`, `bootpc`, `tftp`, `gopher`, `finger`, `www`,
         * `hostname`, `pop2`, `pop3`, `sunrpc`, `ident`, `nntp`, `ntp`, `netbios-ns`, `netbios-dgm`, `netbios-ss`, `snmp`,
         * `snmptrap`, `xdmcp`, `bgp`, `irc`, `dnsix`, `mobile-ip`, `pim-auto-rp`, `isakmp`, `biff`, `exec`, `who`, `login`,
         * `syslog`, `cmd`, `lpd`, `talk`, `rip`, `uucp`, `klogin`, `kshell`, `drip`, `non500-isakmp`
         * 
         * @return builder
         * 
         */
        public Builder sourcePortMask(String sourcePortMask) {
            return sourcePortMask(Output.of(sourcePortMask));
        }

        /**
         * @param sourcePortOperator Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder sourcePortOperator(@Nullable Output<String> sourcePortOperator) {
            $.sourcePortOperator = sourcePortOperator;
            return this;
        }

        /**
         * @param sourcePortOperator Source port operator. - Choices: `none`, `lt`, `gt`, `eq`, `neq`, `range` - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder sourcePortOperator(String sourcePortOperator) {
            return sourcePortOperator(Output.of(sourcePortOperator));
        }

        /**
         * @param sourcePrefix Source prefix.
         * 
         * @return builder
         * 
         */
        public Builder sourcePrefix(@Nullable Output<String> sourcePrefix) {
            $.sourcePrefix = sourcePrefix;
            return this;
        }

        /**
         * @param sourcePrefix Source prefix.
         * 
         * @return builder
         * 
         */
        public Builder sourcePrefix(String sourcePrefix) {
            return sourcePrefix(Output.of(sourcePrefix));
        }

        /**
         * @param sourcePrefixLength Source prefix length.
         * 
         * @return builder
         * 
         */
        public Builder sourcePrefixLength(@Nullable Output<String> sourcePrefixLength) {
            $.sourcePrefixLength = sourcePrefixLength;
            return this;
        }

        /**
         * @param sourcePrefixLength Source prefix length.
         * 
         * @return builder
         * 
         */
        public Builder sourcePrefixLength(String sourcePrefixLength) {
            return sourcePrefixLength(Output.of(sourcePrefixLength));
        }

        /**
         * @param sourcePrefixMask Source prefix mask.
         * 
         * @return builder
         * 
         */
        public Builder sourcePrefixMask(@Nullable Output<String> sourcePrefixMask) {
            $.sourcePrefixMask = sourcePrefixMask;
            return this;
        }

        /**
         * @param sourcePrefixMask Source prefix mask.
         * 
         * @return builder
         * 
         */
        public Builder sourcePrefixMask(String sourcePrefixMask) {
            return sourcePrefixMask(Output.of(sourcePrefixMask));
        }

        /**
         * @param syn Match TCP SYN flag.
         * 
         * @return builder
         * 
         */
        public Builder syn(@Nullable Output<Boolean> syn) {
            $.syn = syn;
            return this;
        }

        /**
         * @param syn Match TCP SYN flag.
         * 
         * @return builder
         * 
         */
        public Builder syn(Boolean syn) {
            return syn(Output.of(syn));
        }

        /**
         * @param timeRange Time range name.
         * 
         * @return builder
         * 
         */
        public Builder timeRange(@Nullable Output<String> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        /**
         * @param timeRange Time range name.
         * 
         * @return builder
         * 
         */
        public Builder timeRange(String timeRange) {
            return timeRange(Output.of(timeRange));
        }

        /**
         * @param ttl TTL. - Range: `0`-`255` - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl TTL. - Range: `0`-`255` - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param urg Match TCP URG flag.
         * 
         * @return builder
         * 
         */
        public Builder urg(@Nullable Output<Boolean> urg) {
            $.urg = urg;
            return this;
        }

        /**
         * @param urg Match TCP URG flag.
         * 
         * @return builder
         * 
         */
        public Builder urg(Boolean urg) {
            return urg(Output.of(urg));
        }

        /**
         * @param vlan VLAN ID. - Range: `0`-`4095` - Default value: `4095`
         * 
         * @return builder
         * 
         */
        public Builder vlan(@Nullable Output<Integer> vlan) {
            $.vlan = vlan;
            return this;
        }

        /**
         * @param vlan VLAN ID. - Range: `0`-`4095` - Default value: `4095`
         * 
         * @return builder
         * 
         */
        public Builder vlan(Integer vlan) {
            return vlan(Output.of(vlan));
        }

        /**
         * @param vni NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
         * 
         * @return builder
         * 
         */
        public Builder vni(@Nullable Output<String> vni) {
            $.vni = vni;
            return this;
        }

        /**
         * @param vni NVE VNI ID. Either `invalid` or a number between 0 and 16777216. - Default value: `invalid`
         * 
         * @return builder
         * 
         */
        public Builder vni(String vni) {
            return vni(Output.of(vni));
        }

        public Ipv4AccessListEntryState build() {
            return $;
        }
    }

}
