// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nxos.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPortChannelInterfaceResult {
    /**
     * @return Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
     * 
     */
    private String accessVlan;
    /**
     * @return Administrative port state.
     * 
     */
    private String adminState;
    /**
     * @return Administrative port auto-negotiation.
     * 
     */
    private String autoNegotiation;
    /**
     * @return The bandwidth parameter for a routed interface, port channel, or subinterface.
     * 
     */
    private Integer bandwidth;
    /**
     * @return The administrative port delay time.
     * 
     */
    private Integer delay;
    /**
     * @return Interface description.
     * 
     */
    private String description;
    /**
     * @return A device name from the provider configuration.
     * 
     */
    private @Nullable String device;
    /**
     * @return Duplex.
     * 
     */
    private String duplex;
    /**
     * @return The distinguished name of the object.
     * 
     */
    private String id;
    /**
     * @return Must match first field in the output of `show intf brief`. Example: `po1`.
     * 
     */
    private String interfaceId;
    /**
     * @return Administrative port layer.
     * 
     */
    private String layer;
    /**
     * @return Administrative link logging.
     * 
     */
    private String linkLogging;
    /**
     * @return Maximum links.
     * 
     */
    private Integer maximumLinks;
    /**
     * @return The administrative port medium type.
     * 
     */
    private String medium;
    /**
     * @return Minimum links.
     * 
     */
    private Integer minimumLinks;
    /**
     * @return Administrative port mode.
     * 
     */
    private String mode;
    /**
     * @return Administrative port MTU.
     * 
     */
    private Integer mtu;
    /**
     * @return Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
     * 
     */
    private String nativeVlan;
    /**
     * @return The aggregated interface protocol channel mode.
     * 
     */
    private String portChannelMode;
    /**
     * @return Administrative port speed.
     * 
     */
    private String speed;
    /**
     * @return Suspend Individual Port.
     * 
     */
    private String suspendIndividual;
    /**
     * @return List of trunk VLANs.
     * 
     */
    private String trunkVlans;
    /**
     * @return Port User Config Flags.
     * 
     */
    private String userConfiguredFlags;

    private GetPortChannelInterfaceResult() {}
    /**
     * @return Access VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
     * 
     */
    public String accessVlan() {
        return this.accessVlan;
    }
    /**
     * @return Administrative port state.
     * 
     */
    public String adminState() {
        return this.adminState;
    }
    /**
     * @return Administrative port auto-negotiation.
     * 
     */
    public String autoNegotiation() {
        return this.autoNegotiation;
    }
    /**
     * @return The bandwidth parameter for a routed interface, port channel, or subinterface.
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return The administrative port delay time.
     * 
     */
    public Integer delay() {
        return this.delay;
    }
    /**
     * @return Interface description.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    /**
     * @return Duplex.
     * 
     */
    public String duplex() {
        return this.duplex;
    }
    /**
     * @return The distinguished name of the object.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Must match first field in the output of `show intf brief`. Example: `po1`.
     * 
     */
    public String interfaceId() {
        return this.interfaceId;
    }
    /**
     * @return Administrative port layer.
     * 
     */
    public String layer() {
        return this.layer;
    }
    /**
     * @return Administrative link logging.
     * 
     */
    public String linkLogging() {
        return this.linkLogging;
    }
    /**
     * @return Maximum links.
     * 
     */
    public Integer maximumLinks() {
        return this.maximumLinks;
    }
    /**
     * @return The administrative port medium type.
     * 
     */
    public String medium() {
        return this.medium;
    }
    /**
     * @return Minimum links.
     * 
     */
    public Integer minimumLinks() {
        return this.minimumLinks;
    }
    /**
     * @return Administrative port mode.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return Administrative port MTU.
     * 
     */
    public Integer mtu() {
        return this.mtu;
    }
    /**
     * @return Native VLAN. Possible values are `unknown`, `vlan-XX` or `vxlan-XX`.
     * 
     */
    public String nativeVlan() {
        return this.nativeVlan;
    }
    /**
     * @return The aggregated interface protocol channel mode.
     * 
     */
    public String portChannelMode() {
        return this.portChannelMode;
    }
    /**
     * @return Administrative port speed.
     * 
     */
    public String speed() {
        return this.speed;
    }
    /**
     * @return Suspend Individual Port.
     * 
     */
    public String suspendIndividual() {
        return this.suspendIndividual;
    }
    /**
     * @return List of trunk VLANs.
     * 
     */
    public String trunkVlans() {
        return this.trunkVlans;
    }
    /**
     * @return Port User Config Flags.
     * 
     */
    public String userConfiguredFlags() {
        return this.userConfiguredFlags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPortChannelInterfaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessVlan;
        private String adminState;
        private String autoNegotiation;
        private Integer bandwidth;
        private Integer delay;
        private String description;
        private @Nullable String device;
        private String duplex;
        private String id;
        private String interfaceId;
        private String layer;
        private String linkLogging;
        private Integer maximumLinks;
        private String medium;
        private Integer minimumLinks;
        private String mode;
        private Integer mtu;
        private String nativeVlan;
        private String portChannelMode;
        private String speed;
        private String suspendIndividual;
        private String trunkVlans;
        private String userConfiguredFlags;
        public Builder() {}
        public Builder(GetPortChannelInterfaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessVlan = defaults.accessVlan;
    	      this.adminState = defaults.adminState;
    	      this.autoNegotiation = defaults.autoNegotiation;
    	      this.bandwidth = defaults.bandwidth;
    	      this.delay = defaults.delay;
    	      this.description = defaults.description;
    	      this.device = defaults.device;
    	      this.duplex = defaults.duplex;
    	      this.id = defaults.id;
    	      this.interfaceId = defaults.interfaceId;
    	      this.layer = defaults.layer;
    	      this.linkLogging = defaults.linkLogging;
    	      this.maximumLinks = defaults.maximumLinks;
    	      this.medium = defaults.medium;
    	      this.minimumLinks = defaults.minimumLinks;
    	      this.mode = defaults.mode;
    	      this.mtu = defaults.mtu;
    	      this.nativeVlan = defaults.nativeVlan;
    	      this.portChannelMode = defaults.portChannelMode;
    	      this.speed = defaults.speed;
    	      this.suspendIndividual = defaults.suspendIndividual;
    	      this.trunkVlans = defaults.trunkVlans;
    	      this.userConfiguredFlags = defaults.userConfiguredFlags;
        }

        @CustomType.Setter
        public Builder accessVlan(String accessVlan) {
            this.accessVlan = Objects.requireNonNull(accessVlan);
            return this;
        }
        @CustomType.Setter
        public Builder adminState(String adminState) {
            this.adminState = Objects.requireNonNull(adminState);
            return this;
        }
        @CustomType.Setter
        public Builder autoNegotiation(String autoNegotiation) {
            this.autoNegotiation = Objects.requireNonNull(autoNegotiation);
            return this;
        }
        @CustomType.Setter
        public Builder bandwidth(Integer bandwidth) {
            this.bandwidth = Objects.requireNonNull(bandwidth);
            return this;
        }
        @CustomType.Setter
        public Builder delay(Integer delay) {
            this.delay = Objects.requireNonNull(delay);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder device(@Nullable String device) {
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder duplex(String duplex) {
            this.duplex = Objects.requireNonNull(duplex);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder interfaceId(String interfaceId) {
            this.interfaceId = Objects.requireNonNull(interfaceId);
            return this;
        }
        @CustomType.Setter
        public Builder layer(String layer) {
            this.layer = Objects.requireNonNull(layer);
            return this;
        }
        @CustomType.Setter
        public Builder linkLogging(String linkLogging) {
            this.linkLogging = Objects.requireNonNull(linkLogging);
            return this;
        }
        @CustomType.Setter
        public Builder maximumLinks(Integer maximumLinks) {
            this.maximumLinks = Objects.requireNonNull(maximumLinks);
            return this;
        }
        @CustomType.Setter
        public Builder medium(String medium) {
            this.medium = Objects.requireNonNull(medium);
            return this;
        }
        @CustomType.Setter
        public Builder minimumLinks(Integer minimumLinks) {
            this.minimumLinks = Objects.requireNonNull(minimumLinks);
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            this.mode = Objects.requireNonNull(mode);
            return this;
        }
        @CustomType.Setter
        public Builder mtu(Integer mtu) {
            this.mtu = Objects.requireNonNull(mtu);
            return this;
        }
        @CustomType.Setter
        public Builder nativeVlan(String nativeVlan) {
            this.nativeVlan = Objects.requireNonNull(nativeVlan);
            return this;
        }
        @CustomType.Setter
        public Builder portChannelMode(String portChannelMode) {
            this.portChannelMode = Objects.requireNonNull(portChannelMode);
            return this;
        }
        @CustomType.Setter
        public Builder speed(String speed) {
            this.speed = Objects.requireNonNull(speed);
            return this;
        }
        @CustomType.Setter
        public Builder suspendIndividual(String suspendIndividual) {
            this.suspendIndividual = Objects.requireNonNull(suspendIndividual);
            return this;
        }
        @CustomType.Setter
        public Builder trunkVlans(String trunkVlans) {
            this.trunkVlans = Objects.requireNonNull(trunkVlans);
            return this;
        }
        @CustomType.Setter
        public Builder userConfiguredFlags(String userConfiguredFlags) {
            this.userConfiguredFlags = Objects.requireNonNull(userConfiguredFlags);
            return this;
        }
        public GetPortChannelInterfaceResult build() {
            final var o = new GetPortChannelInterfaceResult();
            o.accessVlan = accessVlan;
            o.adminState = adminState;
            o.autoNegotiation = autoNegotiation;
            o.bandwidth = bandwidth;
            o.delay = delay;
            o.description = description;
            o.device = device;
            o.duplex = duplex;
            o.id = id;
            o.interfaceId = interfaceId;
            o.layer = layer;
            o.linkLogging = linkLogging;
            o.maximumLinks = maximumLinks;
            o.medium = medium;
            o.minimumLinks = minimumLinks;
            o.mode = mode;
            o.mtu = mtu;
            o.nativeVlan = nativeVlan;
            o.portChannelMode = portChannelMode;
            o.speed = speed;
            o.suspendIndividual = suspendIndividual;
            o.trunkVlans = trunkVlans;
            o.userConfiguredFlags = userConfiguredFlags;
            return o;
        }
    }
}
