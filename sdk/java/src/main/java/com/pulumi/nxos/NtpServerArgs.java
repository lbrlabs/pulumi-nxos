// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nxos;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NtpServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final NtpServerArgs Empty = new NtpServerArgs();

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
     * 
     */
    @Import(name="keyId")
    private @Nullable Output<Integer> keyId;

    /**
     * @return NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
     * 
     */
    public Optional<Output<Integer>> keyId() {
        return Optional.ofNullable(this.keyId);
    }

    /**
     * NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
     * 
     */
    @Import(name="maxPoll")
    private @Nullable Output<Integer> maxPoll;

    /**
     * @return NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
     * 
     */
    public Optional<Output<Integer>> maxPoll() {
        return Optional.ofNullable(this.maxPoll);
    }

    /**
     * NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
     * 
     */
    @Import(name="minPoll")
    private @Nullable Output<Integer> minPoll;

    /**
     * @return NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
     * 
     */
    public Optional<Output<Integer>> minPoll() {
        return Optional.ofNullable(this.minPoll);
    }

    /**
     * NTP server.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return NTP server.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Identifies the VRF for the NTP providers. - Default value: `default`
     * 
     */
    @Import(name="vrf")
    private @Nullable Output<String> vrf;

    /**
     * @return Identifies the VRF for the NTP providers. - Default value: `default`
     * 
     */
    public Optional<Output<String>> vrf() {
        return Optional.ofNullable(this.vrf);
    }

    private NtpServerArgs() {}

    private NtpServerArgs(NtpServerArgs $) {
        this.device = $.device;
        this.keyId = $.keyId;
        this.maxPoll = $.maxPoll;
        this.minPoll = $.minPoll;
        this.name = $.name;
        this.type = $.type;
        this.vrf = $.vrf;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NtpServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NtpServerArgs $;

        public Builder() {
            $ = new NtpServerArgs();
        }

        public Builder(NtpServerArgs defaults) {
            $ = new NtpServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param keyId NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder keyId(@Nullable Output<Integer> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId NTP provider key ID. Possible range is from `1` to `65535`. - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder keyId(Integer keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param maxPoll NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
         * 
         * @return builder
         * 
         */
        public Builder maxPoll(@Nullable Output<Integer> maxPoll) {
            $.maxPoll = maxPoll;
            return this;
        }

        /**
         * @param maxPoll NTP maximum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `6`
         * 
         * @return builder
         * 
         */
        public Builder maxPoll(Integer maxPoll) {
            return maxPoll(Output.of(maxPoll));
        }

        /**
         * @param minPoll NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
         * 
         * @return builder
         * 
         */
        public Builder minPoll(@Nullable Output<Integer> minPoll) {
            $.minPoll = minPoll;
            return this;
        }

        /**
         * @param minPoll NTP minimum interval default in seconds. Possible range is from `4` to `16`. - Range: `4`-`16` - Default value: `4`
         * 
         * @return builder
         * 
         */
        public Builder minPoll(Integer minPoll) {
            return minPoll(Output.of(minPoll));
        }

        /**
         * @param name NTP server.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name NTP server.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type NTP provider type. Possible values are `server` or `peer`. - Choices: `server`, `peer`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vrf Identifies the VRF for the NTP providers. - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder vrf(@Nullable Output<String> vrf) {
            $.vrf = vrf;
            return this;
        }

        /**
         * @param vrf Identifies the VRF for the NTP providers. - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder vrf(String vrf) {
            return vrf(Output.of(vrf));
        }

        public NtpServerArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
