// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nxos.nxos;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SviInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SviInterfaceArgs Empty = new SviInterfaceArgs();

    /**
     * Administrative port state. - Choices: `up`, `down` - Default value: `up`
     * 
     */
    @Import(name="adminState")
    private @Nullable Output<String> adminState;

    /**
     * @return Administrative port state. - Choices: `up`, `down` - Default value: `up`
     * 
     */
    public Optional<Output<String>> adminState() {
        return Optional.ofNullable(this.adminState);
    }

    /**
     * Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
     * 
     */
    @Import(name="delay")
    private @Nullable Output<Integer> delay;

    /**
     * @return Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
     * 
     */
    public Optional<Output<Integer>> delay() {
        return Optional.ofNullable(this.delay);
    }

    /**
     * Interface description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Interface description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Must match first field in the output of `show intf brief`. Example: `vlan100`.
     * 
     */
    @Import(name="interfaceId", required=true)
    private Output<String> interfaceId;

    /**
     * @return Must match first field in the output of `show intf brief`. Example: `vlan100`.
     * 
     */
    public Output<String> interfaceId() {
        return this.interfaceId;
    }

    /**
     * The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
     * 
     */
    @Import(name="medium")
    private @Nullable Output<String> medium;

    /**
     * @return The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
     * 
     */
    public Optional<Output<String>> medium() {
        return Optional.ofNullable(this.medium);
    }

    /**
     * Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
     * 
     */
    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    /**
     * @return Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
     * 
     */
    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    private SviInterfaceArgs() {}

    private SviInterfaceArgs(SviInterfaceArgs $) {
        this.adminState = $.adminState;
        this.bandwidth = $.bandwidth;
        this.delay = $.delay;
        this.description = $.description;
        this.device = $.device;
        this.interfaceId = $.interfaceId;
        this.medium = $.medium;
        this.mtu = $.mtu;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SviInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SviInterfaceArgs $;

        public Builder() {
            $ = new SviInterfaceArgs();
        }

        public Builder(SviInterfaceArgs defaults) {
            $ = new SviInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminState Administrative port state. - Choices: `up`, `down` - Default value: `up`
         * 
         * @return builder
         * 
         */
        public Builder adminState(@Nullable Output<String> adminState) {
            $.adminState = adminState;
            return this;
        }

        /**
         * @param adminState Administrative port state. - Choices: `up`, `down` - Default value: `up`
         * 
         * @return builder
         * 
         */
        public Builder adminState(String adminState) {
            return adminState(Output.of(adminState));
        }

        /**
         * @param bandwidth Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth Specifies the administrative port bandwidth. - Range: `1`-`400000000` - Default value: `1000000`
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param delay Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder delay(@Nullable Output<Integer> delay) {
            $.delay = delay;
            return this;
        }

        /**
         * @param delay Specifies the administrative port delay. - Range: `1`-`16777215` - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder delay(Integer delay) {
            return delay(Output.of(delay));
        }

        /**
         * @param description Interface description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Interface description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param interfaceId Must match first field in the output of `show intf brief`. Example: `vlan100`.
         * 
         * @return builder
         * 
         */
        public Builder interfaceId(Output<String> interfaceId) {
            $.interfaceId = interfaceId;
            return this;
        }

        /**
         * @param interfaceId Must match first field in the output of `show intf brief`. Example: `vlan100`.
         * 
         * @return builder
         * 
         */
        public Builder interfaceId(String interfaceId) {
            return interfaceId(Output.of(interfaceId));
        }

        /**
         * @param medium The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
         * 
         * @return builder
         * 
         */
        public Builder medium(@Nullable Output<String> medium) {
            $.medium = medium;
            return this;
        }

        /**
         * @param medium The administrative port medium type. - Choices: `bcast`, `p2p` - Default value: `bcast`
         * 
         * @return builder
         * 
         */
        public Builder medium(String medium) {
            return medium(Output.of(medium));
        }

        /**
         * @param mtu Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param mtu Administrative port MTU. - Range: `576`-`9216` - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        public SviInterfaceArgs build() {
            $.interfaceId = Objects.requireNonNull($.interfaceId, "expected parameter 'interfaceId' to be non-null");
            return $;
        }
    }

}
