// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.nxos.nxos;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VrfRouteTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final VrfRouteTargetArgs Empty = new VrfRouteTargetArgs();

    /**
     * Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
     * 
     */
    @Import(name="addressFamily", required=true)
    private Output<String> addressFamily;

    /**
     * @return Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
     * 
     */
    public Output<String> addressFamily() {
        return this.addressFamily;
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Route Target direction. - Choices: `import`, `export`
     * 
     */
    @Import(name="direction", required=true)
    private Output<String> direction;

    /**
     * @return Route Target direction. - Choices: `import`, `export`
     * 
     */
    public Output<String> direction() {
        return this.direction;
    }

    /**
     * Route Target in NX-OS DME format.
     * 
     */
    @Import(name="routeTarget", required=true)
    private Output<String> routeTarget;

    /**
     * @return Route Target in NX-OS DME format.
     * 
     */
    public Output<String> routeTarget() {
        return this.routeTarget;
    }

    /**
     * Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
     * 
     */
    @Import(name="routeTargetAddressFamily", required=true)
    private Output<String> routeTargetAddressFamily;

    /**
     * @return Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
     * 
     */
    public Output<String> routeTargetAddressFamily() {
        return this.routeTargetAddressFamily;
    }

    /**
     * VRF name.
     * 
     */
    @Import(name="vrf", required=true)
    private Output<String> vrf;

    /**
     * @return VRF name.
     * 
     */
    public Output<String> vrf() {
        return this.vrf;
    }

    private VrfRouteTargetArgs() {}

    private VrfRouteTargetArgs(VrfRouteTargetArgs $) {
        this.addressFamily = $.addressFamily;
        this.device = $.device;
        this.direction = $.direction;
        this.routeTarget = $.routeTarget;
        this.routeTargetAddressFamily = $.routeTargetAddressFamily;
        this.vrf = $.vrf;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VrfRouteTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VrfRouteTargetArgs $;

        public Builder() {
            $ = new VrfRouteTargetArgs();
        }

        public Builder(VrfRouteTargetArgs defaults) {
            $ = new VrfRouteTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressFamily Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
         * 
         * @return builder
         * 
         */
        public Builder addressFamily(Output<String> addressFamily) {
            $.addressFamily = addressFamily;
            return this;
        }

        /**
         * @param addressFamily Address family. - Choices: `ipv4-ucast`, `ipv6-ucast`
         * 
         * @return builder
         * 
         */
        public Builder addressFamily(String addressFamily) {
            return addressFamily(Output.of(addressFamily));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param direction Route Target direction. - Choices: `import`, `export`
         * 
         * @return builder
         * 
         */
        public Builder direction(Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Route Target direction. - Choices: `import`, `export`
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param routeTarget Route Target in NX-OS DME format.
         * 
         * @return builder
         * 
         */
        public Builder routeTarget(Output<String> routeTarget) {
            $.routeTarget = routeTarget;
            return this;
        }

        /**
         * @param routeTarget Route Target in NX-OS DME format.
         * 
         * @return builder
         * 
         */
        public Builder routeTarget(String routeTarget) {
            return routeTarget(Output.of(routeTarget));
        }

        /**
         * @param routeTargetAddressFamily Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
         * 
         * @return builder
         * 
         */
        public Builder routeTargetAddressFamily(Output<String> routeTargetAddressFamily) {
            $.routeTargetAddressFamily = routeTargetAddressFamily;
            return this;
        }

        /**
         * @param routeTargetAddressFamily Route Target Address Family. - Choices: `ipv4-ucast`, `ipv6-ucast`, `l2vpn-evpn`
         * 
         * @return builder
         * 
         */
        public Builder routeTargetAddressFamily(String routeTargetAddressFamily) {
            return routeTargetAddressFamily(Output.of(routeTargetAddressFamily));
        }

        /**
         * @param vrf VRF name.
         * 
         * @return builder
         * 
         */
        public Builder vrf(Output<String> vrf) {
            $.vrf = vrf;
            return this;
        }

        /**
         * @param vrf VRF name.
         * 
         * @return builder
         * 
         */
        public Builder vrf(String vrf) {
            return vrf(Output.of(vrf));
        }

        public VrfRouteTargetArgs build() {
            $.addressFamily = Objects.requireNonNull($.addressFamily, "expected parameter 'addressFamily' to be non-null");
            $.direction = Objects.requireNonNull($.direction, "expected parameter 'direction' to be non-null");
            $.routeTarget = Objects.requireNonNull($.routeTarget, "expected parameter 'routeTarget' to be non-null");
            $.routeTargetAddressFamily = Objects.requireNonNull($.routeTargetAddressFamily, "expected parameter 'routeTargetAddressFamily' to be non-null");
            $.vrf = Objects.requireNonNull($.vrf, "expected parameter 'vrf' to be non-null");
            return $;
        }
    }

}
